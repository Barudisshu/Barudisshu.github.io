<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简单易懂の现代魔法</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://galudisu.info/"/>
  <updated>2019-11-05T03:31:35.052Z</updated>
  <id>http://galudisu.info/</id>
  
  <author>
    <name>barudisshu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jira 快速安装</title>
    <link href="http://galudisu.info/2019/10/21/jira/jira-install/"/>
    <id>http://galudisu.info/2019/10/21/jira/jira-install/</id>
    <published>2019-10-21T09:13:27.000Z</published>
    <updated>2019-11-05T03:31:35.052Z</updated>
    
    <content type="html"><![CDATA[<p>JIRA是一个缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件，开发者是澳大利亚的Atlassian。JIRA这个名字并不是一个缩写，而是截取自“<strong>Gojira</strong>”，日文的哥斯拉发音。</p><p>采用Docker实现破解版的Jira安装。</p><a id="more"></a><ol><li>下载镜像</li></ol><p>一定要安装<code>jira-software</code>(不是jira)，否则没有agile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull dchevell/jira-software:7.13.0</span><br></pre></td></tr></table></figure><ol start="2"><li>运行容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it -p  8080:8080  --privileged  -m 4096M -v /data/jira-data:/var/atlassian/application-data/jira  -v /etc/localtime:/etc/localtime --name jira dchevell/jira-software:7.13.0</span><br></pre></td></tr></table></figure><ol start="3"><li>拷贝文件到容器内</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/hlwojiv/some-software/raw/master/Jira/mysql-connector-java-5.1.25-bin.jar</span><br><span class="line">wget https://github.com/hlwojiv/some-software/raw/master/Jira/atlassian-universal-plugin-manager-plugin-2.22.4.jar</span><br><span class="line">wget https://github.com/hlwojiv/some-software/raw/master/Jira/atlassian-extras-3.2.jar</span><br></pre></td></tr></table></figure><p>拷贝mysql-connector</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mysql-connector-java-5.1.25-bin.jar jira:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure><p>进入容器修改mysql-connector的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jira bash</span><br><span class="line">chmod 755 /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/mysql-connector-java-5.1.25-bin.jar</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart jira</span><br></pre></td></tr></table></figure><ol start="3"><li>安装MySQL</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -v /data/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --restart=unless-stopped -d mysql:5.7</span><br></pre></td></tr></table></figure><ol start="4"><li>设置</li></ol><p>浏览器访问JiraWeb，语言可以设为中文，选择「我将设置它自己」——「下一步」</p><p>数据库设置，数据库类型选择「MySQL」，接着填入你的MySQL连接信息（需要你在你的MySQL数据库中创建数据库，数据库的字符类型必须是utf8），测试可以连接之后点击「下一步」</p><p>设置应用程序的属性——「下一步」</p><p>申请许可证关键字，点击「生成Jira试用许可证」</p><p>需要注册账号，注册完之后重新回到这个页面，选择相关信息，点击「Generate License」</p><p>点击「Yes」</p><p>页面就会带着你的许可证关键字回到Jira的设置页面，接着点击「下一步」</p><p>等待一会就进入设置管理员页面，填入一些信息即可，接着「下一步」</p><p>点击「完成」即完成设置</p><ol start="5"><li>拷贝文件到容器内</li></ol><p>拷贝atlassian-extras到容器内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp atlassian-extras-3.2.jar jira:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure><p>进入容器设置atlassian-extras的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jira bash</span><br><span class="line">chmod 755 /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/atlassian-extras-3.2.jar</span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart jira</span><br></pre></td></tr></table></figure><p>拷贝插件到容器内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp atlassian-universal-plugin-manager-plugin-2.22.4.jar jira:/opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/</span><br></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jira bash</span><br><span class="line">chmod 755 /opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/atlassian-universal-plugin-manager-plugin-2.22.4.jar</span><br></pre></td></tr></table></figure><p>删除另一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/atlassian-universal-plugin-manager-plugin-2.22.9.jar</span><br></pre></td></tr></table></figure><p>破解结束，进入jira下载任意插件，申请试用，自动破解</p><ol start="6"><li>下面来下载一个收费软件试试</li></ol><p>安装完了点击「获取许可证」</p><p>接着在「管理应用」中可以看到，该插件已经破解了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JIRA是一个缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件，开发者是澳大利亚的Atlassian。JIRA这个名字并不是一个缩写，而是截取自“&lt;strong&gt;Gojira&lt;/strong&gt;”，日文的哥斯拉发音。&lt;/p&gt;
&lt;p&gt;采用Docker实现破解版的Jira安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jira" scheme="http://galudisu.info/tags/jira/"/>
    
  </entry>
  
  <entry>
    <title>随机算法关于生日悖论的求值</title>
    <link href="http://galudisu.info/2019/02/26/algorithm/probabilistic/birthday-paradox-problem/"/>
    <id>http://galudisu.info/2019/02/26/algorithm/probabilistic/birthday-paradox-problem/</id>
    <published>2019-02-26T12:13:58.000Z</published>
    <updated>2019-08-27T09:05:47.468Z</updated>
    
    <content type="html"><![CDATA[<p>In probability theory, the birthday problem, or birthday paradox This not a paradox in the sense of leading to a logical contradiction, but is called a paradox because the mathematical truth contradicts naive intuition: most people estimate that the chance is much lower than 50%. pertains to the probalility that in a set of randomly chosen people some pair of them will have the same birthday. In a group of at least 23 randomly chosen people, there is more than 50% probalility that some pair of them will both have been born on the same day. For 57 or more people, the probability is more than 99%, and it reachese 100% when the number of people reaches 366 (by the pigeon hole principle, ignoring leap yeas). The mathematics behind this problem lead to a well-known cryptographic attack call the birthday attack.</p><a id="more"></a><p>Using simulation, estimate the number of independent people required in a groups before we can expect a better than even chance that at least 2 independent people in a group share a common birthday. Furthermore: Simulate and thus estimate when we can expect a better than even chance that at least 3, 4 &amp; 5 independent people of the group share a common birthday. For simplicity assume that all of the people are alive…</p><h2><span id="calculating-the-probalility">Calculating the probalility</span></h2><p>数学概率推导方法，</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">probe</span></span>(n: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> probe: <span class="built_in">f64</span> = <span class="number">0</span>.;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> k &lt; n &#123;</span><br><span class="line">        k += <span class="number">1</span>;</span><br><span class="line">        probe = <span class="number">1.0</span> - ((<span class="number">1.0</span> - probe) * ((<span class="number">365</span> - (k - <span class="number">1</span>)) <span class="keyword">as</span> <span class="built_in">f64</span>) / (<span class="number">365</span> <span class="keyword">as</span> <span class="built_in">f64</span>));</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Number of people: &#123;&#125;, \tProb. of same birthday: &#123;&#125;"</span>, k, probe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="birthday-attack">Birthday Attack</span></h2><p>生日悖论可以描述为：在N个人中，想使至少由两个人生日相同的概率大于50%，问N的最小值是多少？答案是23人。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DAYS_IN_YEAR: <span class="built_in">usize</span> = <span class="number">365</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">equal_birthdays</span></span>(n_sharers: <span class="built_in">usize</span>, group_size: <span class="built_in">usize</span>, n_repetitions: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = rand::thread_rng();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> eq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..n_repetitions &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> group = <span class="built_in">vec!</span>[<span class="number">0</span>; DAYS_IN_YEAR];</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..group_size &#123;</span><br><span class="line">            <span class="keyword">let</span> idx = rng.gen_range(<span class="number">0</span>, group.len());</span><br><span class="line">            group[idx] = group[idx] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> group.iter() &#123;</span><br><span class="line">            <span class="keyword">if</span> *k &gt;= n_sharers &#123;</span><br><span class="line">                eq = eq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (eq <span class="keyword">as</span> <span class="built_in">f64</span> * <span class="number">100.0</span>) / n_repetitions <span class="keyword">as</span> <span class="built_in">f64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> group_est = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> sharers <span class="keyword">in</span> <span class="number">2</span>..<span class="number">6</span> &#123;</span><br><span class="line">        <span class="comment">// Coarse.</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> group_size = group_est + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> equal_birthdays(sharers, group_size, <span class="number">100</span>) &lt; <span class="number">50.0</span> &#123;</span><br><span class="line">            group_size = group_size + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Finer.</span></span><br><span class="line">        <span class="keyword">let</span> inf = ((group_size - (group_size - group_est)) <span class="keyword">as</span> <span class="built_in">f64</span> / <span class="number">4.0</span>) <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">        <span class="keyword">for</span> gs <span class="keyword">in</span> inf..(group_size + <span class="number">999</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> eq = equal_birthdays(sharers, group_size, <span class="number">250</span>);</span><br><span class="line">            <span class="keyword">if</span> eq &gt; <span class="number">50.0</span> &#123;</span><br><span class="line">                group_size = gs;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> gs <span class="keyword">in</span> (group_size - <span class="number">1</span>)..(group_size + <span class="number">999</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> eq = equal_birthdays(sharers, gs, <span class="number">50_000</span>);</span><br><span class="line">            <span class="keyword">if</span> eq &gt; <span class="number">50.0</span> &#123;</span><br><span class="line">                group_est = gs;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"&#123;&#125; independent people in a group of &#123;&#125; share a common birthday. &#123;&#125;"</span>, sharers, gs, eq);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In probability theory, the birthday problem, or birthday paradox This not a paradox in the sense of leading to a logical contradiction, but is called a paradox because the mathematical truth contradicts naive intuition: most people estimate that the chance is much lower than 50%. pertains to the probalility that in a set of randomly chosen people some pair of them will have the same birthday. In a group of at least 23 randomly chosen people, there is more than 50% probalility that some pair of them will both have been born on the same day. For 57 or more people, the probability is more than 99%, and it reachese 100% when the number of people reaches 366 (by the pigeon hole principle, ignoring leap yeas). The mathematics behind this problem lead to a well-known cryptographic attack call the birthday attack.&lt;/p&gt;
    
    </summary>
    
    
      <category term="probabilistic" scheme="http://galudisu.info/tags/probabilistic/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7快速构建Ceph集群</title>
    <link href="http://galudisu.info/2019/02/08/ceph/quickly-build-a-new-ceph-cluster-with-ceph-deploy-on-centos-7/"/>
    <id>http://galudisu.info/2019/02/08/ceph/quickly-build-a-new-ceph-cluster-with-ceph-deploy-on-centos-7/</id>
    <published>2019-02-08T02:34:51.000Z</published>
    <updated>2019-08-27T09:05:47.477Z</updated>
    
    <content type="html"><![CDATA[<p>Ceph是一个分布式、可扩展、高可用、性能优异的存储系统平台，支持块设备、文件系统和REST三种存储接口。它是一个高度可配置的系统，并提供了一个命令行界面用于监视和控制其存储集群。Ceph还包含认证和授权功能，可兼容多种存储网关接口，如OpenStack Swift和Amazon S3。</p><a id="more"></a><h2><span id="ceph-cluster">Ceph cluster</span></h2><p>机器准备，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ceph    10.10.51.200</span><br><span class="line">mon1    10.10.51.201</span><br><span class="line">mon2    10.10.51.202</span><br><span class="line">mon3    10.10.51.203</span><br><span class="line">osd1    10.10.51.211   (10.10.110.211)</span><br><span class="line">osd2    10.10.51.212   (10.10.110.212)</span><br><span class="line">osd3    10.10.51.213   (10.10.110.213)</span><br><span class="line">osd4    10.10.51.214   (10.10.110.214)</span><br></pre></td></tr></table></figure><p>因为ceph-deploy工具是通过主机名与其他节点通信，所以要通过hostnamectl修改主机名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname ceph</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname mon1</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname mon2</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname mon3</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd1</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd2</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd3</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">每个节点执行以下命令，</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">useradd -d /home/cephuser -m cephuser</span><br><span class="line">passwd cephuser</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cephuser ALL = (root) NOPASSWD:ALL"</span> | sudo tee /etc/sudoers.d/cephuser</span><br><span class="line">chmod 0440 /etc/sudoers.d/cephuser</span><br><span class="line">yum install -y ntp ntpdate ntp-doc</span><br><span class="line">ntpdate 0.us.pool.ntp.org</span><br><span class="line">hwclock --systohc</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd.service</span><br><span class="line">systemctl start ntpd.service</span><br><span class="line">yum install -y open-vm-tools <span class="comment">## If you run the nodes as virtual machines, otherwise remove this line</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/selinux/config</span><br><span class="line">sed -i s<span class="string">'/Defaults requiretty/#Defaults requiretty'</span>/g /etc/sudoers</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure><p>每个节点建立cephuser用户的ssh连接，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id cephuser@osd1</span><br></pre></td></tr></table></figure><p>在每个节点执行下面命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.ssh/config</span><br><span class="line">Host osd1</span><br><span class="line">Hostname osd1</span><br><span class="line">User cephuser</span><br><span class="line">Host osd2</span><br><span class="line">Hostname osd2</span><br><span class="line">User cephuser</span><br><span class="line">Host osd3</span><br><span class="line">Hostname osd3</span><br><span class="line">User cephuser</span><br><span class="line">Host osd4</span><br><span class="line">Hostname osd4</span><br><span class="line">User cephuser</span><br><span class="line">Host mon1</span><br><span class="line">Hostname mon1</span><br><span class="line">User cephuser</span><br><span class="line">Host mon2</span><br><span class="line">Hostname mon2</span><br><span class="line">User cephuser</span><br><span class="line">Host mon3</span><br><span class="line">Hostname mon3</span><br><span class="line">User cephuser</span><br></pre></td></tr></table></figure><p>更改权限，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 440 ~/.ssh/config</span><br></pre></td></tr></table></figure><p>每个OSD节点准备磁盘，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parted -s /dev/sdc mklabel gpt mkpart primary xfs 0% 100%</span><br><span class="line">mkfs.xfs /dev/sdc -f</span><br><span class="line">parted -s /dev/sdd mklabel gpt mkpart primary xfs 0% 100%</span><br><span class="line">mkfs.xfs /dev/sdd -f</span><br><span class="line">parted /dev/sde mklabel gpt mkpart primary xfs 0% 100%</span><br><span class="line">mkfs.xfs /dev/sde -f</span><br><span class="line">parted -s /dev/sdb mklabel gpt mkpart primary 0% 33% mkpart primary 34% 66% mkpart primary 67% 100%</span><br></pre></td></tr></table></figure><p><img src="/img/ceph/osd-disk.png" alt=""></p><p>使用cephuser账号登录管理节点(即ceph node)，创建一个专用目录，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ceph-deploy</span><br><span class="line"><span class="built_in">cd</span> ceph-deploy/</span><br></pre></td></tr></table></figure><p>在监控节点安装和创建新集群，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uhv http://download.ceph.com/rpm-jewel/el7/noarch/ceph-release-1-1.el7.noarch.rpm</span><br><span class="line">sudo yum update -y &amp;&amp; sudo yum install ceph-deploy -y</span><br></pre></td></tr></table></figure><p>初始化配置，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi ceph.conf</span><br><span class="line">public network = 10.10.51.0/24</span><br><span class="line">cluster network = 10.10.110.0/24</span><br><span class="line"><span class="comment">#Choose reasonable numbers for number of replicas and placement groups.</span></span><br><span class="line">osd pool default size = 2 <span class="comment"># Write an object 2 times</span></span><br><span class="line">osd pool default min size = 1 <span class="comment"># Allow writing 1 copy in a degraded state</span></span><br><span class="line">osd pool default pg num = 256</span><br><span class="line">osd pool default pgp num = 256</span><br><span class="line"><span class="comment">#Choose a reasonable crush leaf type</span></span><br><span class="line"><span class="comment">#0 for a 1-node cluster.</span></span><br><span class="line"><span class="comment">#1 for a multi node cluster in a single rack</span></span><br><span class="line"><span class="comment">#2 for a multi node, multi chassis cluster with multiple hosts in a chassis</span></span><br><span class="line"><span class="comment">#3 for a multi node cluster with hosts across racks, etc.</span></span><br><span class="line">osd crush chooseleaf <span class="built_in">type</span> = 1</span><br></pre></td></tr></table></figure><p>然后，在为个节点安装ceph，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy install ceph mon1 mon2 mon3 osd1 osd2 osd3 osd4</span><br><span class="line">ceph-deploy mon create-initial</span><br><span class="line">ceph-deploy gatherkeys mon1</span><br></pre></td></tr></table></figure><p>在每个OSD节点创建OSD磁盘，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy disk zap osd1:sdc osd1:sdd osd1:sde</span><br><span class="line">ceph-deploy osd create osd1:sdc:/dev/sdb1 osd1:sdd:/dev/sdb2 osd1:sde:/dev/sdb3</span><br></pre></td></tr></table></figure><p>集群创建完后，发现OSD没有开启，这时新版ceph-deploy一个issue，执行下面命令解决，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sgdisk -t 1:45b0969e-9b03-4f30-b4c6-b4b80ceff106 /dev/sdb</span><br><span class="line">sgdisk -t 2:45b0969e-9b03-4f30-b4c6-b4b80ceff106 /dev/sdb</span><br><span class="line">sgdisk -t 3:45b0969e-9b03-4f30-b4c6-b4b80ceff106 /dev/sdb</span><br></pre></td></tr></table></figure><p>重启每个节点，给每个monitor加入systemd，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> ceph-mon.target</span><br></pre></td></tr></table></figure><p>最后，给所有节点部署密钥，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy admin ceph mon1 mon2 mon3 osd1 osd2 osd3 osd4</span><br><span class="line">sudo chmod +r /etc/ceph/ceph.client.admin.keyring</span><br></pre></td></tr></table></figure><p>一切如果正常，使用<code>ceph -v</code>和<code>ceph -s</code>会看到，</p><p><img src="/img/ceph/ceph-cluster.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ceph是一个分布式、可扩展、高可用、性能优异的存储系统平台，支持块设备、文件系统和REST三种存储接口。它是一个高度可配置的系统，并提供了一个命令行界面用于监视和控制其存储集群。Ceph还包含认证和授权功能，可兼容多种存储网关接口，如OpenStack Swift和Amazon S3。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ceph" scheme="http://galudisu.info/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 设计理念及主要概念之Volume(四)</title>
    <link href="http://galudisu.info/2019/02/08/kubernetes/kubernetes-04-theory-and-concpetion-md/"/>
    <id>http://galudisu.info/2019/02/08/kubernetes/kubernetes-04-theory-and-concpetion-md/</id>
    <published>2019-02-08T02:16:43.000Z</published>
    <updated>2019-08-27T09:05:47.521Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="kubernetes存储卷">Kubernetes存储卷</span></h2><p>默认情况下容器的数据都是非持久化的，在容器消亡以后数据也跟着丢失，所以Docker提供了Volume机制以便将数据持久化存储。类似的，Kubernetes提供了更强大的Volume机制和丰富的插件，解决了容器数据持久化和容器间共享数据的问题。</p><p>与Docker不同，Kubernetes Volume的生命周期与Pod绑定</p><ul><li>容器挂掉后Kubelet再次重启容器时，Volume的数据依然还在</li><li>而Pod删除时，Volume才会清理。数据是否丢失取决于具体的Volume类型，比如emptyDir的数据会丢失，而PV的数据不会丢失</li></ul><a id="more"></a><ol><li>Volume类型</li></ol><p>目前，Kubernetes支持以下Volume类型：</p><ul><li>emptyDir</li><li>hostPath</li><li>gcePersistentDisk</li><li>awsElasticBlokStore</li><li>nfs</li><li>iscsi</li><li>flocker</li><li>glusterfs</li><li>rbd</li><li>cephfs</li><li>gitRepo</li><li>secret</li><li>persistentVolumeClaim</li><li>downwardAPI</li><li>azureFileVolume</li><li>vsphereVolume</li><li>Quobyte</li><li>PortworxVolume</li><li>ScaleIO</li><li>FlexVolume</li><li>StorageOS</li><li>local</li></ul><p>这些Volume并非全部都是持久化的，emptyDir与hostPath数据节点级别的卷类型，emptyDir的生命周期与Pod资源相同，而使用hostPath卷的Pod一旦被重新调度至其他节点，那么它将无法再使用此前的数据。</p><p>再如，Secret和ConfigMap算得上是两种特殊的卷类型。</p><ul><li><p>Secret用于向Pod传递敏感信息、如密码、私钥、证书文件等，这些信息如果直接定义在镜像中很容易导致泄露，有了Secret资源，用户可以将这些信息存储于集群中而后再由Pod进行挂载，从而实现将敏感数据与系统解耦。</p></li><li><p>ConfigMap资源则用于向Pod注入非敏感数据，使用时，用户将数据直接存储于ConfigMap对象中，而后直接在Pod中使用ConfigMap卷引用它即可，它可以帮助实现容器配置文件集中化定义和管理。</p></li></ul><p>因此，类似于emptyDir、hostPath、secret、gitRepo等，这些Volume会随着Pod的消亡而消失。</p><ol start="2"><li>Volume的使用</li></ol><p>在Pod中定义Volume由两部分组成：一是<code>.spec.valumes</code>，用于支持不同的Volume类型；二是<code>.spec.containers.volumeMounts</code>，用于定义挂载列表。</p><p>在Pod级别定义Volume，<code>.spec.volumes</code>字段可以定义多个Volume，例如下面定义了emptyDir类型和gitRepo类型，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">logdata</span></span><br><span class="line"><span class="attr">  emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">  gitRepo:</span></span><br><span class="line"><span class="attr"> repository:</span> <span class="attr">https://github.com/barudisshu/kubernetes-pratise.git</span></span><br><span class="line"><span class="attr"> revision:</span> <span class="string">master</span></span><br><span class="line"><span class="attr"> directory:</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><p>定义好的Volume可以共享。当Pod中只有一个容器时，使用存储卷通常用于数据持久化。</p><p><code>.spec.containers.volumeMounts</code>字段定义了Volume的挂载列表。它的挂载格式是固定的，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr"> spec:</span></span><br><span class="line">   <span class="string">...</span></span><br><span class="line"><span class="attr">   containers:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">&lt;String&gt;</span></span><br><span class="line"> <span class="string">...</span></span><br><span class="line"><span class="attr"> volumeMounts:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">name</span> <span class="string">&lt;String&gt;</span> <span class="bullet">-required-</span></span><br><span class="line">   <span class="string">mountPath</span> <span class="string">&lt;string&gt;</span> <span class="bullet">-required-</span></span><br><span class="line"><span class="string">readOnly</span> <span class="string">&lt;boolean&gt;</span></span><br><span class="line"><span class="string">subPath</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"><span class="string">montPropagation</span> <span class="string">&lt;string&gt;</span></span><br></pre></td></tr></table></figure><p>其中，</p><ul><li>name<string>：指定要挂载的存储的名称，必选</string></li><li>mountPath<string>：挂载点路径，容器文件系统上的路径，必选</string></li><li>readOnly<boolean>：是否挂载为只读</boolean></li><li>subPath<string>：子路径，即mountPath指定的路径下的一个字路径</string></li></ul><p>例如，容器myapp将logdata存储卷挂载在/var/log/myapp，将example挂载到/webdata/example目录，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">ikubernetes/myapp:v7</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">logdata</span></span><br><span class="line"><span class="attr">    mountPath:</span> <span class="string">/var/log/myapp/</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">    mountPath:</span> <span class="string">/webdata/example/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>emptyDir</li></ol><p>emptyDir，如果Pod设置了emptyDir类型Volume，Pod被分配到Node上时候，会创建emptyDir，只要Pod运行在Node上，emptyDir都会存在(容器挂掉不会导致emptyDir丢失数据)，但是如果Pod从Node上被删除(Pod被删除，或者Pod发生迁移)，emptyDir也会被删除，并且永久丢失。</p><p><code>.spec.volumes.emptyDir</code>嵌套字段包含有，</p><ul><li>medium：存储介质的类型，默认为default,表示为使用节点默认存储介质；另一种是Memory，表示使用RAM的临时文件系统tmpfs，空间受限于内存，但性能非常好，通常用于作为缓存。</li><li>sizeLimit：当前Volume的空间限额，默认为nil，表示不限制；不过如果medium字段值为Memory时建议定义限额。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-emptydir-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">      emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-emptydir-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">nginx:1.12-alpine</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">pagegen</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">alpine</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/html</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">      command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"/bin/sh"</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"-c"</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">$(hostname)</span> <span class="string">$(date)</span> <span class="string">&gt;&gt;</span> <span class="string">/html/index.html;</span></span><br><span class="line">            <span class="string">sleep</span> <span class="number">10</span><span class="string">;</span></span><br><span class="line">          <span class="string">done</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>容器pagegen每隔10秒向Volume上的index.html文件追加一行信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pods vol-emptydir-pod</span><br></pre></td></tr></table></figure><p>创建Service或直接在集群访问Pod的信息，可看到，</p><p><img src="/img/kubernetes/pagegen-vol.png" alt=""></p><p>边车(sidecar)容器pagegen每隔10秒生成一行信息追加到Volume上的index.html文件。另外emptyDir存储卷可以基于RAM创建tmpfs文件系统的存储卷，常用于缓存，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">cache</span></span><br><span class="line"><span class="attr">  emptyDir:</span></span><br><span class="line"><span class="attr"> medium:</span> <span class="string">Memory</span></span><br></pre></td></tr></table></figure><ol start="4"><li>gitRepo</li></ol><p>gitRepo存储卷是emptyDir的实际应用，它看做是将一份Git仓储中的数据克隆(clone)到创建的空目录(emptyDir)，而后再创建容器并挂载该存储卷。</p><p>gitRepo存储卷自Kubernetes1.12开始已经废弃，所以这里不再陈述。</p><ol start="5"><li>hostPath</li></ol><p>hostPath运行挂载Node上的文件系统到Pod里面去。如果Pod需要使用Node上的文件，可以使用hostPath。因为它独立于Pod资源的生命周期，因而具有持久性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-hostpath-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-hostpath-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-hostpath-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">ikubernetes/filebeat:5.6.7-alpine</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">REDIS_HOST</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">redis.kubernetes.io:6379</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">LOG_LEVEL</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">socket</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">  terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">socket</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><p>这类Pod资源通常受控于daemonset类型的Pod控制器，它运行于集群中的每个工作节点之上，负责收集工作节点上系统级的相关数据，因此使用hostPath存储卷。这里的filebeat应用架构中，通过Redis进行资源收集，这些收集的日志信息会发往ELK进行统计展示。</p><p>hostPath上如果是不受控于Daemonset的无状态应用，重新调度节点运行时，无法确保此前创建的文件或目录是否存在。因此，hostPath虽能持久化数据，但对调度器来说并不适用，这时需要用到独立于集群节点的持久化存储卷，即网络存储卷。</p><blockquote><p>网络存储卷，就是类似于NAS或SAN设备、分布式存储(GlusterFS、RBD)、云端存储(gcePersistentDisk、azureDisk、cinder和awsElasticBlockStore)以及构建在各类存储系统之上的抽象管理层(flocker、portworx Volume和vsphere Volume)等这类网络服务存储。</p></blockquote><ol start="6"><li>NFS</li></ol><p>NFS，即Network File System，网络文件系统。Kubernetes中通过简单配置可以挂在NFS到Pod中，而NFS中的数据是可以永久保存的，同时NFS支持同时写操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-nfs-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-nfs-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-nfs-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:4-alpine</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisport</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">      nfs:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/data/redis</span></span><br><span class="line"><span class="attr">        server:</span> <span class="string">nfs.kubernetes.io</span></span><br><span class="line"><span class="attr">        readOnly:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="7"><li>RBD</li></ol><p>Ceph RBD<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>是一个分布式、弹性可扩展的、高可靠的、性能优异的存储系统平台。要配置Pod资源使用RBD存储卷，前提条件要满足：</p><ul><li>Ceph RBD存储集群，</li><li>Ceph RBD集群中创建有满足Pod资源数据用到的存储image</li><li>Kubernetes集群内各个节点需要安装Ceph客户端程序包(ceph-common)</li></ul><p>它的字段信息有，</p><ul><li><code>monitors&lt;[]string&gt;</code>：Ceph存储监视器，逗号分隔的字符串列表；必选字段</li><li><code>image&lt;string&gt;</code>：rados image的名称，必选字段</li><li><code>pool&lt;string&gt;</code>：rados存储池名称，默认为RBD</li><li><code>user&lt;string&gt;</code>：rados用户名，默认为admin</li><li><code>keyring&lt;string&gt;</code>：RBD用户认证时使用的keyring文件路径，默认为<code>/etc/ceph/keyring</code></li><li><code>secretRef&lt;Object&gt;</code>：RBD用户认证时使用的保存有相应认证信息的Secret对象，会覆盖由keyring字段提供的密钥信息</li><li><code>readOnly&lt;boolean&gt;</code>：是否以只读的方式进行访问</li><li><code>fsType</code>：要挂载的存储卷的文件系统类型，至少应该是节点操作系统支持的文件系统，如ext4、xfs、ntf等，默认为ext4</li></ul><p>下面是使用RBD存储卷的Pod资源示例，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ceph-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"kubernetes.io/rbd"</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">QVFENnNsNWMrQm52T2hBQXVYclJVeVNuUzBhOXVUVk00WnpiVFE9PQ==</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ceph-rbd</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/rbd</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  monitors:</span> <span class="number">192.168</span><span class="number">.50</span><span class="number">.32</span><span class="string">,192.168.50.33,192.168.50.34</span></span><br><span class="line"><span class="attr">  adminId:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  adminSecretName:</span> <span class="string">ceph-secret</span></span><br><span class="line"><span class="attr">  pool:</span> <span class="string">kube</span></span><br><span class="line"><span class="attr">  userId:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  userSecretName:</span> <span class="string">ceph-secret</span></span><br><span class="line"><span class="attr">  fsType:</span> <span class="string">xfs</span></span><br><span class="line"><span class="attr">  imageFormat:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">  imageFeatures:</span> <span class="string">"layering"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-rbd-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-rbd-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-rbd-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:4-alpine</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisport</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redis-rbd-vol</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redis-rbd-vol</span></span><br><span class="line"><span class="attr">      persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">        claimName:</span> <span class="string">ceph-claim</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ceph-claim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOne</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">2</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure><p>该示例依赖于事先存在的一个Ceph存储集群，这里假设其监视器的地址为192.168.50.32、192.168.50.33、192.168.50.34三个主机，并且集群上的存储池kube中存在创建好的映像Redis，此映像拥有xfs文件系统。Ceph客户端访问集群时需要事先完成认证之后才能进行后续访问操作，认证信息保存于名为ceph-secret的Secret资源对象中。</p><p>更多关于reph的配置方式，参考<a href="https://jimmysong.io/kubernetes-handbook/practice/using-ceph-for-persistent-storage.html" target="_blank" rel="noopener">这里</a>。</p><ol start="8"><li>GlusterFS 存储卷</li></ol><p>GlusterFS(Gluster File System)是一个开源的分布式文件系统，是水平扩展存储解决方案Gluster的核心，具有强大的横向扩展能力，GlusterFS通过扩展能够支持数PB存储容量和处理数千客户端。要配置Pod资源使用GlusterFS存储卷，需要事先满足以下前提条件。</p><ul><li>存在某个可用集群，</li><li>在GlusterFS集群创建了Pod需要使用的Volume，</li><li>Kubernetes集群各个节点安装GlusterFS客户端程序包(glusterfs和glusterfs-fuse),</li></ul><p>Pod定义GlusterFS类型Volume，包含的字段有，</p><ul><li><code>endpoint&lt;string&gt;</code>：访问入口，必选字段，</li><li><code>path&lt;string&gt;</code>：用到GlusterFS集群的卷路径，</li><li><code>readOnly&lt;boolean&gt;</code>：是否为只读卷，</li></ul><p>下面是一个定义在vol-glusterfs.yaml配置文件中的Pod资源示例，它使用了GlusterFS存储卷持久保存应用数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-glusterfs-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-glusterfs-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:alpine</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisport</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">      glusterfs:</span></span><br><span class="line"><span class="attr">        endpoints:</span> <span class="string">glusterfs-endpoints</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">kube-redis</span></span><br><span class="line"><span class="attr">        readOnly:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>另外创建Endpoints资源glusterfs-endpoints，以用于Pod资源访问，</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="/2019/02/08/ceph/quickly-build-a-new-ceph-cluster-with-ceph-deploy-on-centos-7/">Ceph集群安装</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kubernetes存储卷&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#kubernetes存储卷&quot;&gt;¶&lt;/a&gt;Kubernetes存储卷&lt;/h2&gt;
&lt;p&gt;默认情况下容器的数据都是非持久化的，在容器消亡以后数据也跟着丢失，所以Docker提供了Volume机制以便将数据持久化存储。类似的，Kubernetes提供了更强大的Volume机制和丰富的插件，解决了容器数据持久化和容器间共享数据的问题。&lt;/p&gt;
&lt;p&gt;与Docker不同，Kubernetes Volume的生命周期与Pod绑定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器挂掉后Kubelet再次重启容器时，Volume的数据依然还在&lt;/li&gt;
&lt;li&gt;而Pod删除时，Volume才会清理。数据是否丢失取决于具体的Volume类型，比如emptyDir的数据会丢失，而PV的数据不会丢失&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 设计理念及主要概念之Service(三)</title>
    <link href="http://galudisu.info/2019/02/06/kubernetes/kubernetes-03-theory-and-concpetion-md/"/>
    <id>http://galudisu.info/2019/02/06/kubernetes/kubernetes-03-theory-and-concpetion-md/</id>
    <published>2019-02-06T02:16:43.000Z</published>
    <updated>2019-08-27T09:05:47.519Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="服务发现与负载均衡">服务发现与负载均衡</span></h2><p>Kubernetes提供有服务发现和负载均衡机制，提供了Service资源，并通过kube-proxy配合cloud provider来适应不同的应用场景。</p><p>目前，Kubernetes中的负载均衡大致可以分为以下几种机制，每种机制都有其特定的应用场景：</p><ul><li>Service：直接用Service提供cluster内部的负载均衡，并借助cloud provider提供的LB提供外部访问</li><li>Ingress Controller：还是用Service提供cluster内部的负载均衡，但是通过自定义LB提供外部访问</li><li>Service Load Balancer：把load balancer直接跑在容器中，实现Bare Metal的Service Load Balancer</li><li>Custom Load Balancer：自定义负载均衡，并替代kube-proxy，一般在物理部署Kubernetes时使用，方便接入公司已有的外部服务</li></ul><a id="more"></a><h2><span id="service">Service</span></h2><p><img src="/img/kubernetes/service.svg" alt="service"></p><p>Kubernetes设计了Service的抽象：逻辑上的一组Pod，一种可以访问它们的策略。这一组Pod能够被Service访问，并为它们提供一个统一的入口。通常是通过Label Selector实现的。借助Service，应用可以方便的实现服务发现与负载均衡，实现应用的零宕机升级。</p><p>Service通过标签选取服务后端，一般配合Replication Controller或者Deployment来保证后端容器的正常运行。这些匹配标签的Pod IP和端口列表组成endpoints，由kube-proxy负责将服务IP负载均衡到这些endpoints上。</p><p>Service由四种类型：</p><ul><li>ClusterIP：默认类型，自动分配一个仅cluster内部可以访问的虚拟IP</li><li>NodePort：在ClusterIP基础上为Service在每台机器上绑定一个端口，这样就可以通过<code>&lt;NodeIP&gt;:NodePort</code>来访问该服务</li><li>LoadBalancer：在NodePort的基础上，借助cloud provider创建一个外部的负载均衡器，并将请求转发到<code>&lt;NodeIP&gt;:NodePort</code></li><li>ExternalName：将服务通过DNS CNAME记录方式转发到指定的域名(通过<code>spec.externalName</code>设定)。需要kube-dns版本在1.7以上。</li></ul><p>另外，也可以将已有的服务以Service的形式加入到Kubernetes集群中来，只需要在创建Service的时候不指定Label selector，而是在Service创建好后手动为其添加endpoint。</p><ol><li>Service定义</li></ol><p>通过yaml或json定义，比如下面定义一个名为nginx的服务，将服务的80端口转发到default namespace中带有标签<code>run=nginx</code>的Pod的80端口，</p><p>在此之前，首先要部署Pod，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>其次再定义Service，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">None</span></span><br></pre></td></tr></table></figure><p>Service自动分配了Cluster IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> kubectl get service nginx-app       </span><br><span class="line">NAME        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">nginx-app   ClusterIP   10.108.166.254   &lt;none&gt;        80/TCP    22s</span><br></pre></td></tr></table></figure><p>自动创建的endpoint</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get endpoints nginx-app</span><br><span class="line">NAME        ENDPOINTS                       AGE</span><br><span class="line">nginx-app   10.244.1.38:80,10.244.3.28:80   82s</span><br></pre></td></tr></table></figure><p>自动关联endpoint</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe service nginx-app  </span><br><span class="line">Name:              nginx-app</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            run=nginx-app</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          run=nginx-app</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.108.166.254</span><br><span class="line">Port:              &lt;<span class="built_in">unset</span>&gt;  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.244.1.38:80,10.244.3.28:80</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>不指定Selectors服务</li></ol><p>在创建Service的时候，也可以不指定Selectors，用来将Service转发到Kubernetes集群外部的服务(而不是Pod)。目前有两种方法</p><p>一是， 自定义endpoint，即创建同名的service和endpoint，在endpoint中设置外部服务的IP和端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">targetPort:</span> <span class="number">9376</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">  - addresses:</span></span><br><span class="line"><span class="attr">      - ip:</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure><p>二是，通过DNS转发，在Service定义中指定externalName。此时DNS服务会给<code>&lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local</code>创建一个CNAME记录，其值为<code>my.database.example.com</code>。并且，该服务不会自动分配Cluster IP，需要通过Service的DNS来访问(这种服务也称为Headless Service)。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ExternalName</span></span><br><span class="line"><span class="attr">  externalName:</span> <span class="string">my.database.example.com</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Headless服务</li></ol><p>Headless服务即不需要Cluster IP的服务，即在创建Service的时候，指定<code>spec.clusterIP=None</code>，包括两种类型，</p><ul><li>不指定Selectors，但设置externalName，通过CNAME记录处理</li><li>指定Selectors，通过DNS A记录设置后端endpoint列表</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">tcp-80-80-3b6tl</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="attr">nginx:latest</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">128</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">200</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">128</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">      dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>查询构建的nginx服务，可以看到Cluster IP是None</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service --all-namespaces=<span class="literal">true</span></span><br><span class="line">NAMESPACE     NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">default       kubernetes             ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP         36h</span><br><span class="line">default       nginx-app              ClusterIP   None            &lt;none&gt;        80/TCP          43s</span><br><span class="line">kube-system   kube-dns               ClusterIP   10.96.0.10      &lt;none&gt;        53/UDP,53/TCP   36h</span><br><span class="line">kube-system   kubernetes-dashboard   NodePort    10.96.197.202   &lt;none&gt;        443:31234/TCP   27h</span><br></pre></td></tr></table></figure><p>查询部署的Pod信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> kubectl get pods -n default -o wide</span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE    IP            NODE                   NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-app-7d77b84f86-rsmrp   1/1     Running   0          2m1s   10.244.3.30   node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-app-7d77b84f86-snx4p   1/1     Running   0          2m1s   10.244.2.19   node02.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @10.96.0.10 nginx-app.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/dig-nginx.png" alt="dig-nginx"></p><p>这类Headless Service资源，一般通过Ingress Controller进行负载，</p><ol start="4"><li>服务暴露</li></ol><p>Service的IP地址仅在集群内可达，然而有些服务需要暴露外部网络。此时需要在集群边缘为其添加一层转发机制，以实现将外部请求流量接入到集群Service资源上，</p><p>Kubernetes的Service共有四种类型， ClusterIP、NodePort、LoadBalancer和ExternalName：</p><ul><li>ClusterIP Service：使用iptables模式，集群内部的源IP会保留(不做SNAT)。如果client和server pod在同一个Node上，那源IP就是client pod的IP地址；如果在不同的Node上，源IP则取决于网络插件是如何处理的，比如使用flannel时，源IP是node flannel IP地址。</li><li>NodePort Service：源IP会做SNAT，server pod看到的源IP是Node IP。为了避免这种情况，可以给service加上annotation <code>service.beta.kubernetes.io/external-traffic=OnlyLocal</code>，让service只代理本地endpoint的请求(如果没有本地endpoint则直接丢包)，从而保留源IP。</li><li>LoadBalancer Service：源IP会做SNAT，server pod看到的源IP是Node IP。在GKE/GCE中，添加annotation <code>service.beta.kubernetes.io/external-traffic=OnlyLocal</code>后可以自动从负载均衡器中删除没有本地endpoint的Node。</li><li>ExternalName：主机名被DNS服务解析至CNAME类型的记录。它并不是由Kubernetes集群提供的服务，而是把集群外部的某服务以DNS CNAME记录的方式映射到集群。因此这种类型的Service没有ClusterIP、NodePort、label、也不会有endpoint。</li></ul><blockquote><p>为了减缓IP地址空间枯竭问题，NAT被引入提出，主要有两种方式，</p></blockquote><blockquote><p>SNAT，源地址转换，Source Network Address Translation，在NAT路由中，将ipv4的源地址转换为公网可访问的IP<br>DNAT，目标地址转换，Destination Network Address Translation，在NAT路由中，将ipv4的目标地址转换为私有网络的可访问IP</p></blockquote><ol start="5"><li>Ingress Controller</li></ol><p>Service虽然解决了服务发现和负载均衡的问题，但它在使用上还是有一些限制，比如</p><ul><li>只支持4层负载均衡，没有7层功能</li><li>对外访问的时候，NodePort类型需要在外部搭建额外的负载均衡，而LoadBalancer要求Kubernetes必须跑在支持的cloud provider上面</li></ul><p>Ingress就是为了解决这些限制而引入的新资源，主要用来将服务暴露到cluster外面，并且可以自定义服务的访问策略。比如想要通过负载均衡器实现不同子域名到不同服务的访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo.bar.com --|                |-&gt; foo.bar.com s1:80</span><br><span class="line">              | 178.91.123.132 |</span><br><span class="line">bar.foo.com --|                |-&gt; bar.foo.com s2:80</span><br></pre></td></tr></table></figure><p>可以这样来定义Ingress：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/nginx</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>注意Ingress本身并不会自动创建负载均衡器，cluster中需要运行一个ingress controller来根据Ingress的定义来管理负载均衡器。目前设计提供了nginx和gce的参考实现。</p><p>Kubernetes中，Service资源和Pod资源的IP地址仅能用于集群网络内部的通信，所有的网络流量都无法穿透边界路由器(Edge Router)以实现集群内外通信。即使Service中使用NodePort或LoadBalancer通过节点引入外部流量，它依然是4层流量转发，可用的负载均衡器也为传输层负载均衡机制。</p><p>Ingress是Kubernetes API的标准资源类型之一，Ingress控制器可以由任何具有反向代理(HTTP/HTTPS)功能的服务程序实现，例如Nginx、Envoy、HAProxy、Vulcand和Traefik等。</p><p>Traefik提供了易用的Ingress Controller，使用方法见<a href="https://docs.traefik.io/user-guide/kubernetes/" target="_blank" rel="noopener">https://docs.traefik.io/user-guide/kubernetes/</a>。</p><p>不管怎样，你都需要先安装Ingress Controller，</p><p>首先确保nginx-ingress是否部署，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm list</span><br><span class="line">NAME               REVISIONUPDATED                 STATUS  CHART              APP VERSIONNAMESPACE</span><br><span class="line">rolling-rattlesnake1       Wed Feb  6 05:09:06 2019DEPLOYEDnginx-ingress-0.9.50.10.2     default</span><br></pre></td></tr></table></figure><p>如果没有安装，部署一份，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml</span><br></pre></td></tr></table></figure><p>另外还需要手动创建一份Service为其创建相关的NodePort或LoadBalancer，并明确指定端口和IP地址，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30080</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30443</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="number">10.99</span><span class="number">.99</span><span class="number">.99</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>这是因为Ingress规则需要由一个Service资源对象辅助识别相关的所有Pod对象，但ingress-nginx控制器可经由<code>host</code>规则的定义直接将流量调度，</p><p>下面动手实践一下，部署两份Ingress，负载到这个nginx-ingress-controller下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tomcat-deploy</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">testing</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">tomcat.kubernetes.io</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">tomcat-svc</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">nginx.kubernetes.io</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/ingress-controller-service.png" alt=""></p><p>通常情况下，servcie和pod仅可在集群内部网络中通过IP地址访问。所有到达边界路由器的流量或被丢弃或被转发到其它地方。从概念上讲，可能是，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">internet</span><br><span class="line">      |</span><br><span class="line">------------</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><p>Ingress是授权入站连接到达集群服务的规则集合，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><p>Ingress控制器自身也是运行于集群中的Pod资源对象，它与被代理的运行为Pod资源的应用运行在同一网络中，</p><p><img src="/img/kubernetes/ingress-controller.svg" alt=""></p><p>在实际使用中，在集群之外应该存在一个用于调度用户请求至个节点上Ingress控制器相关的NodePort的负载均衡器。如果不具有LBaaS的使用条件，用户也可以基于Nginx、Haproxy、LVS等手动构建，并通过Keepalived等解决方案实现其服务的高可用配置。</p><p><img src="/img/kubernetes/nginx-lb.png" alt="nginx-lb"></p><ol start="6"><li>Service Load Balancer</li></ol><p>在Ingress出现以前，Service Load Blancer是推荐的解决Service局限性的方式。Service Load Balancer将haproxy跑在容器中，并监控service和endpoint的变化，通过容器IP对外提供4层和7层负载均衡服务。</p><p>社区提供的Service Load Balancer支持四种负载均衡协议：TCP、HTTP、HTTPS和SSL TERMINATION，并支持ACL访问控制。</p><ol start="7"><li>Custom Load Balancer</li></ol><p>虽然Kubernetes提供了丰富的负载均衡机制，但在实际使用的时候，还是会碰到一些复杂的场景是它不能支持的，比如</p><ul><li>接入已有的负载均衡设备</li><li>多租户网络情况下，容器网络和主机网络是隔离的，这样<code>kube-proxy</code>就不能正常工作</li></ul><p>这个时候可以自定义组件，并代替kube-proxy来做负载均衡。基本的思路是监控Kubernetes中Service和endpoint的变化，并根据这些变化来配置负载均衡器。比如weave flux、nginx plus、kube2haproxy等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务发现与负载均衡&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#服务发现与负载均衡&quot;&gt;¶&lt;/a&gt;服务发现与负载均衡&lt;/h2&gt;
&lt;p&gt;Kubernetes提供有服务发现和负载均衡机制，提供了Service资源，并通过kube-proxy配合cloud provider来适应不同的应用场景。&lt;/p&gt;
&lt;p&gt;目前，Kubernetes中的负载均衡大致可以分为以下几种机制，每种机制都有其特定的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service：直接用Service提供cluster内部的负载均衡，并借助cloud provider提供的LB提供外部访问&lt;/li&gt;
&lt;li&gt;Ingress Controller：还是用Service提供cluster内部的负载均衡，但是通过自定义LB提供外部访问&lt;/li&gt;
&lt;li&gt;Service Load Balancer：把load balancer直接跑在容器中，实现Bare Metal的Service Load Balancer&lt;/li&gt;
&lt;li&gt;Custom Load Balancer：自定义负载均衡，并替代kube-proxy，一般在物理部署Kubernetes时使用，方便接入公司已有的外部服务&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 设计理念及主要概念之Pod(二)</title>
    <link href="http://galudisu.info/2019/02/04/kubernetes/kubernetes-02-theory-and-concpetion-md/"/>
    <id>http://galudisu.info/2019/02/04/kubernetes/kubernetes-02-theory-and-concpetion-md/</id>
    <published>2019-02-04T02:16:43.000Z</published>
    <updated>2019-08-27T09:05:47.517Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes使用共享网络将多个物理机或虚拟机汇集到一个集群中，在各服务器之间进行通信，该集群时配置Kubernetes的所有组件、功能和工作负载的物理平台。集群中一台服务器(或高可用部署中的一组服务器)作为Master，负责管理整个集群，其余作为Worker Node，集群中的主机可以是物理服务器，也可以是虚拟机(包括云VPS)。</p><a id="more"></a><h2><span id="集群概念">集群概念</span></h2><ol><li>Master节点</li></ol><p>Master是集群的网关和中枢，负责为用户和客户端暴露API、状态信息、管理和调度负责，以及编排其它组件之间的通信等任务。单个Master节点可以完成所有功能，实际生产环境由于负载均衡等目的，需要协同部署多个Master节点。</p><ol start="2"><li>Node节点</li></ol><p>Node节点属于Worker节点，由多个主机构建。Worker节点不暴露任何信息，不对外开发接口。</p><h2><span id="主要概念">主要概念</span></h2><p>Kubernetes由很多技术概念，同时对应很多API对象，API对象是k8s集群中的管理操作单元。</p><p>每个API对象都有3大类属性：元数据metadat、规范spec和状态status。元数据是用来表示API对象的，每个对象至少有3个元数据：namespace、name和uid；除此之外还有各种各样的标签label是用来标识和匹配不同的对象。规范spec描述了用户期望k8s集群中的分布式系统达到的理想状态(desired State)，状态status描述了系统实际当前达到的状态(Status)。</p><p>k8s中的API对象设计理念之一，是所有操作都是声明式的(Declarative)。所以你会发现会有很多yaml配置。声明式操作在分布式系统中的好处是稳定，不怕丢失操作或运行多次。</p><p>下面简述一些常见的API对象。</p><h2><span id="pod">Pod</span></h2><p>Pod是k8s的最小调度单元，同一个Pod中的容器共享网络名称空间和存储资源，这些容器可经本地回环节口lo直接通信，但彼此又在Mount、User及PID等名称空间上保持隔离。</p><p>特性：</p><ul><li>包含多个共享IPC、Network和UTC namespace的容器，可直接本地通信</li><li>所有Pod内容器都可以访问共享的Volume，可以访问共享数据</li><li>Pod一旦调度后就跟Node绑定，即使Node挂掉也不会重新调度，推荐使用Deployments、Daemonsets等控制器来容错</li><li>优雅终止：Pod删除的时候先给其内的进程发送SIGTERM，等待一段时间(grace period)后才强制停止运行的进程</li><li>特权容器(通过SecurityContext配置)具有改变系统配置的权限</li></ul><p><img src="/img/kubernetes/module_03_pods.svg" alt="Pod"></p><p>通过yaml或接送描述Pod和其内Container的运行环境以及期望状态，比如一个最简单的nginx pod可以定义为，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">sepc:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>volume可以为容器提供持久化存储，比如，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-storage</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/data/redis</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">redis-storage</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>重启机制，RestartPolicy</p><p>目前支持三种RestartPolicy</p><ul><li>Always: 只要退出就重启</li><li>OnFailure: 失败退出时重启</li><li>Never: 只要退出就不再重启</li></ul><p>这里的重启指在Pod所在Node本地重启，它不会调度到其它Node上去。</p><p>环境变量为容器提供了一些重要的资源，包括容器和Pod的基本信息以及集群中服务的信息等，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line"><span class="attr">  name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gcr.io/google_containers/busybox</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">[</span> <span class="string">"sh"</span><span class="string">,</span> <span class="string">"-c"</span><span class="string">]</span></span><br><span class="line"><span class="attr">args:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">env</span></span><br><span class="line"><span class="attr">resource:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"32Mi"</span></span><br><span class="line"><span class="attr">cpu:</span> <span class="string">"125m"</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"64Mi"</span></span><br><span class="line"><span class="attr">cpu:</span> <span class="string">"250m"</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_NODE_NAME</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">fieldRef:</span></span><br><span class="line">    <span class="attr">fieldPath:</span> <span class="string">sepc.nodeName</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAMESPACE</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">fieldRef:</span></span><br><span class="line">    <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_SERVICE_ACCOUNT</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">fieldRef:</span></span><br><span class="line">    <span class="attr">fieldPath:</span> <span class="string">spec.serviceAccountName</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_CPU_REQUEST</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line"><span class="attr">resourceFieldRef:</span></span><br><span class="line">  <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line">  <span class="attr">resource:</span> <span class="string">requests.cpu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_CPU_LIMIT</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">resourceFieldRef:</span></span><br><span class="line">    <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">resource:</span> <span class="string">limits.cpu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_MEM_REQUEST</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">resourceFieldRef:</span></span><br><span class="line">    <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">resource:</span> <span class="string">requests.memory</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_MEM_LIMIT</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">resourceFieldRef:</span></span><br><span class="line">    <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">resource:</span> <span class="string">limits.memory</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>ImagePullPolicy策略，</p><ul><li>Always: 不管镜像是否存在都会进行一次拉取。</li><li>Never：不管镜像是否存在都不会进行拉取。</li><li>IfNotPresent: 镜像不存在时，才进行拉取。</li></ul><p>注意，</p><ul><li>默认为IfNotPresent，但<code>:latest</code>标签的镜像默认为<code>Always</code>。</li><li>拉取镜像时docker会进行MD5校验，如果镜像中的MD5没变，不会拉取镜像数据。</li><li>生产环境中应该尽量避免使用<code>:latest</code>标签，而开发环境可以借助<code>:latest</code>标签自动拉取最新的镜像。</li></ul><p>访问DNS策略，</p><p>通过设置dnsPolicy参数，设置Pod中容器访问DNS的策略</p><ul><li>ClusterFirst: 优先基于cluster domain后缀，通过kube-dns查询</li><li>Default：首先从kubelet中配置的DNS查询</li></ul><p>默认是ClusterFirst</p><p>通过hostIPC设置参数为Ture，使用主机的IPC明明空间，默认为False。</p><p>通过hostNetwork设置参数为True，使用主机的命名空间，默认为False。</p><p>通过hostPID设置参数为True，使用主机的PID命名空间，默认为False。</p><p>通过subdomain参数设置Pod的子域名，默认为空</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">busybox2</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">busybox-2</span></span><br><span class="line"><span class="attr">subdomain:</span> <span class="string">default-subdomain</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="attr">- image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sleep</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"3600"</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">busybox</span></span><br></pre></td></tr></table></figure><p>kubernetes通过cgroups限制容器的CPU和内存等计算资源，包括requests和limits等：</p><ul><li><code>spec.containers[].resources.limits.cpu</code>：CPU上限，可以短暂超过，容器也不会被停止</li><li><code>spec.containers[].resources.limits.memory</code>：内存上限，不可以超过；如果超过，容器可能会被停止或调度到其它资源充足的机器上</li><li><code>spec.containers[].resources.requests.cpu</code>：CPU请求，可以超过</li><li><code>spec.containers[].resources.requests.memory</code>：内存请求，可以超过；但如果超过，容器可能会在Node内存不足时清理</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiServersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">"300m"</span></span><br><span class="line"><span class="attr">memory:</span> <span class="string">"56Mi"</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">"500m"</span></span><br><span class="line"><span class="attr">memory:</span> <span class="string">"128Mi"</span></span><br></pre></td></tr></table></figure><p>为了保证容器在部署后确实处在正常运行状态，Kubernetes提供了两种探针(probe，支持exec、tcp和httpGet方式)来探测容器的状态：</p><ul><li>LivenessProbe：探测应用是否处于健康状态，如果不健康则删除重建容器</li><li>ReadinessProbe：探测应用是否启动完成并且处于正常服务状态，如果不正常则更新容器状态</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">readinessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/ping</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>initContainers在容器执行前运行，常用来初始化容器操作，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">init-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">  initContainers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">install</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busygox</span></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">wget</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"-O"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"/work-dir/index.html"</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">http://kubernetes.io</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">"/work-dir"</span></span><br><span class="line"><span class="attr">  dnsPolicy:</span> <span class="string">Default</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">workdir</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>容器生命周期钩子(Container Lifecycle Hooks)监听容器生命周期的特定事件，并在事件发生时执行已注册的回调函数。支持两种钩子：</p><ul><li>postStart：容器启动后执行，注意由于一步执行，它无法保证一定在ENTRYPOINT之后运行。如果失败，容器会被杀死，并根据RestartPolicy决定是否重启</li><li>preStop：容器停止前执行，常用于资源清理。如果失败，容器同样也会被杀死</li></ul><p>钩子的回调函数支持两种方式：</p><ul><li>exec: 在容器内执行命令</li><li>httpGet：向指定URL发起GET请求</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">lifecycle-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">lifecycle-demo-container</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">lifecycle:</span></span><br><span class="line">  <span class="attr">postStart:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">["/bin/sh"</span> <span class="string">"-c"</span><span class="string">,</span> <span class="string">"echo Hello from the postStart handler &gt; /usr/share/message"</span><span class="string">]</span></span><br><span class="line">  <span class="attr">preStop:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">["/usr/sbin/nginx",</span> <span class="string">"-s"</span><span class="string">,</span> <span class="string">"quit"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>默认情况下，容器都是以非特权容器方式运行。比如，不能再容器中创建虚拟网卡、配置虚拟网络。</p><p>Kubernetes提供了修改Capabilities的机制，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">friendly-container</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"alpine:3.4"</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">["/bin/echo",</span> <span class="string">"hello"</span><span class="string">,</span> <span class="string">"world"</span><span class="string">]</span></span><br><span class="line"><span class="attr">securityContext:</span></span><br><span class="line">  <span class="attr">capabilities:</span></span><br><span class="line">    <span class="attr">add:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line"><span class="attr">drop:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">KILL</span></span><br></pre></td></tr></table></figure><p>可以通过给Pod增加 <code>kubernetes.io/ingressbandwidth</code> 和 <code>kubernetes.io/egress-bandwidth</code> 这两个annotation来限制Pod的网络带宽</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">qos</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress-bandwidth:</span> <span class="number">3</span><span class="string">M</span></span><br><span class="line"><span class="string">kubernetes.io/egress-bandwidth:</span> <span class="number">4</span><span class="string">M</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">iperf3</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">networkstatic/iperf3</span></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">iperf3</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-s</span></span><br></pre></td></tr></table></figure><p>可以通过nodeSelector、nodeAffinity、podAffinity以及Taints和tolerations等来讲Pod调度到需要的Node上。</p><p>也可以通过设置nodeName参数，将Pod调度到制定node节点上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  spec:</span></span><br><span class="line"><span class="attr">    containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  nodeSelector:</span></span><br><span class="line"><span class="attr">    disktype:</span> <span class="string">ssd</span></span><br></pre></td></tr></table></figure><p>默认情况下，容器的<code>/etc/hosts</code>时kubelet自动生成的，并且仅包含localhost和podName等。不建议直接修改<code>/etc/hosts</code>文件，因为在Pod启动或重启时会被覆盖。</p><p>默认的<code>/etc/hosts</code>文件格式如下，其中<code>nginx-4217019353-fb2c5</code>是podName：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> nginx-app-5dd4f9fd4d-nm4sx -- cat /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/cat-etc-hosts.png" alt="executor"></p><p>从v1.7开始，可以通过<code>pod.Spec.HostAliases</code>来增加hosts内容，如，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hostaliases-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hostAliases:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"foo.local"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"bar.local"</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"10.1.2.3"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"foo.remote"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"bar.remote"</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">cat-hosts</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="attr">args:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"/etc/hosts"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs hostaliases-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubernetes-managed hosts file.</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">fe00::0ip6-mcastprefix</span><br><span class="line">fe00::1ip6-allnodes</span><br><span class="line">fe00::2ip6-allrouters</span><br><span class="line">10.244.1.35hostaliases-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Entries added by HostAliases.</span></span><br><span class="line">127.0.0.1foo.localbar.local</span><br><span class="line">10.1.2.3foo.remotebar.remote</span><br></pre></td></tr></table></figure><h2><span id="namespace">Namespace</span></h2><p>Namespace是对一组资源和对象的抽象集合，比如可以用来将系统内部的对象划分为不同的项目组或用户组。常见的pods，services，replication controller和deployments等都是属于某一个namespace的(默认是default)，而node，persistentVolumes等则不属于任何namespace。</p><p>Namespace常用来隔离不同的用户，比如Kubernetes自带的服务一般运行在<code>kube-system namespace</code>中。</p><ol><li>查询</li></ol><p>名称空间的选项可以用<code>--namespace</code>或<code>-n</code>来指定，不指定默认就是<code>default</code>。也可以通过<code>--all-namespace=true</code>来查看所有namespace下的资源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespaces</span><br><span class="line">NAME          STATUS   AGE</span><br><span class="line">default       Active   32h</span><br><span class="line">kube-public   Active   32h</span><br><span class="line">kube-system   Active   32h</span><br></pre></td></tr></table></figure><p>注意：<code>kubectl get namespace</code>等效；namespace包含两种状态“Active”和“Terminating”。在namespace删除过程中，namespace状态被设置成“Terminating”。</p><ol start="2"><li>创建</li></ol><p>命令行直接创建，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace new-namespace</span><br></pre></td></tr></table></figure><p>通过文件创建，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">new-namespace</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ./my-namespace.yaml</span><br></pre></td></tr></table></figure><p>注意：namespace的name满足正则表达式<code>[a-z0-9]([-a-z0-9]*[a-z0-9])?</code>，最大长度为63位，</p><ol start="3"><li>删除</li></ol><ul><li>删除一个namespace会自动删除所有属于该namespace的资源</li><li><code>default</code>和<code>kube-system</code>名称空间不可删除</li><li>PersistentVolumes是不属于任何namespace的，但PersistentVolumeClaim是属于某个特定namespace的</li><li>Events是否属于namespace取决于产生events的对象</li></ul><h2><span id="node">Node</span></h2><p>Node是Pod真正运行的主机，可以是物理机，也可以是虚拟机。为了管理Pod，每个Node节点上至少运行container runtime(比如docker或rkt)、<code>kubelet</code>和<code>kube-proxy</code>服务。</p><p><img src="/img/kubernetes/module_03_nodes.svg" alt="nodes"></p><ol><li>Node管理</li></ol><p>不像其它的资源(如Pod和Namespace)，Node本质上不是Kubernetes来创建的，Kubernetes只是管理Node上的资源。虽然可以通过Manifest创建一个Node对象(如下json)，但Kubernetes也只是去检查是否真的是有这么一个Node，如果检查失败，也不会往上调度Pod。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"Node"</span>,</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"10.240.79.157"</span>,</span><br><span class="line"><span class="attr">"labels"</span>: &#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-first-k8s-node"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个检查是由Node Controller来完成的。Node Controller负责</p><ul><li>维护Node状态</li><li>与Cloud Provider同步Node</li><li>给Node分配容器CIDR</li><li>删除带有<code>NoExecute</code> taint的Node上的Pods</li></ul><p>默认情况下，kubelet在启动时会向master注册自己，并创建Node资源。</p><ol start="2"><li>Node的状态</li></ol><p>每个Node都包括以下状态信息</p><ul><li>地址：包括hostname、外网IP和内网IP</li><li>条件(Condition)：包括OutOfDisk、Ready、MemoryPressure和DiskPressure</li><li>容量(Capacity)：Node上的可用资源，包括CPU、内存和Pod总数</li><li>基本信息(Info)：包括内核版本、容器引擎版本、OS类型等</li></ul><ol start="3"><li>Taints和tolerations</li></ol><p>Taints和tolerations用于保证Pod不被调度到不合适的Node上，Taint应用于Node上，而toleration则应用于Pod上(Toleration是可选的)。</p><p>比如，可以使用taint命令给node1添加taints：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes node1 key1=value1:NoSchedule</span><br><span class="line">kubectl taint nodes node2 key1=value2:NoExecutte</span><br></pre></td></tr></table></figure><ol start="4"><li>Node维护模式</li></ol><p>标识Node为不可调度，但不影响其上正在运行的Pod，这种维护Node时时非常有用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cordon <span class="variable">$NODENAME</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes使用共享网络将多个物理机或虚拟机汇集到一个集群中，在各服务器之间进行通信，该集群时配置Kubernetes的所有组件、功能和工作负载的物理平台。集群中一台服务器(或高可用部署中的一组服务器)作为Master，负责管理整个集群，其余作为Worker Node，集群中的主机可以是物理服务器，也可以是虚拟机(包括云VPS)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 简介以及安装安装高可用v1.13.1集群(一)</title>
    <link href="http://galudisu.info/2019/02/03/kubernetes/kubernetes-01-centos-installation/"/>
    <id>http://galudisu.info/2019/02/03/kubernetes/kubernetes-01-centos-installation/</id>
    <published>2019-02-03T07:34:35.000Z</published>
    <updated>2019-08-27T09:05:47.515Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kubernetes/kubernetes-kubectl-cheatsheet.png" alt="kubectl-cheatsheet"></p><p>Kubernetes是谷歌开源的容器集群管理系统，是Google多年大规模容器管理技术Borg的开源版本，也是CNCF最重要的项目之一，主要功能包括：</p><ul><li>基于容器的应用部署、维护和滚动升级</li><li>负载均衡和服务发现</li><li>跨机器和跨地区的集群调度</li><li>自动伸缩</li><li>无状态服务和有状态服务</li><li>广泛的Volumn支持</li><li>插件机制保证扩展性</li></ul><a id="more"></a><h2><span id="kubernetes架构">Kubernetes架构</span></h2><p>Kubernetes主要由以下几个核心组件组成：</p><ul><li>etcd保存了整个集群的状态；</li><li>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li><li>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li><li>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</li><li>kubelet负责维护容器的生命周期，同时也负责Volume(CVI)和网络(CNI)的管理；</li><li>Container runtime负责镜像管理以及Pod和容器的真正运行(CRI)；</li><li>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡</li></ul><h2><span id="kubeadm-113-安装高可用-kubernetes-v1131-集群">Kubeadm 1.13 安装高可用 kubernetes v1.13.1 集群</span></h2><p><img src="/img/kubernetes/dashboard.png" alt="kubernetes-dashboard"></p><p>先上图给个肯定信心。</p><h2><span id="部署">部署</span></h2><p>以CentOS7为基础，搭建一个Master主机和三个Node主机，各个Node主机的配置方式基本相同。</p><ul><li>OS: CentOS 7.5 x86_64</li><li>Container runtime: Docker 18.06.ce</li><li>Kubernetes: 1.13</li></ul><table><thead><tr><th style="text-align:left">IP 地址</th><th style="text-align:left">主机名</th><th style="text-align:left">角色</th></tr></thead><tbody><tr><td style="text-align:left">192.168.50.71</td><td style="text-align:left">master, <a href="http://master.kubernetes.io" target="_blank" rel="noopener">master.kubernetes.io</a></td><td style="text-align:left">master</td></tr><tr><td style="text-align:left">192.168.50.72</td><td style="text-align:left">node01, <a href="http://node01.kubernetes.io" target="_blank" rel="noopener">node01.kubernetes.io</a></td><td style="text-align:left">node</td></tr><tr><td style="text-align:left">192.168.50.73</td><td style="text-align:left">node02, <a href="http://node02.kubernetes.io" target="_blank" rel="noopener">node02.kubernetes.io</a></td><td style="text-align:left">node</td></tr><tr><td style="text-align:left">192.168.50.74</td><td style="text-align:left">node03, <a href="http://node03.kubernetes.io" target="_blank" rel="noopener">node03.kubernetes.io</a></td><td style="text-align:left">node</td></tr></tbody></table><p>这里需要使用常规的域名格式，因为后面需要为集群配置Kubernetes Dashboard要求有SSL数字签名。</p><h2><span id="系统配置">系统配置</span></h2><p>配置host，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">192.168.50.71mastermaster.kubernetes.io</span><br><span class="line">192.168.50.72node1node01.kubernetes.io</span><br><span class="line">192.168.50.73node2node02.kubernetes.io</span><br><span class="line">192.168.50.74node3node03.kubernetes.io</span><br></pre></td></tr></table></figure><p>关闭防火墙，选择iptable加入端口或禁用防火墙服务两种方式。这里简单起见，禁用防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>禁用SELINUX，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo setenfore 0</span><br><span class="line">sudo vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p>所有节点关闭交换分区，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br><span class="line">sudo vi /etc/fstab</span><br></pre></td></tr></table></figure><p>将交换区注释掉，使用<code>free -m</code>查看交换分区是否关闭。</p><p>创建<code>/etc/sysctl.d/k8s.conf</code>文件，添加如下内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>执行命令使修改生效，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe br_netfilter</span><br><span class="line">sudo sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure><p>kube-proxy开启ipvs，Kubernetes 1.11之后的版本默认支持使用ipvs代理模式的Service资源，但它依赖ipvs相关的内核模块，这些模块默认不会自动载入。kube-proxy开启ipvs的前提需要加载以下模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><p>创建<code>/etc/sysconfig/modules/ipvs.modules</code>文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ipvs_mods_dir=<span class="string">"/usr/lib/modules/<span class="variable">$(uname -r)</span>/kernel/net/netfilter/ipvs"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls <span class="variable">$ipvs_mods_dir</span> | grep -o <span class="string">"^[^.]*"</span>); <span class="keyword">do</span></span><br><span class="line">/sbin/modinfo -F filename <span class="variable">$i</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">/sbin/modprobe <span class="variable">$i</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>修改文件权限，并加载内核模块，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">sudo /etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure><p>注意该步骤不是必须的，因为ipvs仅负责负载均衡相关任务，它无法完成kube-proxy中的包过滤机SNAT等功能，这些仍需要由iptables实现。也就是说，如果条件不满足，即使kube-proxy开启了ipvs模式，也会回退到iptables模式。</p><h2><span id="安装docker">安装Docker</span></h2><p>Docker的安装可以参考阿里云的docker-ce的安装方法，目前Kubernetes推荐的最新支持的docker版本为18.06，注意不要使用不兼容的版本。</p><p>如果你有阿里云账号，可以参考<a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors" target="_blank" rel="noopener">镜像加速器</a>方法。</p><p>另外，如果想通过外网访问Docker，可以在Systemd加入启动参数配置sock进行访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">...</span><br><span class="line">ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure><p>其它细节可以参考阿里docker相关文档。</p><h2><span id="配置外网访问ss">配置外网访问SS</span></h2><p>首先，你得先有一个SS，<a href="http://xn--k8s-628d2hjq96ozubb9tvvf3u9geh9blx1ac9a.gcr.io" target="_blank" rel="noopener">因为大陆内目前访问不了k8s.gcr.io</a>。虽然有人做了镜像同步，对同步的镜像进行retag也是可行的方式，但我有SS！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install python-pip epel-release -y</span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line">cat &gt; /etc/shadowsocks.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"xx.xx.xx.xx"</span>,</span><br><span class="line"><span class="string">"server_port"</span>: 443,</span><br><span class="line"><span class="string">"local_port"</span>: 1080,</span><br><span class="line"><span class="string">"password"</span>:<span class="string">"xxx"</span>,</span><br><span class="line"><span class="string">"timeout"</span>:600,</span><br><span class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>SS主要是配给Docker用的，编辑<code>/lib/systemd/system/docker.service</code>文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Environment=<span class="string">"HTTP_PROXY=socks5://127.0.0.1:1080/"</span></span><br><span class="line">Environment=<span class="string">"HTTPS_PROXY=socks5://127.0.0.1:1080/"</span></span><br><span class="line">Environment=<span class="string">"NO_PROXY=localhost,127.0.0.0/8,guqcep47.mirror.aliyuncs.com"</span></span><br></pre></td></tr></table></figure><h2><span id="kubeletkubeadmkubectl安装">kubelet，kubeadm，kubectl安装</span></h2><p>首先要设定组件的仓储，编辑<code>/etc/yum.repos.d/kubernetes.repo</code>，内容如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><p>执行如下命令安装程序包，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>kubernetes自1.8版本开始，强制要求关闭系统swap，编辑kubelet配置文件<code>/etc/sysconfig/kubelet</code>，忽略禁止使用Swap限制，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--fail-swap-on=false"</span></span><br></pre></td></tr></table></figure><p>加入启动服务，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start kubelet</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2><span id="集群初始化">集群初始化</span></h2><p>集群初始化动作需要在Master进行，然后在其它Node节点使用<code>join</code>加入，所以这里的命令行需要在各个主机单独敲命令了。</p><p>有两种初始化方式，一种是命令带参数方式；另一种是使用配置文件，两种方式是等效的，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --kubernetes-version=v1.13.2 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure><p>简单说一下这几个重要的参数，</p><ul><li><code>--kubernetes-version</code>：Kubernete的版本</li><li><code>--pod-network-cidr</code>：Pod网络地址范围，其值为CIDR格式的网络地址；使用flannel网络插件是，默认地址为10.244.0.0/16。</li><li><code>--service-cidr</code>：Service的网络地址范围，其值为CIDR格式的网络地址，默认地址为10.96.0.0/12。</li><li><code>--apiserver-advertise-address</code>：API server通告给其他组件的IP地址，一般应该为Master节点的IP地址，0.0.0.0表示节点上的所有可用地址。</li><li><code>--ignore-preflight-errors</code>：忽略哪些运行时的错误信息，其值为Swap时，表示忽略因swap未关闭而导致的错误。</li></ul><p>一般情况下，都是使用配置文件的方式，可以通过下面的命令查看一份完整的kubeadm配置示例，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm config <span class="built_in">print</span> init-defaults --component-configs KubeProxyConfiguration</span><br></pre></td></tr></table></figure><p>存储输出的内容为<code>kubeadm-config.yaml</code>，根据自己需求修改，执行命令初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --config kubeadm-config.yaml --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure><p>初始化如果成功，会打印两个重要信息，一是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOEM</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>照着写便是，默认情况下kubectl会从当前用户主目录的.kube下的config读取配置信息，包括Kubernetes集群、证书或令牌等。集群初始化时，kubeadm会自动生成一个用于此类功能的配置文件<code>/etc/kubernetes/admin.conf</code>，将它复制为<code>$HOME/.kube/config</code>文件即可直接使用。</p><p>kubectl有非常多的子命令，其中“<code>get compontsstatuses</code>”可显示集群组件当前的状态，简写为<code>get cs</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br><span class="line"></span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">controller-manager   Healthy   ok                   </span><br><span class="line">scheduler            Healthy   ok                   </span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>: <span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><p>若命令结果的STATUS字段为“Healthy”，表示组件处于健康运行状态，否则需要检查其错误所在，必要时使用“kubeadm reset”命令重置重新进行初始化。</p><p>另外使用<code>kubectl get nodes</code>，获取集群节点的相关状态信息，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                STATUS   ROLES    AGE    VERSION</span><br><span class="line">kubernetes-master   NotReady master   7d5h   v1.13.2</span><br></pre></td></tr></table></figure><p>为Kubernetes提供的Pod网络插件非常多，目前流行的有flannel和Calico。flannel运行为Kubernetes集群的附件，它以Pod的形式部署运行与每个集群节点上以接受Kubernetes集群管理。事实上，flannel也可以以守护进程方式运行在各个节点，即以非托管的方式运行。部署命令使<code>kubectl apply</code>或<code>kubectl crreate</code>，下面是使用在线的方式进行flannel部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>部署成功会出现created字样，配置flannel网络插件时，Master节点上的Docker首先会去获取flannel镜像文件，而后根据镜像文件启动相应的Pod对象。现在再次查看Master已经变为“Ready”状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                STATUS   ROLES    AGE    VERSION</span><br><span class="line">kubernetes-master   Ready    master   7d5h   v1.13.2</span><br></pre></td></tr></table></figure><p>可通过，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system | grep flannel</span><br></pre></td></tr></table></figure><p>显示网络插件flannel的Pod状态情况。</p><p>集群初始化时，另一个信息是产生一段token信息，这段信息用于Node节点加入Master。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm join kubernetes-master:6443 --token 0qpyy8.iv5v2uhhrjy3wsri --discovery-token-ca-cert-hash sha256:c8ad1e333b6e2e1185ea2ab7beb97b90022f8285e79a1cc6a7e71ad772748f42 --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure><p>每个节点加入到Master之后，再次通过<code>kubectl get nodes</code>查看节点信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                STATUS   ROLES    AGE    VERSION</span><br><span class="line">kubernetes-master   Ready    master   7d5h   v1.13.2</span><br><span class="line">kubernetes-node1    Ready    &lt;none&gt;   7d4h   v1.13.2</span><br><span class="line">kubernetes-node2    Ready    &lt;none&gt;   7d4h   v1.13.2</span><br><span class="line">kubernetes-node3    Ready    &lt;none&gt;   7d4h   v1.13.2</span><br></pre></td></tr></table></figure><p>至此，Kubernetes集群的部署已经完成，后续有更多节点加入时，均可使用此方式。</p><p>Kubernetes的命令非常多，在文章最前面的大图已经描述清楚。由于这里仅介绍集群安装内容，下面简单了解下关于集群方面的命令，</p><p>获取集群信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://192.168.50.71:6443</span><br><span class="line">KubeDNS is running at https://192.168.50.71:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><p>版本信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl version --short=<span class="literal">true</span></span><br><span class="line">Client Version: v1.13.2</span><br><span class="line">Server Version: v1.13.2</span><br></pre></td></tr></table></figure><p>移除节点，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain NODE_ID --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node NODE_ID</span><br></pre></td></tr></table></figure><p>重置节点，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><h2><span id="部署高可用coredns">部署高可用CoreDNS</span></h2><p>默认安装的CoreDNS存在单点问题。在Master节点查看<code>kubectl get pods -n kube-system -owide</code>分布如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system -owide </span><br><span class="line">NAME                                           READY   STATUS              RESTARTS   AGE   IP              NODE                   NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-86c58d9df4-6j2m6                       0/1     ContainerCreating   0          90m   &lt;none&gt;          master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-86c58d9df4-glvnp                       0/1     ContainerCreating   0          90m   &lt;none&gt;          master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-master.kubernetes.io                      1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-master.kubernetes.io            1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-master.kubernetes.io   1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-czh7z                    1/1     Running             0          80m   192.168.50.73   node02.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-gcqkk                    1/1     Running             0          80m   192.168.50.74   node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-lk5dw                    1/1     Running             0          81m   192.168.50.72   node01.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-xp5xf                    0/1     PodInitializing     0          83m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-b82sn                               1/1     Running             0          80m   192.168.50.73   node02.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-ql6hp                               1/1     Running             0          81m   192.168.50.72   node01.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-sh87s                               1/1     Running             0          80m   192.168.50.74   node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-w2kv4                               0/1     ContainerCreating   0          90m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-master.kubernetes.io            1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>删除原来的单点CoreDNS，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deploy coredns -n kube-system</span><br></pre></td></tr></table></figure><p>创建一份多实例配置coredns-ha.yaml，内容如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment">#集群规模可自行配置</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span></span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      affinity:</span></span><br><span class="line"><span class="attr">        podAntiAffinity:</span></span><br><span class="line"><span class="attr">          preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"><span class="attr">          - weight:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">            podAffinityTerm:</span></span><br><span class="line"><span class="attr">              labelSelector:</span></span><br><span class="line"><span class="attr">                matchExpressions:</span></span><br><span class="line"><span class="attr">                - key:</span> <span class="string">k8s-app</span></span><br><span class="line"><span class="attr">                  operator:</span> <span class="string">In</span></span><br><span class="line"><span class="attr">                  values:</span></span><br><span class="line"><span class="bullet">                  -</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">              topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-conf</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/coredns/Corefile</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.6</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/health</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">            scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">          periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">          successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">53</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">dns</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">UDP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">53</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">dns-tcp</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">9153</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">metrics</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">170</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">70</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">          capabilities:</span></span><br><span class="line"><span class="attr">            add:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line"><span class="attr">            drop:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">all</span></span><br><span class="line"><span class="attr">          readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">        terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/etc/coredns</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">config-volume</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      dnsPolicy:</span> <span class="string">Default</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">      securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      serviceAccount:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">CriticalAddonsOnly</span></span><br><span class="line"><span class="attr">        operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">      - effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - configMap:</span></span><br><span class="line"><span class="attr">          defaultMode:</span> <span class="number">420</span></span><br><span class="line"><span class="attr">          items:</span></span><br><span class="line"><span class="attr">          - key:</span> <span class="string">Corefile</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">Corefile</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">config-volume</span></span><br></pre></td></tr></table></figure><p>执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f coredns-ha.yaml</span><br></pre></td></tr></table></figure><p>再次查看分布，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system -owide</span><br><span class="line">NAME                                           READY   STATUS    RESTARTS   AGE    IP              NODE                   NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-6c67f849c7-jhqhj                       1/1     Running   0          3m6s   10.244.1.3      node01.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-6c67f849c7-kxtkw                       1/1     Running   0          3m6s   10.244.3.4      node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-master.kubernetes.io                      1/1     Running   2          102m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-master.kubernetes.io            1/1     Running   2          102m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-master.kubernetes.io   1/1     Running   2          102m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>CoreDNS的Pod落在节点node1和node3上了。</p><h2><span id="安装dashboard">安装dashboard</span></h2><p>Kubernetes dashboard的安装也是在pod上的，所以要在所有节点执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span><br></pre></td></tr></table></figure><p>下载官方推荐的部署文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>因为前面我已经将镜像拉取下来了，所以不必要再拉取，修改这个<code>kubernetes-dashboard.yaml</code>文件，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="string">name</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">  dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>另外，需要暴露端口以给集群外部访问，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------- Dashboard Service ------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">31234</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><p>OK，执行命令部署pod，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>查看一下dashboard的pod是否正常启动，如果正常，说明安装成功，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system -owide</span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/kube-system.png" alt="kube-system"></p><p>查看外网暴露的端口，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services -n kube-system                                                                        </span><br><span class="line">NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kube-dns               ClusterIP   10.96.0.10     &lt;none&gt;        53/UDP,53/TCP   7d5h</span><br><span class="line">kubernetes-dashboard   NodePort    10.104.42.80   &lt;none&gt;        443:31234/TCP   138m</span><br></pre></td></tr></table></figure><p>默认情况下，kubeadm创建集群时已经创建了admin角色，我们直接绑定即可，</p><p>创建一个<code>admin-user-role-binding.yaml</code>文件，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="string">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br></pre></td></tr></table></figure><p>执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f admin-user-role-binding.yaml</span><br></pre></td></tr></table></figure><p>获取token，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><p>把Token复制的登录界面，即可。</p><p>这里登录时有个问题，就是HTTPS访问没有证书，chrome直接不让访问！Firefox还好可以绕过。所以需要自己加一个证书，</p><p>首先生成私钥和证书签名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'client-key-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; dashboard.key</span><br><span class="line">grep <span class="string">'client-certificate-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; dashboard.crt</span><br></pre></td></tr></table></figure><p>生成证书，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -clcerts -inkey dashboard.key -<span class="keyword">in</span> dashboard.crt -out dashboard.p12 -name <span class="string">"kubernetes-client"</span></span><br></pre></td></tr></table></figure><p>将生成的<code>dashboard.key</code>和<code>dashboard.crt</code>放置在路径<code>/certs</code>下， 重新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br><span class="line">kubectl create -f admin-user-role-binding.yaml</span><br></pre></td></tr></table></figure><p>虽然添加了证书，但也仅能通过firefox添加例外访问，chrome根本不信任你。所以生产环境上还是要买一个SSL证书，另外Pod内的service最好也不要直接暴露给外网访问，一般用nginx-ingress做个代理。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">你可能需要安装额外的工具用于Kubernetes管理，参考<a href="https://www.digitalocean.com/community/tutorials/how-to-install-software-on-kubernetes-clusters-with-the-helm-package-manager" target="_blank" rel="noopener">这里</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/kubernetes/kubernetes-kubectl-cheatsheet.png&quot; alt=&quot;kubectl-cheatsheet&quot;&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes是谷歌开源的容器集群管理系统，是Google多年大规模容器管理技术Borg的开源版本，也是CNCF最重要的项目之一，主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于容器的应用部署、维护和滚动升级&lt;/li&gt;
&lt;li&gt;负载均衡和服务发现&lt;/li&gt;
&lt;li&gt;跨机器和跨地区的集群调度&lt;/li&gt;
&lt;li&gt;自动伸缩&lt;/li&gt;
&lt;li&gt;无状态服务和有状态服务&lt;/li&gt;
&lt;li&gt;广泛的Volumn支持&lt;/li&gt;
&lt;li&gt;插件机制保证扩展性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装、配置、使用PostgreSQL及PostGIS</title>
    <link href="http://galudisu.info/2019/01/24/postgresql/postgresql-relational-databases-on-centos-7/"/>
    <id>http://galudisu.info/2019/01/24/postgresql/postgresql-relational-databases-on-centos-7/</id>
    <published>2019-01-24T08:16:55.000Z</published>
    <updated>2019-08-27T09:05:47.583Z</updated>
    
    <content type="html"><![CDATA[<p>实际开发过程有两种安装方式，一种是编译安装；一种是包安装方式。编译安装需要cmake，gcc以及编译所需要的各种devel，这里仅介绍包安装方式。</p><a id="more"></a><h2><span id="从centos仓储安装">从CentOS仓储安装</span></h2><p>CentOS 7仓储装载有PostgreSQL版本<code>9.2.15</code>，你可以直接通过仓储安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install postgresql-server postgresql-contrib</span><br></pre></td></tr></table></figure><p>初始化数据库，启动PostgreSQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo postgresql-setup initdb</span><br><span class="line">sudo systemctl start postgresql</span><br></pre></td></tr></table></figure><p>将PostgreSQL加入Systemd中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql</span><br></pre></td></tr></table></figure><h2><span id="指定仓库的版本">指定仓库的版本</span></h2><p>作为替代，你可以从Postgres仓储安装最新版本，目前CentOS7可用的最高PostgresSQL版本是<code>9.6.3</code>，但需要提供RPM-based的安装方式。</p><blockquote><p>注意：Postgres指定版本后，版本信息会包含在配置目录中。例如<code>/var/lib/pgsql</code>会变成<code>/var/lib/pgsql/9.6</code>。这对于system units也一样，<code>systemctl status postgresql</code>会变成<code>systemctl status postgresql-9.6</code>。</p></blockquote><p>首先需要从Postgres的<a href="https://yum.postgresql.org/repopackages.php" target="_blank" rel="noopener">仓储</a>选择希望安装的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装RPM，以及<a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="noopener">EPEL</a>仓储，用于依赖构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install pgdg-centos96-9.6-3.noarch.rpm epel-release</span><br></pre></td></tr></table></figure><p>安装前需要update一下，不然会有conflict：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install postgresql96-server postgresql96-contrib</span><br></pre></td></tr></table></figure><p>初始化数据库，启动PostgreSQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/pgsql-9.6/bin/postgresql96-setup initdb</span><br><span class="line">sudo systemctl start postgresql-9.6</span><br></pre></td></tr></table></figure><p>加入boot自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql-9.6</span><br></pre></td></tr></table></figure><h2><span id="配置用户信息-数据库">配置用户信息、数据库</span></h2><p>默认地，PostgreSQL为Linux创建了一个无home目录的用户<code>postgres</code>，用于访问数据库软件目录。</p><blockquote><p>小心：<br>这个<code>postgres</code>用户不应该用于其它目的(例如，连接其它网络)。这样会给数据库安全带来风险。</p></blockquote><ol><li>更改<code>postgres</code>密码：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd postgres</span><br></pre></td></tr></table></figure><p>下面方式是更改<code>postgres</code>数据库用户密码。确保使用的<code>newpassword</code>是强类型密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">psql -d template1 -c <span class="string">"ALTER USER postgres WITH PASSWORD 'newpassword';"</span></span><br></pre></td></tr></table></figure><p>注意这里的<code>postgres</code>用户不同于Linux的那个<code>postgres</code>用户。Linux的<code>postgres</code>是用于访问数据库，这个PostgreSQL用户是负责该数据库的管理任务处理。</p><p>上面设置的密码被用于通过网络访问数据库。本机方式使用的<code>peer</code>授权。本章最后介绍如何实现远程访问。</p><h2><span id="postgresql-shell">PostgreSQL Shell</span></h2><p>PostgreSQL client shell允许你在数据库处理SQL命令。首先登录<code>postgres</code>用户，进入shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql postgres</span><br></pre></td></tr></table></figure><p>首先会登录<code>postgres</code>数据库，prompt信息类似于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psql (9.2.15)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>最后一行，<code>postgres=#</code>标示了当前数据库的名称。要查看可用命令，输入<code>\h</code>。退出当前shell，输入<code>\q</code>。</p><h2><span id="数据库工作">数据库工作</span></h2><p>首先，你可以使用<code>createdb</code>命令创建数据库。例如以<code>postgres</code>用户身份创建一个<code>mytestdb</code>数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb mytestdb</span><br></pre></td></tr></table></figure><p>也可以为该数据库指派角色关系。例如，指派一个<code>examplerole</code>角色：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb mytestdb -O examplerole</span><br></pre></td></tr></table></figure><p><code>createdb</code>命令有几个操作选项，你可以在<a href="https://www.postgresql.org/docs/9.2/static/app-createdb.html" target="_blank" rel="noopener">PostgreSQL documentation</a>查看更多细节。</p><p>连接数据库，可以使用<code>psql</code>命令指定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql mytestdb</span><br></pre></td></tr></table></figure><p>出现下面prompt说明连接成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psql (9.2.15)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">mytestdb=<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>默认地，数据库的连接是作为<a href="https://www.linode.com/docs/databases/postgresql/how-to-install-postgresql-relational-databases-on-centos-7/#peer-authentication" target="_blank" rel="noopener">peer-authenticated</a>用户的方式。当然，你也可以指定本地用户的方式访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql mytestdb -U examplerole</span><br></pre></td></tr></table></figure><p>要查看所有的数据库，使用<code>\l</code>或<code>\list</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \l</span></span><br><span class="line">                          List of databases</span><br><span class="line">Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges</span><br><span class="line">-----------+----------+----------+-------------+-------------+-----------------------</span><br><span class="line">mytestdb  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |</span><br><span class="line">postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |</span><br><span class="line">template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">|         |          |          |             | postgres=CTc/postgres</span><br><span class="line">template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">|         |          |          |             | postgres=CTc/postgres</span><br><span class="line">(4 rows)</span><br></pre></td></tr></table></figure><p>通过<code>\c</code>命令可以展示当前数据库和当前用户信息。要展示其它额外信息，可以使用<code>\conninfo</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are connected to database <span class="string">"mytestdb"</span> as user <span class="string">"postgres"</span> via socket <span class="keyword">in</span> <span class="string">"/var/run/postgresql"</span> at port <span class="string">"5432"</span>.</span><br></pre></td></tr></table></figure><p>数据数据库用<code>dropdb</code>命令，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropdb mytestdb</span><br></pre></td></tr></table></figure><p>注意，删除的数据库不能恢复。</p><h2><span id="表">表</span></h2><p>创建一个<code>employees</code>的表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (employee_id int, first_name varchar, last_name varchar);</span><br></pre></td></tr></table></figure><p>插入一条记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employees VALUES (1, <span class="string">'John'</span>, <span class="string">'Doe'</span>);</span><br></pre></td></tr></table></figure><p>查看表内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><p>输出内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">employee_id | first_name | last_name</span><br><span class="line">-------------+------------+-----------</span><br><span class="line">          1 | John       | Doe</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>列举当前数据库的所有表信息，可以通过<code>\dt</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mytestdb-<span class="comment"># \dt</span></span><br><span class="line">          List of relations</span><br><span class="line">Schema |   Name    | Type  |  Owner</span><br><span class="line">--------+-----------+-------+----------</span><br><span class="line">public | employees | table | postgres</span><br></pre></td></tr></table></figure><p>删除表通过<code>DROP TABLE</code>命令，例如删除<code>employees</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE employees;</span><br></pre></td></tr></table></figure><p>可以通过逗号分隔方式删除多个表，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE employees1, employees2;</span><br></pre></td></tr></table></figure><p>更改和添加表column，和标准SQL一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employees ADD start_date date;</span><br></pre></td></tr></table></figure><p>验证先前的更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><p>你会看到新增的列不包含任何内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">employee_id | first_name | last_name | start_date</span><br><span class="line">-------------+------------+-----------+------------</span><br><span class="line">          1 | John       | Doe       |</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>PostgreSQL支持好几种数据库类型，可以在<a href="https://www.postgresql.org/docs/9.2/static/datatype.html" target="_blank" rel="noopener">这里</a>查看相关信息。</p><p>你可以使用<code>UPDATE</code>更改记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employees SET start_date = <span class="string">'2016-09-28'</span> WHERE employee_id = <span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><p>或插入一条新的记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employees VALUES (2, <span class="string">'Jane'</span>, <span class="string">'Smith'</span>, <span class="string">'2015-03-09'</span>);</span><br></pre></td></tr></table></figure><p>验证一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">employee_id | first_name | last_name | start_date</span><br><span class="line">-------------+------------+-----------+------------</span><br><span class="line">          1 | John       | Doe       | 2016-09-28</span><br><span class="line">          2 | Jane       | Smith     | 2015-03-09</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>要删除行和列，例如删除<code>start_date</code>字段，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employees DROP start_date;</span><br></pre></td></tr></table></figure><p>删除记录使用<code>DELETE</code>，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM employees WHERE employee_id = <span class="string">'2'</span>;</span><br></pre></td></tr></table></figure><p>验证一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">employee_id | first_name | last_name</span><br><span class="line">-------------+------------+-----------</span><br><span class="line">          1 | John       | Doe</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>查询数据库和标准SQL一样，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id FROM employees;</span><br><span class="line"></span><br><span class="line">last_name | employee_id</span><br><span class="line">-----------+-------------</span><br><span class="line">Doe       |           1</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>更多查询选项，可以点击<a href="https://www.postgresql.org/docs/9.2/static/sql-select.html" target="_blank" rel="noopener">这里</a></p><h2><span id="角色">角色</span></h2><p>PostgreSQL通过<strong>roles</strong>授权数据库访问，表示某种权限。另外，角色可以由其它一系列角色创建，类似于“group”。PostgreSQL的角色是全局的，所以你不需要为同一个角色创建两次以访问不同数据库。</p><p>创建角色通过<code>createuser</code>命令，例如创建一个<code>examplerole</code>的角色，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createuser examplerole --pwprompt</span><br></pre></td></tr></table></figure><p>授权角色访问，默认以<code>postgres</code>数据连接，再进行授权，这里的<code>postgres</code>相当于一个<code>sa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON employees TO examplerole;</span><br></pre></td></tr></table></figure><p>罗列所有用户角色，可以通过<code>\du</code>命令查看，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \du</span></span><br><span class="line">                             List of roles</span><br><span class="line">Role name   |                   Attributes                   | Member of</span><br><span class="line">-------------+------------------------------------------------+-----------</span><br><span class="line">examplerole |                                                | &#123;&#125;</span><br><span class="line">postgres    | Superuser, Create role, Create DB, Replication | &#123;&#125;</span><br></pre></td></tr></table></figure><p>为了便于管理，可以将多个角色添加到一个组，这样可以全局管理它们的权限。下面展示如何实现，所有这些命令应该在<code>postgres</code>用户下进行。</p><p>使用<code>createuser</code>创建一个组角色。其中<code>--no-login</code>选项指定了该组不需要登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createuser examplegroup --no-login</span><br></pre></td></tr></table></figure><p>登录并添加角色到组中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">psql postgres</span><br><span class="line">GRANT examplegroup TO examplerole;</span><br></pre></td></tr></table></figure><p>验证一下，使用<code>\du</code>命令，可以看到<code>examplerole</code>用户现在在<code>examplegroup</code>组中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \du</span><br><span class="line">                                List of roles</span><br><span class="line">Role name    |                   Attributes                   |   Member of</span><br><span class="line">--------------+------------------------------------------------+----------------</span><br><span class="line">examplegroup | Cannot login                                   | &#123;&#125;</span><br><span class="line">examplerole  |                                                | &#123;examplegroup&#125;</span><br><span class="line">group        |                                                | &#123;&#125;</span><br><span class="line">postgres     | Superuser, Create role, Create DB, Replication | &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>createuser</code>命令有几个选项。点击<a href="https://www.postgresql.org/docs/9.2/static/app-createuser.html" target="_blank" rel="noopener">这里</a>查看相关信息。</p><p>要更改角色属性，有几个选项，例如，授予<code>examplerole</code>属性<code>CREATEDB</code>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER ROLE examplerole CREATEDB;</span><br></pre></td></tr></table></figure><p>使用<code>\du</code>验证一下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \du</span><br><span class="line">                             List of roles</span><br><span class="line">Role name   |                   Attributes                   | Member of</span><br><span class="line">-------------+------------------------------------------------+-----------</span><br><span class="line">examplerole | Create DB                                      | &#123;&#125;</span><br><span class="line">group       |                                                | &#123;&#125;</span><br><span class="line">postgres    | Superuser, Create role, Create DB, Replication | &#123;&#125;</span><br></pre></td></tr></table></figure><p>删除角色，使用<code>dropuser</code>命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropuser examplerole</span><br></pre></td></tr></table></figure><h2><span id="peer-authentication">Peer Authentication</span></h2><p>PostgreSQL默认使用对等授权(peer authentication)的方式进行连接。意味着，如何当前授权的本地系统用户和PostgreSQL角色用户名匹配，则授予连接。所以你需要同时创建一个相同的Linux用户和一个对应的PostgreSQL角色。例如，刚刚创建了<code>examplerole</code>角色，Linux中需要创建一个<code>examplerole</code>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser examplerole &amp;&amp; passwd examplerole</span><br></pre></td></tr></table></figure><h2><span id="secure-postgresql">Secure PostgreSQL</span></h2><p>PostgreSQL默认使用的peer authentication方式，限制了仅能通过本地访问，它的配置信息在<code>/var/lib/pgsql/dta/pg_hba.conf</code>中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local    all        all             peer</span><br></pre></td></tr></table></figure><p>将<code>peer</code>替换为<code>md5</code>，以允许通过MD5哈希密码方式访问。</p><p>也可以指定信任任何服务器的连接，修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># IPv4 local connections:</span><br><span class="line">host    all            all      127.0.0.1/32      trust</span><br><span class="line">host    all            all      0.0.0.0/0    trust</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host    all            all      ::/0         trust</span><br></pre></td></tr></table></figure><p>退出，重启服务，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart postgresql</span><br><span class="line">su - postgres</span><br></pre></td></tr></table></figure><p>再次登录，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql mytestdb -U examplerole</span><br></pre></td></tr></table></figure><p>它会提示你输入密码，用于登录<code>examplerole</code>角色以访问数据库。你可以通过<code>\z</code>命令访问表权限。</p><p>另外，要实现远程访问，还需要修改<code>/var/lib/pgsql/data/postgresql.conf</code>配置，去掉前面注释，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses=<span class="string">'*'</span></span><br></pre></td></tr></table></figure><p>某些情况下，还需要关闭系统防火墙，或直接添加到iptalbe，</p><p>CentOS 防火墙中内置了PostgreSQL服务，配置文件位置在/usr/lib/firewalld/services/postgresql.xml，我们只需以服务方式将PostgreSQL服务开放即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=postgresql --permanent  开放postgresql服务</span><br><span class="line">firewall-cmd --reload  重载防火墙</span><br></pre></td></tr></table></figure><p>或干脆关闭防火墙，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>重启postgresql即可。</p><h2><span id="安装postgis">安装PostGIS</span></h2><p>PostGIS可以由CentOS仓储安装，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install postgis.x86_64 postgis-client.x86_64 postgis-debuginfo.x86_64 postgis-devel.x86_64 postgis-docs.x86_64 postgis-utils.x86_64</span><br></pre></td></tr></table></figure><p>查看PostGI相关文件是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/pgsql/share/extension</span><br><span class="line">ls /usr/pgsql/share/contrib/postgis</span><br></pre></td></tr></table></figure><p>加载PostGIS插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">psql -d postgres -U postgres</span><br></pre></td></tr></table></figure><p>在PostgreSQL Shell中，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># create database postgis ;</span></span><br><span class="line">postgres=<span class="comment"># \c postgis</span></span><br><span class="line">postgis=<span class="comment"># select * from pg_extension ;</span></span><br><span class="line">postgis=<span class="comment"># create extension postgis ;</span></span><br><span class="line">postgis=<span class="comment"># \dt</span></span><br><span class="line"></span><br><span class="line">postgis=<span class="comment"># select count(*) from spatial_ref_sys ;</span></span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \dn</span></span><br><span class="line"></span><br><span class="line">postgis=<span class="comment"># create extension postgis_topology ;</span></span><br><span class="line">CREATE EXTENSION</span><br><span class="line">postgis=<span class="comment"># \dn</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际开发过程有两种安装方式，一种是编译安装；一种是包安装方式。编译安装需要cmake，gcc以及编译所需要的各种devel，这里仅介绍包安装方式。&lt;/p&gt;
    
    </summary>
    
      <category term="sql" scheme="http://galudisu.info/categories/sql/"/>
    
    
      <category term="postgreSQL" scheme="http://galudisu.info/tags/postgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>使用storybook开发自己的React组件库</title>
    <link href="http://galudisu.info/2019/01/16/react/react-storybook-live-editing/"/>
    <id>http://galudisu.info/2019/01/16/react/react-storybook-live-editing/</id>
    <published>2019-01-16T15:14:34.000Z</published>
    <updated>2019-08-27T09:05:47.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/cartoon/20190116_225744.925.jpg" alt="ohanahibi"><br>有时候并不希望使用第三方组件库，以及大部分时候需要自己定制一套组件实现，以供公司或项目内部使用。开发自己的组件有如重复造轮子，会花费相当多的精力制造。如果是为了一种长远公司发展，这份努力是值得的，如果不想自己耗费精力，也有许多开源的组件实现，比如<a href="https://material-ui.com/" target="_blank" rel="noopener">material-ui</a>。一般都是拿来改造一下，可以避免很多开发或兼容性上的坑。</p><a id="more"></a><h2><span id="architecture">Architecture</span></h2><p>编写这篇文章时，笔者用的都是最新的包以及依赖，坑比较多，比如<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack4</a>，改掉以及删除很多功能；又如<a href="https://babeljs.io/docs/en/v7-migration" target="_blank" rel="noopener">babel7</a>弃用了旧的写法，全部带上了<code>scoped packages</code>，即在presets前面带上模块标志：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">"@babel/env"</span>], <span class="comment">// "@babel/preset-env"</span></span><br><span class="line">  plugins: [<span class="string">"@babel/transform-arrow-functions"</span>], <span class="comment">// same as "@babel/plugin-transform-arrow-functions"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要关键技术：</p><ul><li>webpack</li><li>typescript</li><li>react</li><li>state management(redux or mobx)</li><li>react-router-4</li><li>component hot reload</li><li>svg icon</li><li>jest</li><li>UI lib</li><li>less</li><li>eslint</li></ul><p>主要库以及版本：</p><ul><li>webpack4.x.x</li><li>typescript2.9.x</li><li>react16.7.x</li><li>react-router-dom4.2.x</li><li>react-hot-loader4.6.x<br>…</li><li>node10.13.x</li></ul><p>注意：react-router v4为第四代react-router，react-dom为v2或v3的旧版本。新版本的react-router v4可以说是重写了路由，react-router v4 被一分为三：<code>react-router-dom</code>(for web)、<code>react-router-native</code>(for native)、<code>react-router</code>(core)。仅在浏览器中使用的话，一般引入<code>react-router-dom</code>即可。如果从旧版本迁移，可以参考<a href="https://github.com/gmfe/Think/issues/6" target="_blank" rel="noopener">这里</a>。</p><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--.storybook</span><br><span class="line">--public模板目录</span><br><span class="line">--src</span><br><span class="line">  --components 自定义组件</span><br><span class="line">  --docs代码入口&lt;App/&gt;</span><br><span class="line">  --stories文档说明</span><br><span class="line">eslintrc.yml</span><br><span class="line">tsconfig.json</span><br><span class="line">.babelrc</span><br><span class="line">package.json依赖包</span><br><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure><h2><span id="babel">Babel</span></h2><p>Babel用于将浏览器不能识别的ES以及TS转换为JS，首先添加依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @babel/core @babel/cli @babel/preset-env @babel/preset-react @babel/preset-typescript @babel/plugin-proposal-object-rest-spread @babel/plugin-transform-runtime</span><br></pre></td></tr></table></figure><p>然后在根目录添加.babelrc，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;@babel/preset-env&quot;,</span><br><span class="line">    &quot;@babel/preset-react&quot;,</span><br><span class="line">    &quot;@babel/preset-typescript&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@babel/plugin-proposal-object-rest-spread&quot;,</span><br><span class="line">    &quot;@babel/plugin-transform-runtime&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="unit-test">Unit Test</span></h2><p>添加单元测试，单测默认识别目录<code>__tests__</code>，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--src</span><br><span class="line">  --components</span><br><span class="line">    --Link</span><br><span class="line">  --__tests__</span><br><span class="line">    Link.react.test.js</span><br><span class="line">  Link.react.js</span><br><span class="line">    index.js</span><br></pre></td></tr></table></figure><p>首先，使用TypeScript编写一个组件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> STATUS = &#123;</span><br><span class="line">  HOVERED: <span class="string">'hovered'</span>,</span><br><span class="line">  NORMAL: <span class="string">'normal'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MLink</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._onMouseEnter = <span class="keyword">this</span>._onMouseEnter.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>._onMouseLeave = <span class="keyword">this</span>._onMouseLeave.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      class: STATUS.NORMAL,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseEnter() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">class</span>: STATUS.HOVERED &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseLeave() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">class</span>: STATUS.NORMAL &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;a</span><br><span class="line">        className=&#123;<span class="keyword">this</span>.state.class&#125;</span><br><span class="line">        href=&#123;<span class="keyword">this</span>.props.page || <span class="string">'#'</span>&#125;</span><br><span class="line">        onMouseEnter=&#123;<span class="keyword">this</span>._onMouseEnter&#125;</span><br><span class="line">        onMouseLeave=&#123;<span class="keyword">this</span>._onMouseLeave&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">MLink.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  children: PropTypes.node.isRequired,</span></span><br><span class="line"><span class="regexp">  page: PropTypes.node,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>对应其<code>__tests__</code>目录添加单元测试，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MLink.react.test.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MLink &#125; <span class="keyword">from</span> <span class="string">'../Link.react'</span>;</span><br><span class="line"><span class="keyword">import</span> renderer <span class="keyword">from</span> <span class="string">'react-test-renderer'</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'MLink changes the class when hovered'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> component = renderer.create(</span><br><span class="line">    &lt;MLink page=<span class="string">"http://www.facebook.com"</span>&gt;Facebook&lt;<span class="regexp">/MLink&gt;,</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  let tree = component.toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ manually trigger the callback</span></span><br><span class="line"><span class="regexp">  tree.props.onMouseEnter();</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ re-rendering</span></span><br><span class="line"><span class="regexp">  tree = component.toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ manually trigger the callback</span></span><br><span class="line"><span class="regexp">  tree.props.onMouseLeave();</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ re-rendering</span></span><br><span class="line"><span class="regexp">  tree = component.toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>把单元测试所需的配置补充上，添加单元测试所需要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev jest @types/jest babel-jest ts-jest</span><br></pre></td></tr></table></figure><p>另外还需要一个Enzyme，它是React的测试工具，还需要enzyme-to-json 转换，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev jest react-test-renderer enzyme enzyme-adapter-react-16 enzyme-to-json</span><br></pre></td></tr></table></figure><p>更新一下package.json，加上对应的脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest",</span><br><span class="line">  "test:watch": "jest --watch",</span><br><span class="line">  "test:coverage": "jest --coverage"</span><br><span class="line">&#125;,</span><br><span class="line">"jest": &#123;</span><br><span class="line">  "setupFiles": ["./test/jestsetup.js"],</span><br><span class="line">  "snapshotSerializers": ["enzyme-to-json/serializer"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个test/jestsetup.js文件，自定义测试环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Enzyme, &#123; shallow, render, mount &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span>;</span><br><span class="line"><span class="comment">// React 16 Enzyme adapter</span></span><br><span class="line">Enzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br><span class="line"><span class="comment">// Make Enzyme functions available in all test files without importing</span></span><br><span class="line">global.shallow = shallow;</span><br><span class="line">global.render = render;</span><br><span class="line">global.mount = mount;</span><br></pre></td></tr></table></figure><p>对于CSS模块，添加以下配置到package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"jest": &#123;</span><br><span class="line">  "moduleNameMapper": &#123;</span><br><span class="line">    "^.+\\.(css|scss)$": "identity-obj-proxy"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行命令进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jest --env=jsdom --coverage --no-cache --detectOpenHandles</span><br></pre></td></tr></table></figure><p>jest可以测试的特性有：</p><ul><li>component render</li><li>props</li><li>events</li><li>event handlers<br>…</li></ul><p>更多例子可以参考<a href="https://jestjs.io/" target="_blank" rel="noopener">这里</a>。</p><h2><span id="eslint">ESLint</span></h2><p>首先加入依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev eslint eslint-config-airbnb-base eslint-loader eslint-plugin-import eslint-plugin-react typescript-eslint-parser</span><br></pre></td></tr></table></figure><p>ESLint用于代码检查用，配置也比较无脑，当你用像WebStorm这些开发工具时，工具会自动检测到ESLint，自动为你格式化和检查代码。下面是我自己的一份配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  browser:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  commonjs:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  es6:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  jest:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ecmaFeatures:</span></span><br><span class="line"><span class="attr">  modules:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  spread:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  restParams:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">extends:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'eslint:recommended'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'plugin:react/recommended'</span></span><br><span class="line"><span class="attr">parser:</span> <span class="string">'babel-eslint'</span></span><br><span class="line"><span class="attr">parserOptions:</span></span><br><span class="line"><span class="attr">  ecmaFeatures:</span></span><br><span class="line"><span class="attr">    jsx:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  ecmaVersion:</span> <span class="number">2018</span></span><br><span class="line"><span class="attr">  sourceType:</span> <span class="string">module</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">react</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  indent:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  linebreak-style:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">windows</span></span><br><span class="line"><span class="attr">  quotes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">single</span></span><br><span class="line"><span class="attr">  semi:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="attr">  comma-dangle:</span> <span class="string">off</span></span><br><span class="line"><span class="attr">  no-unused-vars:</span> <span class="string">warn</span></span><br><span class="line"><span class="attr">  no-console:</span> <span class="string">error</span></span><br><span class="line"><span class="attr">  no-unexpected-multiline:</span> <span class="string">warn</span></span><br><span class="line">  <span class="string">import/prefer-default-export:</span> <span class="string">off</span></span><br><span class="line"><span class="attr">settings:</span></span><br><span class="line"><span class="attr">  react:</span></span><br><span class="line"><span class="attr">    pragma:</span> <span class="string">React</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">detect</span></span><br></pre></td></tr></table></figure><p>像VSCode，可以在首选项 -&gt; 设置 中找到eslint.validate，加入typescript与typescriptreact，分别用于监听ts与tsx文件，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"eslint.validate": [</span><br><span class="line">    "javascript",</span><br><span class="line">    "javascriptreact",</span><br><span class="line">    "typescript",</span><br><span class="line">    <span class="string">"typescriptreact"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>更多配置可以自己定制。</p><h2><span id="storybook">Storybook</span></h2><p>storybook的主要作用是为自己实现的组件编写文档，可以在<a href="https://storybook.js.org/" target="_blank" rel="noopener">这里</a>查看更多细节。</p><p>安装storybook：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @storybook/react</span><br></pre></td></tr></table></figure><p>加入package.json的script</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"storybook"</span>: <span class="string">"start-storybook -p 9001 -c .storybook"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认storybook会在.storybook文件夹作为配置，配置文件为config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/config.js中修改路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'@storybook/react'</span>;</span><br><span class="line"><span class="comment">// src/stories/button.stories.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">'../src/stories'</span>, <span class="literal">true</span>, /\.stories\.js$/);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStories</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  req.keys().forEach(<span class="function">(<span class="params">filename</span>) =&gt;</span> req(filename));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configure(loadStories, <span class="built_in">module</span>);</span><br></pre></td></tr></table></figure><p>上面配置指定了创建stories的位置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// .storybook/config.js中修改路径</span><br><span class="line">import &#123; configure &#125; from &apos;@storybook/react&apos;;</span><br><span class="line"></span><br><span class="line">function loadStories() &#123;</span><br><span class="line">  require(&apos;../src/stories/button.stories.js&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configure(loadStories, module);</span><br><span class="line"></span><br><span class="line">// src/stories/button.stories.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; storiesOf &#125; from &apos;@storybook/react&apos;;</span><br><span class="line">import &#123;Button&#125; from &apos;../components/Button&apos;;</span><br><span class="line"></span><br><span class="line">storiesOf(&apos;Button&apos;, module)</span><br><span class="line">  .add(&apos;基本用法&apos;,() =&gt; (</span><br><span class="line">    &lt;Button&gt;按钮&lt;/Button&gt;</span><br><span class="line">  ))</span><br><span class="line">  </span><br><span class="line">// src/components/Button.js</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">export class Button extends React.Component&#123;</span><br><span class="line">  constructor (props) &#123;</span><br><span class="line">    super(props)    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button style=&#123;&#123;backgroundColor: &apos;#fff&apos;, border: &apos;1px solid #ccc&apos;&#125;&#125;&gt;&#123;this.props.children&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动stroybook服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn storybook</span><br></pre></td></tr></table></figure><p><img src="/img/react/storybook-script.png" alt="storybook"></p><p>默认会自动打开浏览器</p><p><img src="/img/react/storybook.png" alt="storybook"></p><p>出现以上页面说明配置已经成功了。</p><h2><span id="live-editing">Live Editing</span></h2><p>默认地，webpack的development mode在每次更新代码时，会自动刷新页面。但刷新不同于Live Edit，我不希望编写一个CSS还要重新refresh一下，页面直接变化就最好了！有很多工具可以实现这种方式，这里仅介绍react-hot-loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev react-hot-loader</span><br></pre></td></tr></table></figure><p>在script里面加入一个<code>--hot</code>选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"start"</span>: <span class="string">"./node_modules/.bin/webpack-dev-server --hot --mode development --progress --colors --config ./webpack.config.js"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>出现以下效果，说明Live Editing功能实现了。</p><video src="/img/react/react-hot-loader.mp4" type="video/mp4" controls="controls" width="100%" height="100%"></video><h2><span id="summary">Summary</span></h2><p>由于使用的东西比较多，而且开发的方式也比较灵活，具体技术细节可以具体深入理解。</p><p>完整代码，可以参考我的<a href="https://github.com/barudisshu/galilei-ui" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/cartoon/20190116_225744.925.jpg&quot; alt=&quot;ohanahibi&quot;&gt;&lt;br&gt;
有时候并不希望使用第三方组件库，以及大部分时候需要自己定制一套组件实现，以供公司或项目内部使用。开发自己的组件有如重复造轮子，会花费相当多的精力制造。如果是为了一种长远公司发展，这份努力是值得的，如果不想自己耗费精力，也有许多开源的组件实现，比如&lt;a href=&quot;https://material-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;material-ui&lt;/a&gt;。一般都是拿来改造一下，可以避免很多开发或兼容性上的坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react, redux, webpack, hot" scheme="http://galudisu.info/tags/react-redux-webpack-hot/"/>
    
  </entry>
  
  <entry>
    <title>在IntelliJ创建标签</title>
    <link href="http://galudisu.info/2018/12/23/ideal/using-intellij-bookmarks/"/>
    <id>http://galudisu.info/2018/12/23/ideal/using-intellij-bookmarks/</id>
    <published>2018-12-23T14:43:44.000Z</published>
    <updated>2019-08-27T09:05:47.507Z</updated>
    
    <content type="html"><![CDATA[<p>This is a quick post about IntelliJ’s nice bookmark feature.</p><p>IntelliJ gives you the option to bookmark single lines of code. After a line has been bookmarked, you can use various ways to jump directly back to this line. So it can be a good idea to bookmarks code locations you often work with.</p><a id="more"></a><p>To create a new bookmark you only have to press F11 inside the code editor. Bookmarked lines show a small checkmark next to the line number.</p><p><img src="/img/idea/intellij-bookmark1.png" alt=""></p><p>Bookmarks can be removed by selecting the bookmarked line and pressing F11 again.</p><p>To see all bookmarks you can press Shift - F11. This opens a small popup window which shows a list of all bookmarks you have created.</p><p><img src="/img/idea/intellij-bookmark5.png" alt=""></p><p>Note that this window can completely controlled using the keyboard:</p><ul><li>With Up / Down you can browse the list of bookmarks</li><li>With Enter you jump to the selected bookmark</li><li>Esc closes the window</li><li>A bookmark can be moved up or down using Alt - Up / Alt - Down</li></ul><p>Note that you can also add a mnemonic identifier to a bookmark. You do this by selecting a line and pressing Ctrl - F11. This opens a small menu in which you can choose a mnemonic identifier (which is a character or a number).</p><p><img src="/img/idea/intellij-bookmark3.png" alt=""></p><p>You can choose an identifier by clicking on one of the menu buttons or by simply pressing the corresponding key on your keyboard.</p><p>Bookmark mnemonics are also shown next to the line number. In the following image 1 was choosen as mnemonic.</p><p><img src="/img/idea/intellij-bookmark2.png" alt=""></p><p>Mnemonics give you the option to move even quicker between bookmarks. You can directly jump to a mnemonic bookmark by opening the bookmark popup (Shift - F11) and pressing the mnemonic key (1 in this example).</p><p>For numerical bookmarks even more shortcuts are available. You can toggle a numeric mnemonic on a selected line by pressing <code>Ctrl - Shift - &lt;number&gt;</code>. If you want to jump to a numeric mnemonic you use the <code>Ctrl - &lt;number&gt;</code> shortcut.</p><p>For example: <code>Ctrl - 5</code> brings you directly to the mnemonic bookmark 5.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a quick post about IntelliJ’s nice bookmark feature.&lt;/p&gt;
&lt;p&gt;IntelliJ gives you the option to bookmark single lines of code. After a line has been bookmarked, you can use various ways to jump directly back to this line. So it can be a good idea to bookmarks code locations you often work with.&lt;/p&gt;
    
    </summary>
    
    
      <category term="idea" scheme="http://galudisu.info/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>关于Akka在事件溯源的若干思考</title>
    <link href="http://galudisu.info/2018/12/21/pattern/ddd/event-sourcing-feedback/"/>
    <id>http://galudisu.info/2018/12/21/pattern/ddd/event-sourcing-feedback/</id>
    <published>2018-12-21T14:43:44.000Z</published>
    <updated>2019-08-27T09:05:47.561Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/cartoon/20181231_213606.453.jpg" alt="shana"></p><p>谈及CQRS，一定离不开Event Sourcing的讨论。首先阐明一个问题，Event Sourcing是否是必须的？主要是两点顾虑：</p><ul><li>引入Event Sourcing会带来一定额外开销，因为要将每次的Event按一定顺序存储下来。这样做是因为在分布式并发较大的情况下，可以保证CAP的最终一致性。因为传统数据库事务的回滚操作，在分布式环境操作显然是不切实际的，你不可能让每个请求处理都交给数据库去处理，这样会给数据库带来压力。</li><li>由于领域驱动设计理念，不可避免要记录Entity的状态。Event会改变Entity的State，一方面持久化Event可以方便对State进行回滚，对应PersistenceActor的snapshot；另一方面，Entity的事件需要进行pub-sub通信模式，实现解耦。但State并不是领域驱动设计阐述的内容，它是一种编程模式或一种架构方法。例如React的Redux设计了State，用于描述事件发生，记录已经改变了组件或模型的State。</li></ul><a id="more"></a><div style="float:right"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22727327&auto=1&height=66"></iframe></div><div class="clearfix"></div><h2><span id="ddd是什么">DDD是什么？</span></h2><blockquote><p>领域驱动设计是一种处理<strong>高度复杂域</strong>的设计方法，试图分离技术实现的复杂性，围绕<strong>业务概念</strong>构建<strong>领域模型</strong>来控制业务的复杂性，以解决软件难以理解，难以演化等问题。团队应用它可以成功开发<strong>复杂业务</strong>软件系统，使用系统在演进时任然保持敏捷。</p></blockquote><p>首先必须理解，DDD不是框架，不是架构，不是语言，它是一种设计思想。它可以分离业务复杂度和技术复杂度，DDD也并不是一个新的事物，它是面向对象的拔高，最终目标还是</p><blockquote><p>高内聚，低耦合</p></blockquote><h2><span id="ddd主要解决的问题">DDD主要解决的问题？</span></h2><ol><li><p>如何合理划分业务系统？<br>这为微服务的划分提供了方法论（微服务的粒度的问题，多大算大，多小又算小，在微服务刚兴起时，很多企业或者架构师对它都没有统一且明确的定义，这里给些examples，e.g：代码行数？职责的划分？披萨原则？组织结构？）界限上下文很好的回答了这个问题，这也是DDD最近几年借微服务的东风，火起来的原因之一(领域驱动设计的提出距今已经十多年，但真正火热起来大约是在2013年微服务架构被提出来之后)。</p></li><li><p>如何保持业务架构和系统架构的一致性？<br>与传统的系统相比，DDD里面强调领域专家和技术团队的合作，建立统一语言“普通话”， 聚焦在领域，领域逻辑和业务流程上面，使整体团队对同一个业务术语有统一的认识，避免理解的偏差，并将这些“术语”映射到代码中，随着系统的演进变迁。</p></li></ol><h2><span id="战略建模strategic-modeling和战术建模tractical-modeling">战略建模(Strategic Modeling)和战术建模(Tractical Modeling)</span></h2><blockquote><p>战略建模：</p><p>限界上下文(Bounded Context)<br>上下文映射图(Context Mapping)</p></blockquote><blockquote><p>战术建模：</p><p>聚合(Aggregate)<br>实体(Entity)<br>值对象(Value Objects)<br>资源库(Repository)<br>领域服务(Domain Services)<br>领域事件(Domain Events)<br>模块(Modules)</p></blockquote><h2><span id="ddd战略设计">DDD战略设计？</span></h2><p><img src="/img/pattern/ddd/dddes/ddd.png" alt="ddd"></p><p>这张图几乎覆盖了领域驱动设计的所有概念，它划分了两大部分：战略建模和战术建模。两部分没有明显的对比关系，它属于DDD的两个层面，一个是业务设计层面，一个是逻辑编码划分。可以看到，要实现领域驱动设计的程序代码，你必须既是产品经理，又是核心代码开发人员。</p><blockquote><p>想要完整的图例，可以在这里<a href="/img/pattern/ddd/dddes/dddd.png">下载</a>。</p></blockquote><h2><span id="ddd领域划分">DDD领域划分？</span></h2><p>根据问题域，将问题划分为<code>Core domain</code>，<code>Sub domain</code>，<code>Support subdomain</code> 和 <code>generic subdomian</code>，大概标准如下：</p><ul><li>核心域：核心竞争力，核心业务 (需要投入最好的人力和资源)</li><li>支持子域： 没有，很糟糕; 有，也不足以脱颖而出(可以考虑外包)</li><li>通用子域：都有的东西, 比如认证, 发短信, 客服系统等(可以考虑购买商业解决方案或者采用开源方案)</li></ul><h2><span id="ddd领域建模方法">DDD领域建模方法？</span></h2><p>领域建模的方式很多种，比如四色建模、OOAD还有事件风暴，我们这里只简单聊聊如何使用事件风暴梳理业务流程，建立领域模型，划分边界。</p><h2><span id="限界上下文bounded-context">限界上下文(Bounded Context)</span></h2><p>限界上下文的概念很重要，它由<code>通用语言</code>进行表述。它表述的就是子域，它划分了<code>实体</code>、<code>值对象</code>和<code>领域服务</code>等概念。</p><p>以玩家刷怪升级为例，通用语言描述为，“击杀怪物，掉落经验值，玩家获得经验值，玩家消费经验值，玩家经验值增加”。从这段话，就可以构建几个限界上下文：</p><p><img src="/img/pattern/ddd/dddes/bounded-context.png" alt="bounded-context"></p><p>可以看到，上下文的边界是非常清晰的，并且是唯一的，这种唯一性带来的好处就是解耦。例如，有个货物出仓的方法，它既可能在商品上实现方法，也可能在库存上实现方法。在一个业务项目中出现两个做同一件事情的方法，可以说，开发或维护是非常麻烦的事情！不妨将“出仓”划分到子域限界上下文“仓储”中去。由外部通过命令调用，这就是为什么大部分DDD设计，都是基于CQRS实现的原因。</p><h2><span id="ddd事件风暴">DDD事件风暴？</span></h2><p>事件风暴主要是来自 DDD 社区的一个工作坊，用于快速探索复杂的业务领域。在这个过程中，会使用一面大墙作为建模面，并使用贴纸来代表模型。我们将业务人员和开发人员聚集起来，并采用事件的方式查找领域中所发生的事情。当找到事件时，会尝试沿着一个时间线对它们进行排序。随后，我们会添加触发每个事件的命令。Huehnken 在这里没有基于实体看上去的从属关系创建聚合，而是希望能够根据命令流和事件而生成聚合。这会给聚合带来不同的视角，它会对命令和事件一起进行逻辑分组，他相信这种方式能够为我们带来更好的边界划分，并且有助于将聚合分割到不同的服务中。</p><p>在 Huehnken 的经验中，事件风暴是一个强大的工具，在一些较大规模的场景中更是如此，但是它可以用于不同的级别。他发现我们还可以将其用到一个更加技术化的级别，用于建模服务和聚合。这种方式的一个巨大优势就是能够将模型和实现匹配起来，这在 DDD 中是非常重要的。</p><p>响应式系统指的是构建具备即时响应性、弹性、适应性以及消息驱动特征的系统。实现这些特征的方式是异步消息。对于 Huehnken 来说，微服务的关键点在于隔离、快速反应并且能够在部署新版本服务时不影响系统的其他组成部分，所以对他来说，这两个概念非常具有互补性，我们需要响应式的微服务。</p><p>实现响应式系统的教科书式技术是Actor，但是 Huehnken 认为这种模型并不像他想象中的那样被广泛采用，他相信造成这一点的原因在于从单体模型进行转移所需的思想方式转变。在单体模型中，我们可以访问任何的内容，甚至可以跨越已存的逻辑边界。在真正的分布式系统中，会具有网络边界，我们无法以整体的方式访问系统。涉及到多个聚合的业务进程可能会需要像 sagas 这样的模式。现在，我们还要告别全局状态，在分布式系统中，每个服务是本地化的，已经过去的事情要通过事件来表示。</p><p>Huehnken 认为我们已经有了一个非常有趣的采用 Actor 的实现技术。现在有多个可用的框架，包括Erlang和 Akka。Lagom 是一个更新、更具倾向性的微服务框架，它基于 Akka、CQRS和事件溯源（event sourcing）。因为思维方式的挑战，人们在构建复杂异步解耦的系统时还较为困难，但是如果我们想要将建模技术和实现技术结合起来，这将是一个非常好的机会。</p><p>在 DDD 中，非常重要的一点在于代码要表述模型的概念。Huehnken 认为我们在这一点上已经迷失并且在偏离方向。我们已经开发了实现技术，并且又独立开发了新的建模技术，现在我们必须将它们结合起来，这样来自模型的理念能够直接反射到代码中，这样的话，会在构建分布式系统方面取得真正的突破。</p><p>基于响应式设计理念，对于大量复杂业务需要加速设计。所以事件风暴是以结果为导向的。事件风暴有4个步骤：</p><ol><li>识别领域事件</li></ol><p>事件是对结果进行建模，我们在寻找领域事件时，首先需要明白领域事件具备的几个特征：</p><ul><li>具有业务意义</li><li>过去时，e.g: “XX已XX”</li><li>时序性</li></ul><p>事件风暴以过去发生的事件追溯系统的数据和行为，从而进行合适的建模，e.g：</p><p><img src="/img/pattern/ddd/dddes/event-list.png" alt="Event List"></p><ol start="2"><li>识别命令</li></ol><p>命令可以理解为不同角色用户在界面上面的操作，比如“添加商品”，“编辑库存”，“提交订单”等； 有些命令可能产生多个事件，可以将他们用箭头联系起来; 在进行这个过程中，我们也需要将角色，通过不同的颜色标示出来 e.g:</p><p><img src="/img/pattern/ddd/dddes/event-recognize.png" alt="Event Recognize"></p><ol start="3"><li>寻找聚合</li></ol><p>在DDD中，聚合是一组相关的领域对象，其目的是要确保业务规则在边界内的不变性，聚合根具有全局标识，所有对聚合根内对象的修改，都只能通过聚合根进行，聚合帮助我们简化了复杂的对象网络，逐步做到“高内聚，低耦合”。<br>在识别聚合的时候，我们可以通过对命令和事件的划分找到聚合边界，识别出分布在时间轴上面不同位置的相关命令和事件，e.g：</p><p><img src="/img/pattern/ddd/dddes/event-aggregator.png" alt="Event Aggregator"></p><ol start="4"><li>边界划分</li></ol><p>划分服务的边界，它一定程度上面对应的是“界限上下文”，关于它有一个非常形象的定义：</p><blockquote><p>细胞之所以会存在，是因为细胞膜定义了什么在细胞内，什么在细胞外，并且确定了什么物质可以通过细胞膜</p></blockquote><p>一个聚合可能是最小颗粒度的界限上下文，同时，我们常合并业务相关性很高的聚合。e.g:</p><p><img src="/img/pattern/ddd/dddes/event-bound.png" alt="Event Bound"></p><p>最后在领域划分的时候，需要团队一起对业务达成共识，首先建立统一语言，然后识别领域模型，划分子域和界限上下文，在验证界限上下文的时候，如果你发现有过多的角色在同一个子域或者界限上下文时，就需要注意了，这就是典型的坏味道，需要及时调整的讯号。</p><h2><span id="akka的ddd战术设计">Akka的DDD战术设计</span></h2><p>CQRS是一种很好的设计，如果说战略设计是业务上的解耦，那么CQRS就是战术设计的解耦。它把代码层面上的职能进行了划分。这里主要顾虑到是否需要引入PersistenceActor，也就是是否需要在DDD进行事件的持久化的问题讨论。</p><p>一般情况下这样考虑，并发性较高，写入占主要吞吐量的业务，推荐使用Event Sourcing进行事件回溯。比如订单下单、天气预警、紧急消息推送等，这种一次大量写入的业务需要PersistenceActor作一份快照，以便失败时可以恢复(recover)。那么写入数据库的操作应该发生在persist前，还是persist后？</p><p>另外，是否是写入很少，读取很多的操作不推荐使用Event Sourcing？在CQRS设计中，Read的操作被设计为从中间件(Midware)读取，这个中间件可以是Elasticsearch，可以是MongoDB等，所以读操作很多的场景，引入Event Sourcing反而成为性能瓶颈，因为Event需要被保存下来并被序列化。</p><ol><li>PersistenceActor的限界上下文战术</li></ol><p>DDD的Entity被设计为继承了PersistenceActor，Entity实体有唯一标识persistenceId，这样聚合根拥有了全局标识，聚合根的所有操作，都发生在该Entity内。如下：</p><p><img src="/img/pattern/ddd/dddes/aggregate-root.png" alt="aggregate-root"></p><p>实体包含系统的状态(快照)，每次事件的发生都改变Entity的状态。</p><ol start="2"><li>PersistenceActor协作上下文</li></ol><p>DDD中实体拥有自身上下文的所有操作，并且不是共享的，不是RMI形式的。子域间想要调用彼此的操作，有两种方式：</p><ul><li>Pub-Sub事件订阅模式</li><li>领域协作</li></ul><p>事件订阅方式可以由Akka的EventBus处理，这种方式隔离性比较高。子域间的Entity根本不清楚彼此的情况，也不用关心内部的实现。缺点就是额外要维护这个EventBus，并且需要为EventBus配置Supervisor策略。</p><p>领域协作的方式比较直接，即通过上下文，直接获取临域的位置，直接调用。好处是不需要担心消息丢失方面的问题，事件由聚合根处理，实现高聚合、即时反馈。缺点就是要处理好消息的各种情况，在Akka设计方面一般用FSM对消息进行transform。</p><p>本身互联网就是个无状态非阻塞的环境，个人认为第二种方式比较适用这种环境的处理。下面阐述下流程：</p><p><img src="/img/pattern/ddd/dddes/context-associate.png" alt="context-associate"></p><p>根据以往的经验，总结下Actor设计的思想：</p><ul><li>一个Actor只做一件事情，它是无依赖的，原子性的，逻辑上不可再分割的最小单元；</li><li>一个Actor是包含行为的，它是一个对象，也是一个角色，这个行为可能表现为基础属性：邮箱大小，Executor机制，dispather机制；也可能表现为状态、Socket连接、游戏Actor的Exp、消息队列的Size等。</li></ul><p>不妨分析下：</p><blockquote><p>Aggregate Actor只做Aggregate root的角色，其它逻辑跟我无关<br>Pipe Actor只做Pipe的角色，我只担心流量、超时、deadletter，其它逻辑跟我无关<br>Factory Actor是个工厂，它会产生很多factor，至于factor做什么跟我无关</p><p>所以反过来说：凡是“与xxx有关”的Actor，都是设计有问题的，可以再次分割的逻辑，即时TDD也不能覆盖这个缺陷问题。</p></blockquote><p>这种Actor特性和设计思想，与微服务的理念无疑是“天工巧夺”。但同时要明白，微服务的设计，大多是面向容器的，除此之外，还有基于<a href="https://en.wikipedia.org/wiki/Function_as_a_service" target="_blank" rel="noopener">FaaS</a>。有兴趣的可以了解下。</p><h2><span id="ddd与微服务">DDD与微服务</span></h2><p>理想情况下，界限上下文与微服务可以一一对应，在实际项目中，有些调整，比如根据业务的相关度和变化频率，有时候我们会将多个界限上下文进行合并；另外微服务在开发，测试，部署，发布和运维等等时，相比单体应用而言，它面临了所有分布式系统面临的问题，带来了额外的复杂度和开销，所以将微服务粒度拆分过细反而是一种反模式，需要考虑需要解决问题的复杂度，将相对简单的服务合并在一起；在微服务拆分的时候，也要注意：“聚合是服务的最小单元”（一个界限上下文可以包括多个聚合），打破聚合，就很有可能破坏事务一致性和业务约束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/cartoon/20181231_213606.453.jpg&quot; alt=&quot;shana&quot;&gt;&lt;/p&gt;
&lt;p&gt;谈及CQRS，一定离不开Event Sourcing的讨论。首先阐明一个问题，Event Sourcing是否是必须的？主要是两点顾虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入Event Sourcing会带来一定额外开销，因为要将每次的Event按一定顺序存储下来。这样做是因为在分布式并发较大的情况下，可以保证CAP的最终一致性。因为传统数据库事务的回滚操作，在分布式环境操作显然是不切实际的，你不可能让每个请求处理都交给数据库去处理，这样会给数据库带来压力。&lt;/li&gt;
&lt;li&gt;由于领域驱动设计理念，不可避免要记录Entity的状态。Event会改变Entity的State，一方面持久化Event可以方便对State进行回滚，对应PersistenceActor的snapshot；另一方面，Entity的事件需要进行pub-sub通信模式，实现解耦。但State并不是领域驱动设计阐述的内容，它是一种编程模式或一种架构方法。例如React的Redux设计了State，用于描述事件发生，记录已经改变了组件或模型的State。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="akka, ddd, cqrs" scheme="http://galudisu.info/tags/akka-ddd-cqrs/"/>
    
  </entry>
  
  <entry>
    <title>React Redux Tutorial for Beginners - The Definitive Guide(2018)</title>
    <link href="http://galudisu.info/2018/11/19/react/react-redux-tutorial-beginners/"/>
    <id>http://galudisu.info/2018/11/19/react/react-redux-tutorial-beginners/</id>
    <published>2018-11-19T15:14:34.000Z</published>
    <updated>2019-08-27T09:05:47.587Z</updated>
    
    <content type="html"><![CDATA[<p>The Simplest <strong>React Redux tutorial</strong> I wish I had when I started learning <a href="https://www.valentinog.com/blog/react-redux-tutorial-beginners/#React_Redux_tutorial_what_you_will_learn" target="_blank" rel="noopener">here</a></p><p><img src="/img/react/redux-react-tutorial-beginner-2018.png" alt="redux"></p><a id="more"></a><p>When I first started learning <strong>Redux</strong> I wish I could find the simplest tutorial ever.</p><p>Despite the great resource out there I couldn’t wrap my head around some of the Redux concepts.</p><p>I knew what’s the <strong>state</strong>. But <strong>Actions, action creators, and reducers?</strong> They were obscure for me.</p><p>Last but not least I didn’t know how to glue <strong>React and Redux together</strong>.</p><p>During those days I started writing my own React Redux tutorial and since then I learned a lot.</p><p>I taught myself the Redux fundamentals by writting this guide. I hope it’ll be useful for all those learning React and Redux.</p><h2><span id="react-redux-tutorial-who-this-guide-is-for">React Redux tutorial: who this guide is for</span></h2><p>The following React Redux guide is exactly what you’re looking for if:</p><ul><li>you have a good grasp of Javascript: ES6, and React</li><li>you’re looking forward to learn Redux in the most simple way</li></ul><h2><span id="react-redux-tutorial-what-you-will-learn">React Redux tutorial: what you will learn</span></h2><p>In the following guide you will learn:</p><ul><li>what is Redux</li><li>how to use Redux with React</li></ul><h2><span id="react-redux-tutorial-a-minimal-react-development-environment">React Redux tutorial: a minimal React development environment</span></h2><p>Before starting off <strong>make sure you have a React development environment ready to roll.</strong></p><p>To make one you can follow this tutorial of mine: How to set up React, webpack, and Babel or you can also use create-react-app.</p><h2><span id="react-redux-tutorial-what-is-the-state">React Redux tutorial: what is the state?</span></h2><p>To <strong>understand what is Redux</strong> you must first understand what is the <strong>state</strong>.</p><p>If you have ever worked with React the term state should be no surprise to you.</p><p>I guess you already wrote some <strong>stateful React component</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      articles: [</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">"React Redux Tutorial for Beginners"</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">"Redux e React: cos'è Redux e come usarlo con React"</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; articles &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;articles.map(el =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;el.id&#125;</span>&gt;</span>&#123;el.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A <strong>stateful React component</strong> is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">Javascript ES6 class</a>.</p><p>Every stateful React component <strong>carries its own state</strong>.</p><p>In a React component the state holds up <strong>data</strong> and the component might render such data to the user.</p><p>The state could also change in response to actions and events: in React you can update the local component’s state with setState.</p><p>But <strong>what is the state</strong> anyway?</p><p>The term state is not tied exclusively to React.</p><p>The <strong>state is all around you</strong>.</p><p>Even <strong>the simplest JavaScript application has a state</strong>.</p><p>Consider the following example:</p><p>the user clicks a button</p><p>a modal appers afterwards</p><p>Guess what, <strong>in this trivial interaction there is a state</strong> we must deal with.</p><p>We could describe the initial state as a plain JavaScript object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> state = &#123;</span><br><span class="line">  buttonClicked: <span class="string">'no'</span>,</span><br><span class="line">  modalOpen: <span class="string">'no'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And when the user clicks the button we have:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> state = &#123;</span><br><span class="line">  buttonClicked: <span class="string">'yes'</span>,</span><br><span class="line">  modalOpen: <span class="string">'yes'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How do you <strong>keep track of those things in JavaScript</strong> besides storing the state in an object?</p><p>Is there <strong>a library that can help use tracking the state</strong>?</p><h2><span id="react-redux-tutorial-what-problem-does-redux-solve">React Redux tutorial: what problem does Redux solve?</span></h2><p>A typical JavaScript application is full of states. And you didn’t even know.</p><p>Here are some examples of state:</p><ul><li>what the user sees (data)</li><li>what data are we fetching</li><li>what URL are we showing to the user</li><li>what items are selected inside the page</li><li>are there errors in the applications? That’s state too</li></ul><p>State is everywhere in JavaScript.</p><p>As you can see even the simplest JavaScript application has a state.</p><p>But can you imagine <strong>how much state a React application has</strong>?</p><p>Yeah, you can get by with keeping the state within a parent React component.</p><p>As long as the application remains <strong>small</strong>.</p><p>Then things will become tricky.</p><p>Even a silly to-do list could become unmanageable if you starting passing the state up and down.</p><p>Who wants a bloated React component?</p><p>Not only, I’d say that the <strong>frontend shouldn’t know about the business logic</strong>. Ever.</p><p>So what are the alternatives for managing the state of a React component?</p><p><strong>Redux</strong> is one of them.</p><p><strong>Redux solves a problem that might not be clear in the beginning</strong>: it helps giving <strong>each React component</strong> the <strong>exact piece of state</strong> it needs.</p><p>Redux holds up the <strong>state</strong> within a <strong>single location</strong>.</p><p>Also with Redux the <strong>logic for fetching and managing the state</strong> <strong>lives outside React</strong>.</p><p>The benefits of this approach might be not so evident. Things will look clear as soon as you’ll get your feet wet with Redux.</p><p>In the next section we’ll see why you should learn Redux and when to use Redux within your applications.</p><h2><span id="react-redux-tutorial-should-i-learn-redux">React Redux tutorial: should I learn Redux?</span></h2><p>Are you trying to learn Redux but you’re going nowhere?</p><p>Redux literally scares most beginners. But that shouldn’t be your case.</p><p><strong>Redux is not that hard</strong>. The key is: don’t rush learning Redux just because.</p><p>You should <strong>start learning Redux</strong> if you’re <strong>motivated and passionate</strong> about it.</p><p>Take your time.</p><p>I started to learn Redux because:</p><ul><li>I was 100% interested in learning how Redux works</li><li>I was eager to improve my React skills</li><li>the combination React/Redux is ubiquitous</li><li>Redux is <strong>framework agnostic</strong>. Learn it once, use it everywhere (Vue JS, Angular)</li></ul><p>Learning Redux or an equivalent state management library is a must.</p><p>Another truth is: real world JavaScript applications make always use of a state management library.</p><p>State is <strong>so pervasive and hard that state management in JS is still an unsolved problem</strong>.</p><p>The amount of libraries that come out almost daily is a proof.</p><p>Redux is just a library among the others, yet it is one of the most important.</p><p>Will Redux disappear in the future? Maybe.</p><p>But the <strong>patterns will stick forever</strong>.</p><p>Would you neglet learning OOP with PHP just because PHP is not “trendy” anymore?</p><p>I advise not doing so.</p><p>The same with Redux.</p><p>You should <strong>learn the patterns for managing UI state because they will be invaluable in your career</strong>.</p><h2><span id="react-redux-tutorial-should-i-use-redux">React Redux tutorial: should I use Redux?</span></h2><p>Using Redux or Flux (or Mobx) for state management is up to you.</p><p>Maybe you need none of these libraries. They have a cost: they add another layer of abstraction to your application.</p><p>But I prefer thinking about <strong>Redux as an investment</strong>, not as a cost.</p><p>Another common question for Redux beginners is: how do you know <strong>when you’re ready to use Redux in your application</strong>?</p><p>If you think about it there is no rule of thumb for determining when you do need <strong>Redux for managing the state</strong>.</p><p>Redux also offers a lot of convenience for a JavaScript developer. Debugging, action replaying. And much more.</p><p>When I start a new React project I’m always tempted to add Redux straight away. But …</p><p>As developers <strong>we overengineer our code automatically</strong>.</p><p>So, when should you add Redux to a project?</p><p><strong>Before picking Redux take your time to explore alternative patterns</strong>. In particular try to get the most out of React’s state and props.</p><p>Dave Ceddia has a nice writeup with a lot of great insights for using <a href="https://daveceddia.com/context-api-vs-redux/" target="_blank" rel="noopener">children props as an alternative before reaching for Redux</a>.</p><p>And don’t forget that a React project can be easily refactored to include Redux later.</p><p>What I found is that you should <strong>consider using Redux</strong> when:</p><ul><li>multiple React components needs to access the same state but do not have any parent/child relationship</li><li>you start to feel awkward passing down the state to multiple components with props</li></ul><p>If that makes still no sense for you do not worry, I felt the same.</p><p>Dan Abramov says “Flux libraries are like glasses: you’ll know when you need them.”</p><p>And in fact it worked like that for me.</p><p>Before going further take your time to understand what problem does Redux solve and whether you’re motivated or not to learn it.</p><p>Be aware that Redux is not useful for smaller apps. It really shines in bigger ones. Anyway, learning Redux even if you’re not involved in something big wouldn’t harm anyone.</p><p>In the next section we’ll start building a proof of concept to introduce:</p><ul><li>the Redux fundamental principles</li><li>Redux alongside with React</li></ul><h2><span id="react-redux-tutorial-getting-to-know-the-redux-store">React Redux tutorial: getting to know the Redux store</span></h2><p>Actions. Reducers. I kind of knew about them. But one thing wasn’t clear to me: <strong>how were all the moving parts glued together</strong>?</p><p>Were there some minions or what?</p><p>In Redux there are no minions (unfortunately).</p><p>The <strong>store orchestrates all the moving parts in Redux</strong>. Repeat with me: the <strong>store</strong>.</p><p>The store in Redux is like the human brain: it’s kind of magic.</p><p>The <strong>Redux store is fundamental</strong>: the <strong>state of the whole application</strong> lives <strong>inside the store</strong>.</p><p>So to start playing with Redux we should <strong>create a store for wrapping up the state</strong>.</p><p>Move into your React development environment and install Redux:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i redux --save-dev</span><br></pre></td></tr></table></figure><p>Create a directory for the store:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/store</span><br></pre></td></tr></table></figure><p>Create a new file named <code>index.js</code> in <code>src/js/store</code> and finally initialize the store:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">"../reducers/index"</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>createStore is the function for creating the Redux store.</p><p>createStore takes a reducer as the first argument, rootReducer in our case.</p><p>You may also pass an initial state to createStore. But most of the times you don’t have to. Passing an initial state is useful for server side rendering. Anyway, <strong>the state comes from reducers</strong>.</p><blockquote><p>NOTE: see <a href="https://stackoverflow.com/questions/36619093/why-do-i-get-reducer-returned-undefined-during-initialization-despite-pr" target="_blank" rel="noopener">Reducer returned undefined during initialization</a></p></blockquote><p>So what does exactly a reducer do?</p><p>In Redux <strong>reducers produce the state</strong>. The state is not something you create by hand.</p><p>Armed with that knowledge let’s move on to our first Redux reducer.</p><h2><span id="react-redux-tutorial-getting-to-know-redux-reducers">React Redux tutorial: getting to know Redux reducers</span></h2><p>While an initial state is useful for <a href="https://redux.js.org/docs/recipes/ServerRendering.html" target="_blank" rel="noopener">SSR</a>, in Redux <strong>the state must return entirely from reducers</strong>.</p><p>Cool but what’s a reducer?</p><p><strong>A reducer is just a Javascript function</strong>. A reducer <strong>takes two parameters: the current state</strong> and an <strong>action</strong> (more about actions soon).</p><p>The third principle of Redux says that the state is immutable and cannot change in place.</p><p>This is why the reducer must be pure. A pure function is one that returns the exact same output for the given input.</p><p>In plain React the local state changes in place with setState. In Redux you cannot do that.</p><p>Creating a reducer is not that hard. It’s a plain Javascript function with two parameters.</p><p>In our example we’ll be creating a <strong>simple reducer taking the initial state</strong> as the first parameter. As a <strong>second parameter</strong> we’ll provide <strong>action</strong>. As of now the reducer will do nothing than returning the initial state.</p><p>Create a directory for the root reducer:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/reducers</span><br></pre></td></tr></table></figure><p>Then create a new file named <code>index.js</code> in the <code>src/js/reducers</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/reducers/index.js</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> state;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><p>I promised to keep this guide as simple as possibile. That’s why our first reducer is a silly one: it returns the initial state without doing anything else.</p><p>Notice how the initial state is passed as a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" target="_blank" rel="noopener">default parameter</a>.</p><p>In the next section we’ll add an action to the mix. That’s where things will become interesting.</p><h2><span id="react-redux-tutorial-getting-to-know-redux-actions">React Redux tutorial: getting to know Redux actions</span></h2><p>Redux reducers are without doubt the most important concept in Redux. <strong>Reducers produce the state of the application</strong>.</p><p>But <strong>how does a reducer know when to produce the next state</strong>?</p><p>The second principle of Redux says the <strong>only way to change the state is by sending a signal to the store</strong>.This signal is an <strong>action. “Dispatching an action”</strong> is the process of sending out a signal.</p><p>Now, how do you change an immutable state? You won’t. The resulting state is a copy of the current state plus the new data.</p><p>That’s a lot to know.</p><p>The reassuring thing is that <strong>Redux actions are nothing more than Javascript objects</strong>. This is what an action looks like:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: 'ADD_ARTICLE',</span><br><span class="line">  payload: &#123; name: 'React Redux Tutorial', id: 1 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Every action needs a type property for describing how the state should change.</p><p>You can specify a payload as well. In the above example the payload is a new article. A reducer will add the article to the current state later.</p><p>It is a best pratice to <strong>wrap every action within a function</strong>. Such function is an <strong>action creator</strong>.</p><p>Let’s put everything together by creating a simple Redux action.</p><p>Create a directory for the actions:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/actions</span><br></pre></td></tr></table></figure><p>Then create a new file named <code>index.js</code> in <code>src/js/actions</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/actions/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addArticle = <span class="function"><span class="params">article</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">"ADD_ARTICLE"</span>, <span class="attr">payload</span>: article &#125;);</span><br></pre></td></tr></table></figure><p>So, the <strong>type property</strong> is nothing more than a string.</p><p>The reducer will use that string to determine how to calculate the next state.</p><p>Since strings are prone to typos and duplicates it’s <strong>better to have action types declared as constants</strong>.</p><p>This approach helps <strong>avoiding errors that will be difficult to debug</strong>.</p><p>Create a new directory:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/constants</span><br></pre></td></tr></table></figure><p>Then create a new file named <code>action-types.js</code> into the <code>src/js/constants</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/constants/action-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_ARTICLE = <span class="string">"ADD_ARTICLE"</span>;</span><br></pre></td></tr></table></figure><p>Now open up again <code>src/js/actions/index.js</code> and update the action to use action types:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/actions/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ADD_ARTICLE &#125; <span class="keyword">from</span> <span class="string">"../constants/action-types"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addArticle = <span class="function"><span class="params">article</span> =&gt;</span> (&#123; <span class="attr">type</span>: ADD_ARTICLE, <span class="attr">payload</span>: article &#125;);</span><br></pre></td></tr></table></figure><p>We’re one step closer to have a working Redux application. Let’s refactor our reducer!</p><h2><span id="react-redux-tutorial-refactoring-the-reducer">React Redux tutorial: refactoring the reducer</span></h2><p>Before moving forward let’s recap the main Redux concepts:</p><ul><li>the <strong>Redux store</strong> is like a brain: it’s in charge for <strong>orchestrating all the moving parts</strong> in Redux</li><li>the <strong>state of the application lives as a single, immutable object</strong> within the store</li><li>as soon as <strong>the store receives an action it triggers a reducer</strong></li><li>the <strong>reducer returns the next state</strong></li></ul><p>What’s a <strong>Redux reducer</strong> made of?</p><p>A reducer is a Javascript function taking <strong>two parameters</strong>: the <strong>state</strong> and the <strong>action</strong>.</p><p>A reducer function may have a <strong>switch statement</strong> (but I prefer using if).</p><p>The <strong>reducer calculates the next state depending on the action type</strong>. Moreover, <strong>it should return at least the initial state when no action type matches</strong>.</p><p>When the action type matches a case clause the <strong>reducer calculates the next state</strong> and <strong>returns a new object</strong>. Here’s an excerpt of the code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">articles</span>: [...state.articles, action.payload] &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>The reducer we created in the previous section does nothing than returning the initial state. Let’s fix that.</p><p>Open up <code>src/js/reducers/index.js</code> and update the reducer as follow:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_ARTICLE &#125; <span class="keyword">from</span> <span class="string">"../constants/action-types"</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      state.articles.push(action.payload);</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><p>We’re not done yet! With the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="noopener">spread operator</a> we can make our reducer even better:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_ARTICLE &#125; <span class="keyword">from</span> <span class="string">"../constants/action-types"</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">articles</span>: [...state.articles, action.payload] &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><p>In the example above the initial state is left utterly untouched.</p><p>The initial articles array doesn’t change in place.</p><p>The initial state object doesn’t change as well. The resulting state is a copy of the initial state.</p><p>There are two key points for <strong>avoiding mutations in Redux</strong>:</p><ul><li><a href="https://egghead.io/lessons/react-redux-avoiding-array-mutations-with-concat-slice-and-spread" target="_blank" rel="noopener">Using concat(), slice(), and …spread</a> for arrays</li><li><a href="https://egghead.io/lessons/react-redux-avoiding-object-mutations-with-object-assign-and-spread" target="_blank" rel="noopener">Using Object.assign() and …spread</a> for objects</li></ul><p>The <strong>object spread operator</strong> is still in stage 3. Install <a href="https://babeljs.io/docs/plugins/transform-object-rest-spread/" target="_blank" rel="noopener">Object rest spread transform</a> to <strong>avoid a SyntaxError Unexpected token</strong> when using the object spread operator in Babel:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev babel-plugin-transform-object-rest-spread</span><br></pre></td></tr></table></figure><p>Open up <code>.babelrc</code> and update the configuration:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"react"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"transform-object-rest-spread"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Redux protip</strong>: the reducer will grow as your app will become bigger. You can split a big reducer into separate functions and combine them with <a href="https://redux.js.org/docs/api/combineReducers.html" target="_blank" rel="noopener">combineReducers</a></p><p>In the next section we’ll play with Redux from the console. Hold tight!</p><h2><span id="react-redux-tutorial-redux-store-methods">React Redux tutorial: Redux store methods</span></h2><p>This will be super quick, I promise.</p><p>I want you to play with the brower’s console for gaining a quick understanding of how Redux works.</p><p>Redux itself is a small library (2KB). The <a href="https://redux.js.org/docs/api/Store.html" target="_blank" rel="noopener">Redux store exposes a simple API</a> for managing the state. The most important methods are:</p><ul><li><a href="https://redux.js.org/docs/api/Store.html#getState" target="_blank" rel="noopener">getState</a> for accessing the current state of the application</li><li><a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a> for dispatching an action</li><li><a href="https://redux.js.org/docs/api/Store.html#subscribe" target="_blank" rel="noopener">subscribe</a> for listening on state changes</li></ul><p>We will play in the brower’s console with the above methods.</p><p>To do so we have to export as global variables the store and the action we created earlier.</p><p>Create <code>src/js/index.js</code> and update the file with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"../js/store/index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addArticle &#125; <span class="keyword">from</span> <span class="string">"../js/actions/index"</span>;</span><br><span class="line"><span class="built_in">window</span>.store = store;</span><br><span class="line"><span class="built_in">window</span>.addArticle = addArticle;</span><br></pre></td></tr></table></figure><p>Open up <code>src/index.js</code> as well, clean up its content and update it as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">"./js/index"</span></span><br></pre></td></tr></table></figure><p>Now run webpack dev server (or Parcel) with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>head over <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> and open up the console with F12.</p><p>Since we’ve exported the store as a global variable we can access its methods. Give it a try!</p><p>Start off by <strong>accessing the current state</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getState()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">articles</span>: <span class="built_in">Array</span>(<span class="number">0</span>)&#125;</span><br></pre></td></tr></table></figure><p>Zero articles. In fact we haven’t update the initial state yet.</p><p>To make things interesting we can listen for state updates with subscribe.</p><p>The <strong>subscribe method accepts a callback that will fire whenever an action is dispatched</strong>. Dispatching an action means notifying the store that we want to change the state.</p><p>Register the callback with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.subscribe(() =&gt; console.log('Look ma, Redux!!'))</span><br></pre></td></tr></table></figure><p>To <strong>change the state in Redux we need to dispatch an action</strong>. To dispatch an action you have to call the <a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a> method.</p><p>We have one action at our disposal: addArticle for adding a new item to the state.</p><p>Let’s dispatch the action with:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch( addArticle(&#123; <span class="attr">name</span>: <span class="string">'React Redux Tutorial for Beginners'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;) )</span><br></pre></td></tr></table></figure><p>Right after running the above code you should see:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Look ma, Redux!!</span><br></pre></td></tr></table></figure><p>To verify that the state changed run again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getState()</span><br></pre></td></tr></table></figure><p>The output should be:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">articles</span>: <span class="built_in">Array</span>(<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure><p>And that’s it. This is Redux in its simplest form.</p><p>Was that difficult?</p><p>Take your time to explore these three Redux methods as an exercise. Play with them from the console:</p><ul><li><a href="https://redux.js.org/docs/api/Store.html#getState" target="_blank" rel="noopener">getState</a> for <strong>accessing the current state</strong> of the application</li><li><a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a> for <strong>dispatching an action</strong></li><li><a href="https://redux.js.org/docs/api/Store.html#subscribe" target="_blank" rel="noopener">subscribe</a> for <strong>listening on state changes</strong></li></ul><p>That’s everything you need to know for getting started with Redux.</p><p>Once you feel confident head over the next section. We’ll go straight to connecting React with Redux!</p><h2><span id="react-redux-tutorial-connecting-react-with-redux">React Redux tutorial: connecting React with Redux</span></h2><p>After learning Redux I realized it wasn’t so complex.</p><p>I knew how to access the current state with <a href="https://redux.js.org/docs/api/Store.html#getState" target="_blank" rel="noopener">getState</a>.</p><p>I knew how to dispatch an action with <a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a></p><p>I knew how to listen for state changes with <a href="https://redux.js.org/docs/api/Store.html#subscribe" target="_blank" rel="noopener">subscribe</a></p><p>Yet I didn’t know how to couple React and Redux together.</p><p>I was asking myself: should I call getState within a React component? How do I dispatch an action from a React component? And so on.</p><p>Redux on its own is framework agnostic. You can use it with vanilla Javascript. Or with Angular. Or with React. There are bindings for joining together Redux with your favorite framework/library.</p><p>For React there is <a href="https://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="noopener">react-redux</a>.</p><p>Before moving forward install <a href="https://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="noopener">react-redux</a> by running:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-redux --save-dev</span><br></pre></td></tr></table></figure><p>To demonstrate how React and Redux work together we’ll build a super simple application. The application is made of the following components:</p><ul><li>an App component</li><li>a List component for displaying articles</li><li>a Form component for adding new articles</li></ul><p>(The application is a toy and it does nothing serious other than displaying a list and a form for adding new items. Nonetheless it’s still a good starting point for learning Redux)</p><h2><span id="react-redux-tutorial-react-redux">React Redux tutorial: react-redux</span></h2><p><a href="https://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="noopener">react-redux</a> is a Redux binding for React. It’s a small library for connecting Redux and React in an efficient way.</p><p>The most important method you’ll work with is connect</p><p>What does react-redux’s connect do? Unsurprisingly it <a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options" target="_blank" rel="noopener">connects</a> a React component with the Redux store.</p><p>You will use <strong>connect</strong> with two or three arguments depending on the use case. The fundamental things to know are:</p><ul><li>the mapStateToProps function</li><li>the mapDispatchToProps function</li></ul><p><strong>What does mapStateToProps do</strong> in react-redux? mapStateToProps does exactly what its name suggests: it <strong>connects a part of the Redux state</strong> to the <a href="https://reactjs.org/docs/components-and-props.html" target="_blank" rel="noopener">props of a React component</a>. By doing so a connected React component will have access to the exact part of the store it needs.</p><p><strong>What does mapDispatchToProps</strong> do in react-redux? mapDispatchToProps does something similar, but for actions. <strong>mapDispatchToProps connects Redux actions to React props</strong>. This way a connected React component will be able to dispatch actions.</p><p>Is everything clear? If not, stop and take your time to re-read the guide. I know it’s a lot to learn and it requires time. Don’t worry if you don’t get Redux right know. It will click sooner or later.</p><p>In the next section we’ll finally get our hands dirty!</p><h2><span id="react-redux-tutorial-app-component-and-redux-store">React Redux tutorial: App component and Redux store</span></h2><p>We saw that mapStateToProps connects a portion of the Redux state to the props of a React component. You may wonder: is this enough for connecting Redux with React? No, it’s not.</p><p>To start off <strong>connecting Redux with React we’re going to use [Provider[(<a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store" target="_blank" rel="noopener">https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store</a>)</strong>.</p><p><a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store" target="_blank" rel="noopener">Provider</a> is an high order component coming from react-redux.</p><p>Using layman’s terms, Provider wraps up your React application and makes it aware of the entire Redux’s store.</p><p>Why so? We saw that in Redux the store manages everything. React must talk to the store for accessing the state and dispatching actions.</p><p>Enough theory.</p><p>Open up <code>src/js/index.js</code>, wipe out everything and update the file with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store/index"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./components/App"</span>;</span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("app")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>You see? Provider wraps up your entire React application. Moreover it gets the store as a prop.</p><p>Now let’s create the <strong>App</strong> component since we’re requiring it. It’s nothing special: App should import a List component and render itself.</p><p>Create a directory for holding the components:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/components</span><br></pre></td></tr></table></figure><p>and a new file named <code>App.js</code> inside <code>src/js/components</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/components/App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./List"</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"row mt-5"</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">"col-md-4 offset-md-1"</span>&gt;</span><br><span class="line">    &lt;h2&gt;Articles&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;List /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>Take moment and look at the component without the markup:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./List"</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">      &lt;List /&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>then move on to createing <strong>List</strong>.</p><h2><span id="react-redux-tutorial-list-component-and-redux-state">React Redux tutorial: List component and Redux state</span></h2><p>We have done nothing special so far.</p><p>But our new component, List, will interact with the Redux store.</p><p>A brief recap: the key for connecting a React component with Redux is <a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options" target="_blank" rel="noopener">connect</a>.</p><p>Connect takes at least one argument.</p><p>Since we want List to get a list of articles it’s a matter of connecting state.articleswith the component. How? With <strong>mapStateToProps</strong>.</p><p>Create a new file named <code>List.js</code> inside <code>src/js/components</code>. It should look like the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/components/List.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">articles</span>: state.articles &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ConnectedList = <span class="function">(<span class="params">&#123; articles &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;ul className=<span class="string">"list-group list-group-flush"</span>&gt;</span><br><span class="line">    &#123;articles.map(<span class="function"><span class="params">el</span> =&gt;</span> (</span><br><span class="line">      &lt;li className=<span class="string">"list-group-item"</span> key=&#123;el.id&#125;&gt;</span><br><span class="line">        &#123;el.title&#125;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    ))&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> List = connect(mapStateToProps)(ConnectedList);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure><p>The List component receives the prop <code>articles</code> which is a copy of the <code>articles</code> array. Such array lives inside the Redux state we created earlier. It comes from the reducer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">articles</span>: [...state.articles, action.payload] &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then it’s a matter of using the prop inside JSX for generating a list of articles:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;articles.map(<span class="function"><span class="params">el</span> =&gt;</span> (</span><br><span class="line">  &lt;li className=<span class="string">"list-group-item"</span> key=&#123;el.id&#125;&gt;</span><br><span class="line">    &#123;el.title&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">))&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>React protip</strong>: take the habit of validating props with <a href="https://reactjs.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">PropTypes</a></p></blockquote><p>Finally the component gets exported as List. List is the result of connecting the stateless component ConnectedList with the Redux store.</p><p>A stateless component does not have its own local state. Data gets passed to it as props</p><p>Still confused? I was too. Understanding how connect works will take some time. Fear not, the road to learn Redux is paved with “ah-ha” moments.</p><p>I suggest taking a break for exploring both connect and mapStateToProps.</p><p>Once you’re confident about them head over the next section!</p><h2><span id="react-redux-tutorial-form-component-and-redux-actions">React Redux tutorial: Form component and Redux actions</span></h2><p>The Form component we’re going to create is a bit more complex than List. It’s a form for adding new items to our application.</p><p>Plus it is a <strong>stateful component</strong>.</p><p>A stateful component in React is a component carrying its own local state</p><p>A stateful component? “Valentino, we’re talking about Redux for managing the state! Why on earth would you give Form its own local state??”</p><p><strong>Even when using Redux it is totally fine to have stateful components</strong>.</p><p>Not every piece of the application’s state should go inside Redux.</p><p>In this example I don’t want any other component to be aware of the Form local state.</p><p>And that’s perfectly fine.</p><p>What does the component do?</p><p>The component contains some logic for updating the local state upon a form submission.</p><p>Plus it receives a Redux action as prop. This way it can update the global state by dispatching the addArticle action.</p><p>Create a new file named <code>Form.js</code> inside <code>src/js/components</code>. It should look like the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/components/Form.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> uuidv1 <span class="keyword">from</span> <span class="string">"uuid"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addArticle &#125; <span class="keyword">from</span> <span class="string">"../actions/index"</span>;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addArticle: <span class="function"><span class="params">article</span> =&gt;</span> dispatch(addArticle(article))</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectedForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      title: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; [event.target.id]: event.target.value &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> id = uuidv1();</span><br><span class="line">    <span class="keyword">this</span>.props.addArticle(&#123; title, id &#125;);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">title</span>: <span class="string">""</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;div className=<span class="string">"form-group"</span>&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">"title"</span>&gt;Title&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input</span></span><br><span class="line"><span class="regexp">            type="text"</span></span><br><span class="line"><span class="regexp">            className="form-control"</span></span><br><span class="line"><span class="regexp">            id="title"</span></span><br><span class="line"><span class="regexp">            value=&#123;title&#125;</span></span><br><span class="line"><span class="regexp">            onChange=&#123;this.handleChange&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button type="submit" className="btn btn-success btn-lg"&gt;</span></span><br><span class="line"><span class="regexp">          SAVE</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const Form = connect(null, mapDispatchToProps)(ConnectedForm);</span></span><br><span class="line"><span class="regexp">export default Form;</span></span><br></pre></td></tr></table></figure><p>What can I say about the component? Besides <strong>mapDispatchToProps</strong> and <strong>connect</strong> it’s standard React stuff.</p><p><strong>mapDispatchToProps connects Redux actions to React props</strong>. This way a connected component is able to dispatch actions.</p><p>You can see how the action gets dispatched in the handleSubmit method:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> id = uuidv1();</span><br><span class="line">    <span class="keyword">this</span>.props.addArticle(&#123; title, id &#125;); <span class="comment">// Relevant Redux part!!</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Finally the component gets exported as Form. Form is the result of connecting ConnectedForm with the Redux store.</p><p>Side note: the first argument for connect must be <code>null</code> when mapStateToProps is absent like in the Form example. Otherwise you’ll get <code>TypeError: dispatch is not a function</code>.</p><p>Our components are all set!</p><p>Update App to include the Form component:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./List"</span>;</span><br><span class="line"><span class="keyword">import</span> Form <span class="keyword">from</span> <span class="string">"./Form"</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"row mt-5"</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">"col-md-4 offset-md-1"</span>&gt;</span><br><span class="line">      &lt;h2&gt;Articles&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;List /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="col-md-4 offset-md-1"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;Add a new article&lt;/</span>h2&gt;</span><br><span class="line">      &lt;Form /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>Install uuid with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i uuid --save-dev</span><br></pre></td></tr></table></figure><p>Now run webpack(or Parcel) with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>and head over to <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>You should see the following working POC:</p><p><img src="/img/react/react-redux-demo.png" alt="article"></p><p>Nothing fancy but still useful for showing React and Redux at work!</p><p>The <strong>List component on the left is connected to the Redux store</strong>. It will re-render whenever you add a new item.</p><p><img src="/img/react/react-redux-tutorial-demo-gif.gif" alt="redux-action"></p><p>Whoaaa!</p><h2><span id="react-redux-tutorial-wrapping-up">React Redux tutorial: wrapping up</span></h2><p>I hope you’ll learn something from this guide. I tried my best to keep things as simple as possibile. I would love to hear your feedback in the comments below!</p><p>Redux has a lot of boilerplate and moving parts. Don’t get discouraged. Pick Redux, play with it and take your time to absorb all the concepts.</p><p>I went from zero to understanding Redux by small steps. You can do it too!</p><p>Also, take your time to investigate why and if you should use Redux in your application.</p><p>Either way think of Redux as an investment: learning it is 100% worthwile.</p><h2><span id="react-redux-tutorial-redux-devtools">React Redux tutorial: Redux DevTools</span></h2><p>You will find the interesting tool from <a href="https://cloud.githubusercontent.com/assets/7957859/18002950/aacb82fc-6b93-11e6-9ae9-609862c18302.png" target="_blank" rel="noopener">here</a>.</p><p>It’s very useful for inspect redux concept like <strong>Action</strong>, <strong>State</strong>, and can always replay the actions!</p><p><img src="/img/react/redux-devTools.png" alt="redux-devtool"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Simplest &lt;strong&gt;React Redux tutorial&lt;/strong&gt; I wish I had when I started learning &lt;a href=&quot;https://www.valentinog.com/blog/react-redux-tutorial-beginners/#React_Redux_tutorial_what_you_will_learn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react/redux-react-tutorial-beginner-2018.png&quot; alt=&quot;redux&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react, redux" scheme="http://galudisu.info/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>How to set up React, webpack 4, and Babel 7</title>
    <link href="http://galudisu.info/2018/11/19/react/react-webpack-babel/"/>
    <id>http://galudisu.info/2018/11/19/react/react-webpack-babel/</id>
    <published>2018-11-19T14:14:34.000Z</published>
    <updated>2019-08-27T09:05:47.593Z</updated>
    
    <content type="html"><![CDATA[<p><strong>React</strong> 主要用于单页面应用程序。</p><p>Y然而，你可以将React库集成到任何使用 <strong>webpack</strong>和<strong>Babel</strong>构建的网站中。</p><p><img src="/img/react/webpack4-react-babel.png" alt="react webpack babel"></p><a id="more"></a><h2><span id="how-to-set-up-react-webpack-and-babel-what-you-will-learn">How to set up React, Webpack, and Babel: What you will learn</span></h2><ol><li>如何安装和配置webpack</li><li>如何安装和配置Babel</li><li>如何安装React</li><li>如何按照<code>Container / Presentational</code>组件的原则创建两个React组件</li><li>如何将生成的包包含到HTML页面</li><li>如何安装和配置Webpack Dev Server</li></ol><p>React不仅限于SPA应用。可以将库集成到任何现有网站中。</p><p>可以通过CDN或模块包引入React。</p><p>对于我的大多数项目，我都使用Webpack：将React和Webpack结合起来很容易。</p><p>您也可以按下下面几分钟的教程与Webpack4工作。</p><h2><span id="how-to-set-up-react-webpack-and-babel-setting-up-the-project">How to set up React, Webpack, and Babel: Setting up the project</span></h2><p>首先为项目创建一个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-react-tutorial &amp;&amp; cd webpack-react-tutorial</span><br></pre></td></tr></table></figure><p>创建一个用于保存代码的最小目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src</span><br></pre></td></tr></table></figure><p>通过运行来启动项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>就是这么简单，项目建立完成！</p><h2><span id="how-to-set-up-react-webpack-and-babel-setting-up-webpack">How to set up React, Webpack, and Babel: Setting up webpack</span></h2><p><strong>Webpack</strong> 是现代Web开发的支柱之一。这是一个非常强大的工具。</p><p>了解如何使用webpack是使用React的基础。</p><p>webpack提取原始的React组件，用于生成(几乎)每个浏览器都能运行的JavaScript代码。</p><p>让我们通过运行以下命令来安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack --save-dev</span><br></pre></td></tr></table></figure><p>你还需要webpack-cli，将其加入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>接下来将<code>webpack</code>命令加入到<code>package.json</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">"build": "webpack --mode production"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，不需要为webpack定义配置文件。</p><p>较旧的webpack版本会自动查找配置文件。</p><p>自版本4开始，你可以直接开发。</p><p>下一小节，我们将安装和配置Babel以便转换我们的代码。</p><h2><span id="how-to-set-up-react-webpack-and-babel-setting-up-babel">How to set up React, Webpack, and Babel: Setting up Babel</span></h2><p>React components(组件)大多是用JavaScript ES6编写的。</p><p>由于浏览器无法理解React组件，因此需要进行某种转换。</p><p>Webpack不知道如何进行转换，但它具有loaders(加载器)的概念：将它们视为转换器。</p><p>Webpack loaders(加载器)将某些内容作为输入并生成其他内容作为输出。</p><p>babel-loader是Webpack加载器，负责接收ES6代码并使其可以让所选择的浏览器理解。</p><p>很明显 babel-load使用Babel。并且Babel必须配置为使用一组预设：</p><p>babel-preset-env用于将JavaScript ES6代码编译为ES5(请注意，babel-preset-es2015现已弃用)</p><p>babel-preset-react用于将JSX和其它东西编译到JavaScript</p><p>让我们用以下命令引入依赖关系：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader babel-core babel-preset-env babel-preset-react --save-dev</span><br></pre></td></tr></table></figure><p>别忘了配置Babel！在项目文件夹中创建一个名为<code>.babelrc</code>的新文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [&quot;env&quot;, &quot;react&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们已准备好定义最小的webpack配置。</p><p>创建一个名为<code>webpack.config.js</code>的文件，写入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">  loader: <span class="string">"babel-loader"</span></span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置非常简单。</p><p>对于每个扩展名为<code>.js</code>的文件，webpack都会通过babel-loader来管理代码，将ES6转换为ES5.</p><p>有了这个，我们就可以编写我们的React组件了。</p><p>让我们来看看下一节。</p><h2><span id="how-to-set-up-react-webpack-and-babel-writing-react-components">How to set up React, webpack, and Babel: writing React components</span></h2><p>我喜欢按照容器(Container)组件/展示(Presentational)组件的原则编写我的React组件。</p><p>我建议看看Dan Abramov的 <a href="https://medium.com/@learnreact/container-components-c0e67432e005" target="_blank" rel="noopener">container components</a> 和 <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0" target="_blank" rel="noopener">smart and dumb components</a>，以了解更多信息。</p><p>简而言之，容器组件/展示组件原则是React组件的模式。</p><p>容器组件是承载所有逻辑的容器组件：用于处理state(状态)更改，内部组件state(状态)等的功能。</p><p>相反，展示组件仅用于显示所需的HTML标记。展示组件通常是普通的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>，并从容器组件接受数据作为 <a href="https://reactjs.org/docs/components-and-props.html" target="_blank" rel="noopener">props(属性)</a>。</p><p>你将在以下示例中看到它们的样子。</p><p>对于这片文章的范围，我想构建一个带有单个文本输入的超级简单的React表单。</p><p>在接触任何代码之前，让我们通过运行以下命令来引入React：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom --save-dev</span><br></pre></td></tr></table></figure><p>然后创建一个用于组织组件的最小目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/components/&#123;container,presentational&#125;</span><br></pre></td></tr></table></figure><p>接下来让我们创建一个容器组件：</p><ul><li>有自己的state(状态)</li><li>渲染HTML表单</li></ul><p>在<code>src/js/components/container/</code>中创建组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/js/components/container/ForContainer.js</span><br></pre></td></tr></table></figure><p>该组件将如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      title: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form id=<span class="string">"article-form"</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default FormContainer;</span></span><br></pre></td></tr></table></figure><p>该组件刺客没什么内容和交互。它只是一个包装组件的骨架。</p><p>事实上，如果一个容器组件不包含展示子组件的话，那么这个容器组件几乎是无用的。</p><p>我们来解决这个问题。</p><p>在<code>src/js/components/presentational/</code>中创建一个新组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch src/js/components/presentational/Input.js</span><br></pre></td></tr></table></figure><p>我们的第一个表示性的React组件将是文本输入框。我们知道HTML input具有以下属性：</p><ul><li>type</li><li>class</li><li>id</li><li>value</li><li>required</li></ul><p>所有这些都将成为容器组件传递给其展示子组件的props(属性)。</p><p>由于Input保持自己的state(状态)，我们必须确保React会处理它。HTML input成为一个React中的受控组件。</p><p>说到props(属性)，最好使用Prop Types记录你的React组件。</p><p>通过运行以下命令来安装prop-types包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i prop-types --save-dev</span><br></pre></td></tr></table></figure><p>回到React，HTML Input展示组件如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">"prop-types"</span>;</span><br><span class="line"><span class="keyword">const</span> Input = <span class="function">(<span class="params">&#123; label, text, type, id, value, handleChange &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"form-group"</span>&gt;</span><br><span class="line">    &lt;label htmlFor=&#123;label&#125;&gt;&#123;text&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input</span></span><br><span class="line"><span class="regexp">      type=&#123;type&#125;</span></span><br><span class="line"><span class="regexp">      className="form-control"</span></span><br><span class="line"><span class="regexp">      id=&#123;id&#125;</span></span><br><span class="line"><span class="regexp">      value=&#123;value&#125;</span></span><br><span class="line"><span class="regexp">      onChange=&#123;handleChange&#125;</span></span><br><span class="line"><span class="regexp">      required</span></span><br><span class="line"><span class="regexp">    /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">Input.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  label: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="regexp">  text: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="regexp">  type: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="regexp">  id: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="regexp">  value: PropTypes.string.isRequired,</span></span><br><span class="line"><span class="regexp">  handleChange: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">export default Input;</span></span><br></pre></td></tr></table></figure><p>此时，我们就可以更新容器组件，以包含文本输入框，即 Input 展示组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Input <span class="keyword">from</span> <span class="string">"../presentational/Input"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormContainer</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      seo_title: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; [event.target.id]: event.target.value &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; seo_title &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form id=<span class="string">"article-form"</span>&gt;</span><br><span class="line">        &lt;Input</span><br><span class="line">          text=<span class="string">"SEO title"</span></span><br><span class="line">          label=<span class="string">"seo_title"</span></span><br><span class="line">          type=<span class="string">"text"</span></span><br><span class="line">          id=<span class="string">"seo_title"</span></span><br><span class="line">          value=&#123;seo_title&#125;</span><br><span class="line">          handleChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default FormContainer;</span></span><br></pre></td></tr></table></figure><p>是时候把所有这些东西联系起来了。</p><p>Webpack期望 entry point(入口点)为 <code>./src/index.js</code></p><p>创建 <code>./src/index.js</code>，并使用<code>import</code>指令将容器组件引入其中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FormContainer <span class="keyword">from</span> <span class="string">"./js/components/container/FormContainer"</span>;</span><br></pre></td></tr></table></figure><p>有了这个，我们就可以通过运行以下命令来创建我们的包了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>给Webpack一秒钟，看看bundle(包)就生产了！</p><p>bundle(包)将被放入 <code>./dist/main.js</code>。</p><p>现在让我们通过将bundle(包)包含在HTML页面中来实现我们的React实战。</p><p>如何使用webpack 4和 Babel 构建 React 应用：HTML webpack插件 (html-webpack-plugin，html-loader)</p><p>要显示我们的 React 表单，我们必须告诉 webpack生产一个HTML页面。生产的 bundle(包)将放在 <code>&lt;script&gt;&lt;/script&gt;</code>标签内。</p><p>webpack需要两个额外的组件来处理HTML： html-webpack-plugin 和 html-loader。</p><p>通过以下命令添加依赖项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin html-loader --save-dev</span><br></pre></td></tr></table></figure><p>然后更新webpack配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebPackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"html-loader"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebPackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">      filename: <span class="string">"./index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来<code>./src/index.html</code>中创建一个HTML文件(可以随意使用你喜欢的CSS库)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>How to set up React, Webpack, and Babel<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row mt-5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 offset-md-1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>Create a new article<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"create-article-form"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- form --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还剩下最后一件事！我们必须告诉我们React组件将自己渲染到 <code>&lt;div id=&quot;create-article-form&quot;&gt;&lt;/div&gt;</code>标签中。</p><p>打开<code>./src/js/components/container/FormContainer.js</code>并在文件底板添加以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wrapper = <span class="built_in">document</span>.getElementById(<span class="string">"create-article-form"</span>);</span><br><span class="line">wrapper ? ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">FormContainer</span> /&gt;</span>, wrapper) : false;</span></span><br></pre></td></tr></table></figure><p>关闭并保存文件。</p><p>现在再次运行构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>并查看 <code>./dist</code> 文件夹。 你应该看到生成的HTML。</p><p>使用webpack，无需在HTML文件中包含你的JavaScript：bundle(包)将自动注入页面。</p><p>在浏览器中打开<code>./dist/index.html</code>：你应该可以看到React表单了。</p><h2><span id="how-to-set-up-react-webpack-and-babel-webpack-dev-server">How to set up React, webpack, and Babel: webpack dev server</span></h2><p>每次更改文件时，你应该不希望每次都需要键入 <code>npm run build</code>来重新构建项目。</p><p>只需3行配置即可启动并运行开发服务器。</p><p>配置后，webpack将在浏览器中启动你的应用程序。</p><p>此外，每次在修改后保存文件时，webpack dev server都会自动刷新浏览器的窗口。</p><p>要设置webpack dev server，请先通过以下命令安装包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><p>打开 <code>package.json</code>添加启动脚本：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --open --mode development",</span><br><span class="line">  "build": "webpack"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>现在执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>webpack dev server会为每个更新的文件自动刷新浏览器窗口。</p><p><img src="/img/react/react-webpack-babel-webpack-dev-server.png" alt="webpack dev server"></p><h2><span id="how-to-set-up-react-webpack-and-babel-wrapping-up">How to set up React, webpack, and Babel: wrapping up</span></h2><p>React主要用于创建单页面应用程序。但它也可以适用于任何网站。</p><p>通过组合webpack 和 Babel，可以将一堆 React组件转换为适合分发的 bundle(包).</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; 主要用于单页面应用程序。&lt;/p&gt;
&lt;p&gt;Y然而，你可以将React库集成到任何使用 &lt;strong&gt;webpack&lt;/strong&gt;和&lt;strong&gt;Babel&lt;/strong&gt;构建的网站中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react/webpack4-react-babel.png&quot; alt=&quot;react webpack babel&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>How to Deploy a MongoDB Sharded Cluster on CentOS 7</title>
    <link href="http://galudisu.info/2018/10/31/mongo/deploying-mongodb-shared-cluster-on-centos-7/"/>
    <id>http://galudisu.info/2018/10/31/mongo/deploying-mongodb-shared-cluster-on-centos-7/</id>
    <published>2018-10-31T11:44:13.000Z</published>
    <updated>2019-08-27T09:05:47.541Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Sharding</strong> is a MongoDB process to store data-set across different machines. It allows you to perform a horizontal scale of data and to partition all data across independent instances. Sharding allows you to add more machines based on data growth to your stack.</p><a id="more"></a><h2><span id="sharding-and-replication">Sharding and Replication</span></h2><p>Let’s make it simple. When you have collections of music, <code>Sharding</code> will save and keep your music collections in diferent folders on different instances or replica sets while <code>Replication</code> is just syncing your music collections to other instances.</p><h2><span id="threee-sharding-components">Threee Sharding Components</span></h2><ul><li><strong>Shard</strong> Used to store all data. And in a production environment, each shard is replica sets. Provides high-availability and data consistency.</li><li><strong>Config Server</strong> Used to store cluster metadata, and contains a mapping of cluster data set and shards. This data is used by mongos/query server to deliver operations. It’s recommended to use more than 3 instances in production.</li><li><strong>Mongos/Query Router</strong> This is just mongo instances runing as application interfaces. The application will make requests to the <code>mongos</code> instance, and then <code>mongos</code> will deliver the requests using shard key to the shards replica sets.</li></ul><h2><span id="prerequisites">Prerequisites</span></h2><ul><li>2 centOS 7 server as Config Replica Sets</li><li>10.0.15.31      configsvr1</li><li>10.0.15.32      configsvr2</li><li>4 CentOS 7 server as Shard Replica Sets</li><li>10.0.15.21      shardsvr1</li><li>10.0.15.22      shardsvr2</li><li>10.0.15.23      shardsvr3</li><li>10.0.15.24      shardsvr4</li><li>1 CentOS 7 server as mongos/Query Router</li><li>10.0.15.11       mongos</li><li>Root privileges</li><li>Each server connected to another server</li></ul><h2><span id="step-1-disable-selinux-and-configure-hosts">Step 1 - Disable SELinux and Configure Hosts</span></h2><p>In this tutorial, we will disable SELinux. Change SELinux configuration from ‘enforcing’ to ‘disabled’.</p><p>Connect to all nodes through OpenSSH.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@SERVERIP</span><br></pre></td></tr></table></figure><p>Disable SELinux by editing the configuration file.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure><p>Change SELINUX value to ‘disabled’.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p>Save and exit.</p><p>Next, edit the hosts file on each server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>Paste the following hosts configuration:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10.0.15.31      configsvr1</span><br><span class="line">10.0.15.32      configsvr2</span><br><span class="line">10.0.15.11      mongos</span><br><span class="line">10.0.15.21      shardsvr1</span><br><span class="line">10.0.15.22      shardsvr2</span><br><span class="line">10.0.15.23      shardsvr3</span><br><span class="line">10.0.15.24      shardsvr4</span><br></pre></td></tr></table></figure><p>Save and exit.</p><p>Now restart all servers using the reboot command.</p><p>reboot</p><h2><span id="step-2-install-mongodb-on-all-instances">Step 2 - Install MongoDB on all instances</span></h2><p>We will use the latest MongoDB version (3.4) for all instances. Add new MongoDB repository by executing the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;'EOF' &gt;&gt; /etc/yum.repos.d/mongodb.repo</span><br><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>Now install MongoDB 3.4 from mongodb repository using the following yum command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install mongodb-org</span><br></pre></td></tr></table></figure><p>After mongodb is installed, you can use the ‘mongo’ or ‘mongod’ command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --version</span><br></pre></td></tr></table></figure><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/1.png" alt="mongod"></p><h2><span id="step-3-create-config-server-replica-set">Step 3 - Create Config Server Replica Set</span></h2><p>In the ‘prerequisites’ section, we’ve already defined config server with 2 machines ‘configsvr1’ and ‘configsvr2’. And in this step, we will configure it to be a replica set.</p><p>If there is a mongod service running on the server, stop it using the systemctl command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mongod</span><br></pre></td></tr></table></figure><p>Edit the default mongodb configuration ‘mongod.conf’ using the Vim editor.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>Change the DB storage path to your own directory. We will use ‘/data/db1’ for the first server, and ‘/data/db2’ directory for the second config server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">   dbPath: /data/db1</span><br></pre></td></tr></table></figure><p>Change the value of the line ‘bindIP’ to your internal network addres - ‘configsvr1’ with IP address 10.0.15.31, and the second server with 10.0.15.32.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindIP: 10.0.15.31</span><br></pre></td></tr></table></figure><p>On the replication section, set a replication name.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replication:</span><br><span class="line">   replSetName: "replconfig01"</span><br></pre></td></tr></table></figure><p>And under sharding section, define a role of the instances. We will use these two instances as ‘configsvr’.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sharding:</span><br><span class="line">   clusterRole: configsvr</span><br></pre></td></tr></table></figure><p>Save and exit.</p><p>Next, we must create a new directory for MongoDB data, and then change the owner of that directory to ‘mongod’ user.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db1</span><br><span class="line">chown -R mongod:mongod /data/db1</span><br></pre></td></tr></table></figure><p>After this, start the mongod service with the command below.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>You can use the netstat command to check whether or not the mongod service is running on port 27017.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -plntu</span><br></pre></td></tr></table></figure><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/2.png" alt="Configure MongoDB"></p><p>Configsvr1 and Configsvr2 are ready for the replica set. Connect to the ‘configsvr1’ server and access the mongo shell.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@configsvr1</span><br><span class="line">mongo --host configsvr1 --port 27017</span><br></pre></td></tr></table></figure><p>Initiate the replica set name with all configsvr member using the query below.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate(</span><br><span class="line">  &#123;</span><br><span class="line">    _id: "replconfig01",</span><br><span class="line">    configsvr: true,</span><br><span class="line">    members: [</span><br><span class="line">      &#123; _id : 0, host : "configsvr1:27017" &#125;,</span><br><span class="line">      &#123; _id : 1, host : "configsvr2:27017" &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>If you get a results <code>{ &quot;ok&quot; : 1 }</code>, it means the configsvr is already configured with replica set.</p><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/3.png" alt="Initiate the replica set name"></p><p>and you will be able to see which node is master and which node is secondary.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs.isMaster()</span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/4.png" alt="see which node is master and which node is secondary"></p><p>The configuration of Config Server Replica Set is done.</p><h2><span id="step-4-create-the-shard-replica-sets">Step 4 - Create the Shard Replica Sets</span></h2><p>In this step, we will configure 4 ‘centos 7’ servers as ‘Shard’ server with 2 ‘Replica Set’.</p><ul><li>2 server - ‘shardsvr1’ and ‘shardsvr2’ with replica set name: ‘shardreplica01’</li><li>2 server - ‘shardsvr3’ and ‘shardsvr4’ with replica set name: 'shardreplica02’<br>Connect to each server, stop the mongod service (If there is service running), and edit the MongoDB configuration file.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mongod</span><br><span class="line">vim /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>Change the default storage to your specific directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">storage:</span><br><span class="line">   dbPath: /data/db1</span><br></pre></td></tr></table></figure><p>On the ‘bindIP’ line, change the value to use your internal network address.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindIP: 10.0.15.21</span><br></pre></td></tr></table></figure><p>On the replication section, you can use ‘shardreplica01’ for the first and second instances. And use ‘shardreplica02’ for the third and fourth shard servers.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replication:</span><br><span class="line">   replSetName: "shardreplica01"</span><br></pre></td></tr></table></figure><p>Next, define the role of the server. We will use all this as shardsvr instances.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sharding:</span><br><span class="line">   clusterRole: shardsvr</span><br></pre></td></tr></table></figure><p>Save and exit.</p><p>Now, create a new directory for MongoDB data.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/db1</span><br><span class="line">chown -R mongod:mongod /data/db1</span><br></pre></td></tr></table></figure><p>Start the mongod service.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /etc/mongod.conf</span><br></pre></td></tr></table></figure><p>Check MongoDB is running using the following command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -plntu</span><br></pre></td></tr></table></figure><p>You will see MongoDB is running on the local network address.</p><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/5.png" alt="MongoDB is running on the local network address"></p><p>Next, create a new replica set for these 2 shard instances. Connect to the ‘shardsvr1’ and access the mongo shell.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@shardsvr1</span><br><span class="line">mongo --host shardsvr1 --port 27017</span><br></pre></td></tr></table></figure><p>Initiate the replica set with the name ‘shardreplica01’, and the members are ‘shardsvr1’ and ‘shardsvr2’.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate(</span><br><span class="line">   &#123;</span><br><span class="line">     _id : "shardreplica01",</span><br><span class="line">     members: [</span><br><span class="line">       &#123; _id : 0, host : "shardsvr1:27017" &#125;,</span><br><span class="line">       &#123; _id : 1, host : "shardsvr2:27017" &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><p>If there is no error, you will see results as below.</p><p>Results from <strong>shardsvr3</strong> and <strong>shardsvr4</strong> with replica set name <code>shardreplica02</code>.</p><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/6.png" alt="Results from shardsvr3 and shardsvr4 with replica set name 'shardreplica02'."></p><p>Redo this step for <strong>shardsvr3</strong> and <strong>shardsvr4</strong> servers with different replica set name <code>shardreplica02</code>.</p><p>Now we’ve created 2 replica sets - <code>shardreplica01</code> and <code>shardreplica02</code> - as the shard.</p><h2><span id="step-5-configure-mongosquery-router">Step 5 - Configure mongos/Query Router</span></h2><p>The ‘Query Router’ or mongos is just instances that run ‘mongos’. You can run mongos with the configuration file, or run with just a command line.</p><p>Login to the mongos server and stop the MongoDB service.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@mongos  </span><br><span class="line">systemctl stop mongod</span><br></pre></td></tr></table></figure><p>Run mongos with the command line as shown below.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongos --configdb "replconfig01/configsvr1:27017,configsvr2:27017"</span><br></pre></td></tr></table></figure><p>Use the ‘–configdb’ option to define the config server. If you are on production, use at least 3 config servers.</p><p>You should see results similar to the following.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Successfully connected to configsvr1:27017</span><br><span class="line">Successfully connected to configsvr2:27017</span><br></pre></td></tr></table></figure><p>mongos instances are running.</p><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/7.png" alt="Configure mongos/Query Router"></p><h2><span id="step-6-add-shards-to-mongosquery-router">Step 6 - Add shards to mongos/Query Router</span></h2><p>Open another shell from the previous step, connect to the mongos server again, and access the mongo shell.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@mongos</span><br><span class="line">mongo --host mongos --port 27017</span><br></pre></td></tr></table></figure><p>Add shard server with the sh mongodb query.</p><p>For <code>shardreplica01</code> instances:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh.addShard( "shardreplica01/shardsvr1:27017")</span><br><span class="line">sh.addShard( "shardreplica01/shardsvr2:27017")</span><br></pre></td></tr></table></figure><p>For <code>shardreplica02</code> instances:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh.addShard( "shardreplica02/shardsvr3:27017")</span><br><span class="line">sh.addShard( "shardreplica02/shardsvr4:27017")</span><br></pre></td></tr></table></figure><p>Make sure there is no error and check the shard status.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh.status()</span><br></pre></td></tr></table></figure><p>You will see sharding status similar to the way what the following screenshot shows.</p><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/8.png" alt="Add shards to mongos/Query Router"></p><p>We have 2 shard replica set and 1 mongos instance running on our stack.</p><h2><span id="step-7-testing">Step 7 - Testing</span></h2><p>To test the setup, access the mongos server mongo shell.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@mongos</span><br><span class="line">mongo --host mongos --port 27017</span><br></pre></td></tr></table></figure><p><strong>Enable Sharding for a Database</strong></p><p>Create a new database and enable sharding for the new database.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use lemp</span><br><span class="line">sh.enableSharding("lemp")</span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/9.png" alt="Enable Sharding for a Database"></p><p>Now see the status of the database, it’s has been partitioned to the replica set ‘shardreplica01’.</p><p><strong>Enable Sharding for Collections</strong></p><p>Next, add new collections to the database with sharding support. We will add new collection named ‘stack’ with shard collection ‘name’, and then see database and collections status.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh.shardCollection("lemp.stack", &#123;"name":1&#125;)</span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/10.png" alt="Enable Sharding for Collections"></p><p>New collections ‘stack’ with shard collection ‘name’ has been added.</p><p><strong>Add documents to the collections ‘stack’.</strong></p><p>Now insert the documents to the collections. When we add documents to the collection on sharded cluster, we must include the ‘shard key’.</p><p>In the example below, we are using shard key ‘name’, as we added when enabling sharding for collections.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.stack.save(&#123;</span><br><span class="line">    "name": "LEMP Stack",</span><br><span class="line">    "apps": ["Linux", "Nginx", "MySQL", "PHP"],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>As shown in the following screenshots, documents have been successfully added to the collection.</p><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/11.png" alt="Add documents to the collections 'stack'."></p><p>If you want to test the database, you can connect to the replica set <code>shardreplica01</code> PRIMARY server and open the mongo shell. I’m logging in to the ‘shardsvr2’ PRIMARY server.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@shardsvr2</span><br><span class="line">mongo --host shardsvr2 --port 27017</span><br></pre></td></tr></table></figure><p>Check database available on the replica set.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br><span class="line">use lemp</span><br><span class="line">db.stack.find()</span><br></pre></td></tr></table></figure><p>You will see that the database, collections, and documents are available in the replica set.</p><p><img src="https://www.howtoforge.com/images/deploying_mongodb_sharded_cluster_on_centos_7/big/12.png" alt="MongoDB Sharded Cluster on CentOS 7 has been successfully installed and deployed."></p><p>MongoDB Sharded Cluster on CentOS 7 has been successfully installed and deployed.</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.howtoforge.com/tutorial/deploying-mongodb-sharded-cluster-on-centos-7/" target="_blank" rel="noopener">https://www.howtoforge.com/tutorial/deploying-mongodb-sharded-cluster-on-centos-7/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Sharding&lt;/strong&gt; is a MongoDB process to store data-set across different machines. It allows you to perform a horizontal scale of data and to partition all data across independent instances. Sharding allows you to add more machines based on data growth to your stack.&lt;/p&gt;
    
    </summary>
    
    
      <category term="mongo" scheme="http://galudisu.info/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB分片集群搭建</title>
    <link href="http://galudisu.info/2018/10/31/mongo/mongo-cluster-sharding/"/>
    <id>http://galudisu.info/2018/10/31/mongo/mongo-cluster-sharding/</id>
    <published>2018-10-30T16:44:13.000Z</published>
    <updated>2019-08-27T09:05:47.543Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="环境">环境</span></h2><ul><li><p>CentOS 7.5</p></li><li><p>MongoDB 4.0.1</p></li><li><p>shard分片主机：</p><ul><li>shard1：IP：192.168.50.211</li><li>shard2：IP：192.168.50.212</li><li>shard3：IP：192.168.50.213<br>三台主机分别启动三个mongod实例：<ul><li>mongod1：端口：27017</li><li>mongod2：端口：27018</li><li>mongod3：端口：27019</li></ul></li></ul></li><li><p>configsrv主机：</p><ul><li>IP：192.168.50.214<ul><li>mongod1：端口：27019</li><li>mongod2：端口：37018</li><li>mongod3：端口：47019</li></ul></li></ul></li><li><p>route主机：192.168.50.215</p><ul><li>mongods：端口：27017</li></ul></li></ul><h2><span id="准备工作">准备工作</span></h2><ol><li>在所有节点安装mongodb-4 并创建相关文件夹</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; /etc/yum.repos.d/mongodb.repo</span><br><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB 4.0 Repository</span><br><span class="line">baseurl=https://mirrors.aliyun.com/mongodb/yum/redhat/\$releasever/mongodb-org/4.0/\$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum install -y mongodb-org</span><br><span class="line"></span><br><span class="line">mkdir -p /var/run/mongodb</span><br><span class="line">mkdir -p /data/mongod&#123;1..3&#125;</span><br><span class="line">mkdir -p /etc/mongo</span><br><span class="line">mkdir -p /tmp/mongod&#123;1..3&#125;</span><br><span class="line"></span><br><span class="line">chown -R mongod.mongod /data</span><br><span class="line">chown -R mongod.mongod /var/run/mongodb</span><br><span class="line">chown -R mongod.mongod /tmp/mongod&#123;1..3&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>生成key并复制至所有主机</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在192.168.50.211主机执行</span></span><br><span class="line"></span><br><span class="line">openssl rand -base64 756 &gt; /etc/mongo/mongo.key</span><br><span class="line">chown -R mongod.mongod /etc/mongo</span><br><span class="line">chmod -R 600 /etc/mongo</span><br><span class="line"></span><br><span class="line">scp -r /etc/mongo 192.168.50.212:/etc/</span><br><span class="line">scp -r /etc/mongo 192.168.50.213:/etc/</span><br><span class="line">scp -r /etc/mongo 192.168.50.214:/etc/</span><br><span class="line">scp -r /etc/mongo 192.168.50.215:/etc/</span><br></pre></td></tr></table></figure><h2><span id="配置configsvr">配置configsvr</span></h2><ol><li>在configsvr主机(IP：192.168.50.214)操作</li><li>生成三个configsvr的配置文件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">configsvr1的配置文件</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/configsvc1.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod1.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod1</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod1.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27019</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod1</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: BigBoss</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: configsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">configsvr2的配置文件</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/configsvc2.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod2.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod2</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true</span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod2.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line">net:</span><br><span class="line">  port: 37019</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod2</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: BigBoss</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: configsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">configsvr3的配置文件</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/configsvc3.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod3.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod3</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod3.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 47019</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod3</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: BigBoss</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: configsvr</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="3"><li>启动mongod：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /etc/mongo/configsvc1.conf</span><br><span class="line">mongod -f /etc/mongo/configsvc2.conf</span><br><span class="line">mongod -f /etc/mongo/configsvc3.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化configsrv副本集群</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27019</span><br><span class="line"></span><br><span class="line">rs.initiate(</span><br><span class="line">&#123;</span><br><span class="line">  _id: "BigBoss",</span><br><span class="line">  version: 1,</span><br><span class="line">  protocolVersion: 1,</span><br><span class="line">  writeConcernMajorityJournalDefault: true,</span><br><span class="line">  configsvr: true,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 0,</span><br><span class="line">      host: "192.168.50.214:27019",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 66,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "YES"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 1,</span><br><span class="line">      host: "192.168.50.214:37019",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 55,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 2,</span><br><span class="line">      host: "192.168.50.214:47019",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 33,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    chainingAllowed : true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看副本集状态</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure><h2><span id="配置shard1副本集">配置shard1副本集</span></h2><ol><li>在shard1主机(IP：192.68.50.211)操作</li><li>生成三个mongod的配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">mongod1.conf配置文件:</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod1.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod1.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod1</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod1.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod1</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard1</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mongod2.conf配置文件:</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod2.conf</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod2.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod2</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod2.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27018</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod2</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard1</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mongod3.conf配置文件:</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod3.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod3.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod3</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod3.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27019</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod3</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard1</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="3"><li>启动mongod</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /etc/mongo/mongod1.conf</span><br><span class="line">mongod -f /etc/mongo/mongod2.conf</span><br><span class="line">mongod -f /etc/mongo/mongod3.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化shard1副本集</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line"></span><br><span class="line">rs.initiate(</span><br><span class="line">&#123;</span><br><span class="line">  _id: "shard1",</span><br><span class="line">  version: 1,</span><br><span class="line">  protocolVersion: 1,</span><br><span class="line">  writeConcernMajorityJournalDefault: true,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 0,</span><br><span class="line">      host: "192.168.50.211:27017",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 66,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "YES"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 1,</span><br><span class="line">      host: "192.168.50.211:27018",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 55,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 2,</span><br><span class="line">      host: "192.168.50.211:27019",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 33,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    chainingAllowed : true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看副本集状态</span></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure><h2><span id="配置shard2副本集">配置shard2副本集</span></h2><ol><li>在shard2主机(IP：192.168.50.212)操作</li><li>生成三个mongod的配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">mongod1.conf配置文件:</span></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod1.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod1.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod1</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod1.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod1</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard2</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mongod2.conf配置文件:</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod2.conf</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod2.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod2</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod2.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27018</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod2</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard2</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mongod3.conf配置文件:</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod3.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod3.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod3</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod3.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27019</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod3</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard2</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="3"><li>启动mongod</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /etc/mongo/mongod1.conf</span><br><span class="line">mongod -f /etc/mongo/mongod2.conf</span><br><span class="line">mongod -f /etc/mongo/mongod3.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化shard2副本集</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line"></span><br><span class="line">rs.initiate(</span><br><span class="line">&#123;</span><br><span class="line">  _id: "shard2",</span><br><span class="line">  version: 1,</span><br><span class="line">  protocolVersion: 1,</span><br><span class="line">  writeConcernMajorityJournalDefault: true,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 0,</span><br><span class="line">      host: "192.168.50.212:27017",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 66,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "YES"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 1,</span><br><span class="line">      host: "192.168.50.212:27018",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 55,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 2,</span><br><span class="line">      host: "192.168.50.212:27019",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 33,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    chainingAllowed : true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看shard2副本集状态</span></span><br><span class="line"></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure><h2><span id="配置shard3副本集">配置shard3副本集</span></h2><ol><li>在shard3主机(IP：192.168.50.203)操作</li><li>生成三个mongod的配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">mongod1.conf配置文件:</span></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod1.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod1.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod1</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod1.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod1</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard3</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mongod2.conf配置文件:</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod2.conf</span><br><span class="line"></span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod2.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod2</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod2.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27018</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod2</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard3</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">mongod3.conf配置文件:</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/mongod3.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod3.log</span><br><span class="line"></span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/mongod3</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      directoryForIndexes: true     </span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod3.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  port: 27019</span><br><span class="line"><span class="meta">  #</span><span class="bash">bindIp: 0.0.0.0  <span class="comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span></span></span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp/mongod3</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line">  authorization: enabled</span><br><span class="line"></span><br><span class="line">replication:</span><br><span class="line">  replSetName: shard3</span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="3"><li>启动mongod</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /etc/mongo/mongod1.conf</span><br><span class="line">mongod -f /etc/mongo/mongod2.conf</span><br><span class="line">mongod -f /etc/mongo/mongod3.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>初始化shard3副本集</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line"></span><br><span class="line">rs.initiate(</span><br><span class="line">&#123;</span><br><span class="line">  _id: "shard3",</span><br><span class="line">  version: 1,</span><br><span class="line">  protocolVersion: 1,</span><br><span class="line">  writeConcernMajorityJournalDefault: true,</span><br><span class="line">  members: [</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 0,</span><br><span class="line">      host: "192.168.50.213:27017",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 66,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "YES"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 1,</span><br><span class="line">      host: "192.168.50.213:27018",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 55,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      _id: 2,</span><br><span class="line">      host: "192.168.50.213:27019",</span><br><span class="line">      arbiterOnly: false,</span><br><span class="line">      buildIndexes: true,</span><br><span class="line">      hidden: false,</span><br><span class="line">      priority: 33,</span><br><span class="line">      tags: &#123;</span><br><span class="line">        BigBoss: "NO"</span><br><span class="line">      &#125;,</span><br><span class="line">      slaveDelay: 0,</span><br><span class="line">      votes: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    chainingAllowed : true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看shard3副本集状态</span></span><br><span class="line"></span><br><span class="line">rs.status()</span><br></pre></td></tr></table></figure><h2><span id="配置route">配置route</span></h2><ol><li>创建mongos配置文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">route是无状态的，在任何一台主机启动都行，只要能够连接至configsrv即可</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF &gt; /etc/mongo/route.conf</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: /var/log/mongodb/mongod.log</span><br><span class="line"></span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line">net:</span><br><span class="line">  bindIpAll: true</span><br><span class="line">  maxIncomingConnections: 500</span><br><span class="line">  unixDomainSocket:</span><br><span class="line">    enabled: true</span><br><span class="line">    pathPrefix: /tmp</span><br><span class="line">    filePermissions: 0700</span><br><span class="line"></span><br><span class="line">security:</span><br><span class="line">  keyFile: /etc/mongo/mongo.key</span><br><span class="line"><span class="meta">#</span><span class="bash">  authorization: enabled</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">replication:</span></span><br><span class="line"></span><br><span class="line">sharding:</span><br><span class="line">  configDB: BigBoss/192.168.50.214:27019,192.168.50.214:37019,192.168.50.214:47019</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="2"><li>启动mongos并设置一个连接的账号密码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">mongos -f /etc/mongo/route.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">连接</span></span><br><span class="line">mongo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置管理员账号密码</span></span><br><span class="line">use admin</span><br><span class="line"></span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user: "root",</span><br><span class="line">    pwd: "123456",</span><br><span class="line">    roles: [ &#123; role: "__system", db: "admin" &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ol start="3"><li>重连至mongodb</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mongo -uroot -p123456  --authenticationDatabase admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加分片主机至集群中</span></span><br><span class="line">sh.addShard("shard1/192.168.50.211:27017,192.168.50.211:27018,192.168.50.211:27019")</span><br><span class="line">sh.addShard("shard2/192.168.50.212:27017,192.168.50.212:27018,192.168.50.212:27019")</span><br><span class="line">sh.addShard("shard3/192.168.50.213:27017,192.168.50.213:27018,192.168.50.213:27019")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态</span></span><br><span class="line">sh.status()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###为了展示出效果，修改一下默认的chunksize大小,这里修改为1M</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">默认的chunksize大小为64M，示例修改命令如下：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">use config</span></span><br><span class="line"><span class="meta">#</span><span class="bash">db.settings.save( &#123; _id:<span class="string">"chunksize"</span>, value: &lt;sizeInMB&gt; &#125; )</span></span><br><span class="line"></span><br><span class="line">use config</span><br><span class="line">db.settings.save( &#123; _id:"chunksize", value: 1 &#125; )</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">为<span class="built_in">test</span>数据库开启分片</span></span><br><span class="line"><span class="meta">#</span><span class="bash">选择一个片键age并指定一个集合mycoll对其进行分片</span></span><br><span class="line"></span><br><span class="line">sh.enableSharding("test")</span><br><span class="line">sh.shardCollection("test.mycoll", &#123;"age": 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试分片，写入数据到数据库中</span></span><br><span class="line"></span><br><span class="line">use test</span><br><span class="line">for (i = 1; i &lt;= 10000; i++) db.mycoll.insert(&#123;age:(i%100), name:"bigboss_user"+i, address:i+", Some Road, Zhengzhou, Henan", country:"China", course:"cousre"+"(i%12)"&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">写入完成之后就可以查看分片信息了</span></span><br><span class="line"></span><br><span class="line">sh.status()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;环境&quot;&gt;环境&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CentOS 7.5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB 4.0.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shard分片主机：&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="mongo" scheme="http://galudisu.info/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 搭建Spark2.3.1分布式集群</title>
    <link href="http://galudisu.info/2018/10/26/spark/spark-cluster-config/"/>
    <id>http://galudisu.info/2018/10/26/spark/spark-cluster-config/</id>
    <published>2018-10-26T14:14:34.000Z</published>
    <updated>2019-08-27T09:05:47.639Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="下载安装包">下载安装包</span></h2><ol><li>官方下载</li></ol><p>点击<a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">这里</a>下载，官方提供几种构建方式。为了节省时间，选择预先编译版本的hadoop。</p><ol start="2"><li>安装前提</li></ol><ul><li>JDK8</li><li>ZooKeeper，安装参考这里</li><li>Hadoop，安装参考这里</li><li>Scala</li></ul><p>注意：从Spark2.0版开始，默认使用Scala 2.11构建。Scala 2.10用户应该下载Spark源包并使用<a href="https://spark.apache.org/docs/latest/building-spark.html#building-for-scala-210" target="_blank" rel="noopener">Scala2.10</a>支持构建。</p><ol start="3"><li>集群规划</li></ol><table><thead><tr><th style="text-align:center">节点名称</th><th style="text-align:center">IP</th><th style="text-align:center">ZooKeeper</th><th style="text-align:center">Master</th><th style="text-align:center">Worker</th></tr></thead><tbody><tr><td style="text-align:center">spark-node1</td><td style="text-align:center">192.168.50.200</td><td style="text-align:center">ZooKeeper</td><td style="text-align:center">主Master</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">spark-node2</td><td style="text-align:center">192.168.50.201</td><td style="text-align:center">ZooKeeper</td><td style="text-align:center">备Master</td><td style="text-align:center">Worker</td></tr><tr><td style="text-align:center">spark-node3</td><td style="text-align:center">192.168.50.202</td><td style="text-align:center">ZooKeeper</td><td style="text-align:center"></td><td style="text-align:center">Worker</td></tr></tbody></table><h2><span id="集群安装">集群安装</span></h2><ol><li>解压缩</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ tar zxvf spark-2.3.1-bin-hadoop2.7.tgz -C /opt/</span><br><span class="line">[xxx@spark-node1 ~]$ sudo ln -s /opt/spark-2.31-bin-hadoop2.7 /opt/spark</span><br></pre></td></tr></table></figure><ol start="2"><li>修改配置文件</li></ol><ol><li>进入配置文件所在目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ <span class="built_in">cd</span> /opt/spark/conf/</span><br><span class="line">[xxx@spark-node1 ~]$ ll</span><br><span class="line">total 36K</span><br><span class="line">-rw-rw-r--. 1 galudisu galudisu  996 Jun  1 16:49 docker.properties.template</span><br><span class="line">-rw-rw-r--. 1 galudisu galudisu 1.1K Jun  1 16:49 fairscheduler.xml.template</span><br><span class="line">-rw-rw-r--. 1 galudisu galudisu 2.0K Jun  1 16:49 log4j.properties.template</span><br><span class="line">-rw-rw-r--. 1 galudisu galudisu 7.7K Jun  1 16:49 metrics.properties.template</span><br><span class="line">-rw-rw-r--. 1 galudisu galudisu  865 Jun  1 16:49 slaves.template</span><br><span class="line">-rw-rw-r--. 1 galudisu galudisu 1.3K Jun  1 16:49 spark-defaults.conf.template</span><br><span class="line">-rwxrwxr-x. 1 galudisu galudisu 4.2K Jun  1 16:49 spark-env.sh.template</span><br></pre></td></tr></table></figure><ol start="2"><li>复制<code>spark-env.sh.template</code>并重命名为<code>spark-env.sh</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 conf]$ cp spark-env.sh.template spark-env.sh</span><br><span class="line">[xxx@spark-node1 conf]$ vim spark-env.sh</span><br></pre></td></tr></table></figure><p>编辑并在文件末尾添加如下配置内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定默认master的ip或主机名</span></span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_HOST=node21  </span><br><span class="line"><span class="comment">#指定maaster提交任务的默认端口为7077    </span></span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_PORT=7077 </span><br><span class="line"><span class="comment">#指定masster节点的webui端口       </span></span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_WEBUI_PORT=8080 </span><br><span class="line"><span class="comment">#每个worker从节点能够支配的内存数 </span></span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_MEMORY=1g        </span><br><span class="line"><span class="comment">#允许Spark应用程序在计算机上使用的核心总数（默认值：所有可用核心）</span></span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_CORES=1    </span><br><span class="line"><span class="comment">#每个worker从节点的实例（可选配置） </span></span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_INSTANCES=1   </span><br><span class="line"><span class="comment">#指向包含Hadoop集群的（客户端）配置文件的目录，运行在Yarn上配置此项   </span></span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/opt/module/hadoop-2.7.6/etc/hadoop</span><br><span class="line"><span class="comment">#指定整个集群状态是通过zookeeper来维护的，包括集群恢复</span></span><br><span class="line"><span class="built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="string">"      </span></span><br><span class="line"><span class="string">-Dspark.deploy.recoveryMode=ZOOKEEPER </span></span><br><span class="line"><span class="string">-Dspark.deploy.zookeeper.url=node21:2181,node22:2181,node23:2181</span></span><br><span class="line"><span class="string">-Dspark.deploy.zookeeper.dir=/spark"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>复制<code>slaves.template</code>成<code>slaves</code>，并修改配置内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 conf]$ cp slaves.template slaves</span><br><span class="line">[xxx@spark-node1 conf]$ vim slaves</span><br></pre></td></tr></table></figure><p>修改从节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spark-node2</span><br><span class="line">spark-node3</span><br></pre></td></tr></table></figure><ol start="4"><li>将安装包分发给其它节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 opt]$ scp -r spark-2.31-bin-hadoop2.7 xxx@spark-node2:/opt/</span><br><span class="line">[xxx@spark-node1 opt]$ scp -r spark-2.31-bin-hadoop2.7 xxx@spark-node3:/opt/</span><br></pre></td></tr></table></figure><p>修改spark-node2节点上<code>conf/spark-env.sh</code>配置的MasterIP为<code>SPARK_MASTER_IP=spark-node2</code></p><ol start="3"><li>配置环境变量</li></ol><p>所有节点均要配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 spark]$ sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> SPARK_HOME=/opt/spark</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SPARK_HOME</span>/bin:<span class="variable">$SPARK_HOME</span>/sbin</span><br><span class="line">[xxx@spark-node1 spark]$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2><span id="启动集群">启动集群</span></h2><ol><li>启动ZooKeeper集群</li></ol><p>所有ZooKeeper节点均要执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ zkServer.sh start</span><br></pre></td></tr></table></figure><ol start="2"><li>启动Hadoop集群</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ start-dfs.sh</span><br><span class="line">[xxx@spark-node2 ~]$ start-yarn.sh</span><br><span class="line">[xxx@spark-node3 ~]$ yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure><ol start="3"><li>启动Spark集群</li></ol><p>启动Spark：启动master节点：<code>sbin/start-master.sh</code> 启动worker节点：<code>sbin/start-slaves.sh</code><br>或者：<code>sbin/start-all.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 spark]$ sbin/start-all.sh</span><br></pre></td></tr></table></figure><p>注意：备用master节点需要手动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 spark]$ sbin/start-master.sh</span><br></pre></td></tr></table></figure><ol start="4"><li>查看进程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 spark]$ jps</span><br><span class="line">2368 JobHistoryServer</span><br><span class="line">2928 Jps</span><br><span class="line">2227 DFSZKFailoverController</span><br><span class="line">2533 Master</span><br><span class="line">2006 JournalNode</span><br><span class="line">1512 NodeManager</span><br><span class="line">1610 NameNode</span><br><span class="line">1820 DataNode</span><br><span class="line"></span><br><span class="line">[xxx@spark-node2 spark]$ jps</span><br><span class="line">2256 DFSZKFailoverController</span><br><span class="line">1651 NameNode</span><br><span class="line">2435 Worker</span><br><span class="line">2101 JournalNode</span><br><span class="line">2854 Jps</span><br><span class="line">1576 NodeManager</span><br><span class="line">1209 ResourceManager</span><br><span class="line">1835 DataNode</span><br><span class="line"></span><br><span class="line">[xxx@spark-node3 spark]$ jps</span><br><span class="line">1796 DataNode</span><br><span class="line">2436 Jps</span><br><span class="line">1900 JournalNode</span><br><span class="line">1613 NodeManager</span><br><span class="line">2095 Worker</span><br></pre></td></tr></table></figure><h2><span id="验证集群ha">验证集群HA</span></h2><ol><li>看Web页面Master状态</li></ol><p>spark-node1是ALIVE状态，spark-node2为STANDBY状态，WebUI查看：<a href="http://spark-node1:8080/" target="_blank" rel="noopener">http://spark-node1:8080/</a></p><p><img src="/img/spark/spark-master1.png" alt="spark-master1"><br><img src="/img/spark/spark-master2.png" alt="spark-master2"></p><p>从节点连接地址：<a href="http://spark-node2:8081" target="_blank" rel="noopener">http://spark-node2:8081/</a></p><p><img src="/img/spark/spark-worker1.png" alt="spark-worker1"><br><img src="/img/spark/spark-worker2.png" alt="spark-worker2"></p><ol start="2"><li>验证HA的高可用</li></ol><p>手动干掉spark-node1上面的Master进程，spark-node2:8080将自动切换为ALIVE状态。</p><p><img src="/img/spark/spark-alive.png" alt="spark-alive"></p><ol start="3"><li>HA注意点</li></ol><ul><li>主备切换过程中不能提交Application。</li><li>主备切换过程中不影响已经在集群中运行的Application。因为Spark是粗粒度资源调度。</li></ul><p><img src="/img/spark/spark-ha.png" alt="spark-ha"></p><h2><span id="集群提交命令方式">集群提交命令方式</span></h2><ol><li>Standalone模式</li></ol><h3><span id="standalone-client">Standalone-client</span></h3><ol><li>提交命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 spark]$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark://spark-node1:7077 \</span><br><span class="line">--executor-memory 500m \</span><br><span class="line">--total-executor-cores 1 \</span><br><span class="line">examples/jars/spark-examples_2.11-2.3.1.jar 10</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 spark]$ ./bin/spark-submit --class org.apache.spark.exmaples.SparkPi \</span><br><span class="line">--master spark://spark-node1:7077 \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">--executor-memory 500m \</span><br><span class="line">--total-executor-cores 1 \</span><br><span class="line">examples/jars/spark-examples_2.11-2.3.1.jar 10</span><br></pre></td></tr></table></figure><ol start="2"><li>提交原理图解</li></ol><p><img src="/img/spark/spark-standalone.png" alt="spark-standalone"></p><ol start="3"><li>执行流程</li></ol><ul><li>client模式提交任务后，会在客户端启动Driver进程。</li><li>Driver会向Master申请启动Application启动的资源。</li><li>资源申请成功，Driver端将task发送到worker端执行。</li><li>worker将task执行结果返回到Driver端。</li></ul><ol start="4"><li>总结</li></ol><p>client模式使用于测试调试程序。Driver进程是在客户端启动的，这里的客户端就是指提交应用程序的当前节点。在Driver端可以看到task执行的情况。生产环境下不能使用client模式，是因为：假设要提交100个Application到集群运行，Driver每次都会在client端启动，那么就会导致客户端100次网卡流量暴增的问题。</p><h3><span id="standalone-cluster">Standalone-cluster</span></h3><ol><li>提交命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 spark]$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master spark:spark-node1:7077 \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">examples/jars/spark-examples_2.11-2.3.1.jar 10</span><br></pre></td></tr></table></figure><ol start="2"><li>提交原理图解</li></ol><p><img src="/img/spark/spark-cluster.png" alt="spark-cluster"></p><ol start="3"><li>执行流程</li></ol><ul><li>cluster模式提交应用程序后，会向Master请求启动Driver。</li><li>Master接受请求，随机在集群一台节点启动Driver进程。</li><li>Driver启动后为当前的应用程序申请资源。</li><li>Driver端发送task到worker节点上执行。</li><li>worker将执行情况和执行结果返回给Driver端。</li></ul><ol start="4"><li>总结</li></ol><p>Driver进程是在集群某一台Worker上启动的，在客户端无法查看task的执行情况的。假设要提交100个application到集群运行，每次Driver会随机在集群中某一台Worker上启动，那么这100次网卡流量暴增的问题就散步在集群上。</p><ol start="2"><li>Yarn模式</li></ol><h3><span id="yarn-client">yarn-client</span></h3><ol><li>提交命令</li></ol><p>以client模式启动Spark应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/spark-submit --class path.to.your.Class --master yarn --deploy-mode client [options] &lt;app jar&gt; [app options]</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 spark]$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">examples/jars/spark-examples_2.11-2.3.1.jar 10</span><br></pre></td></tr></table></figure><ol start="2"><li>提交原理图解</li></ol><p><img src="/img/spark/spark-yarn-standalone.png" alt="spark-yarn"></p><ol start="3"><li>执行流程</li></ol><ul><li>客户单提交一个Application，在客户端启动一个Driver进程。</li><li>应用程序启动后会向RS(ResourceManager)发送请求，启动AM(ApplicationMaster)的资源。</li><li>RS收到请求，随机选择一台NM(NodeManager)启动AM。这里的NM相当于Standalone中的Worker节点。</li><li>AM启动后，会向RS请求一批container资源，用于启动Executor。</li><li>RS会找到一批NM返回给AM，用于启动Executor。</li><li>AM会向NM发送命令启动Executor。</li><li>Executor启动后，会反向注册给Driver，Driver发送task到Executor，执行情况和结果返回给Driver端。</li></ul><ol start="4"><li>总结</li></ol><p>Yarn-client模式同样是适用于测试，因为Driver运行在本地，Driver会与yarn集群中的Executor进行大量的通信，会造成客户机网卡流量的大量增加。</p><p>ApplicationMaster的作用：</p><ul><li>为当前的Application申请资源</li><li>给NodeManager发送消息启动Executor</li></ul><p>注意：ApplicationMaster有launchExecutor和申请资源的功能，并没有作业调度的功能。</p><h3><span id="yarn-cluster">yarn-cluster</span></h3><ol><li>提交命令</li></ol><p>以cluster模式启动Spark应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/spark-submit --class path.to.your.Class --master yarn --deploy-mode cluster [options] &lt;app jar&gt; [app options]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 spark]$ ./bin/spark-submit --class org.apache.spark.examples.SparkPi \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">examples/jars/sprk-examples_2.11-2.3.1.jar 10</span><br></pre></td></tr></table></figure><ol start="2"><li>提交原理图解</li></ol><p><img src="/img/spark/spark-yarn-cluster.png" alt="spark-yarn"></p><ol start="3"><li>执行流程</li></ol><ul><li>客户机提交Application应用程序，发送请求到RS(ResourceManager),请求启动AM(ApplicationMaster)</li><li>RS收到请求后随机在一台NM(NodeManager)上启动AM(相当于Driver端)</li><li>AM启动，AM发送请求到RS，请求一批container用于启动Executor</li><li>RS返回一批NM节点给AM</li><li>AM连接到NM,发送请求到NM启动Executor</li><li>Executor反向注册到AM所在的节点的Driver，Driver发送task到Executor</li></ul><ol start="4"><li>总结</li></ol><p>Yarn-Cluster主要用于生产环境中，因为Driver运行在Yarn集群中某一台nodeManager中，每次提交任务的Driver所在的机器都是随机的，不会产生某一台机器网卡流量激增的现象，缺点是任务提交后不能看到日志。只能通过yarn查看日志。</p><p>ApplicationMaster的作用：</p><ul><li>为当前的Application申请资源</li><li>给NodeManager发送消息启动Executor</li><li>任务调度</li></ul><p>停止集群任务命令: <code>yarn application -kill applicationID</code></p><h2><span id="配置历史服务器">配置历史服务器</span></h2><ol><li>临时配置</li></ol><p>对本次提交的应用程序起作用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./spark-shell --master spark://node21:7077 </span><br><span class="line">--name myapp1</span><br><span class="line">--conf spark.eventLog.enabled=<span class="literal">true</span></span><br><span class="line">--conf spark.eventLog.dir=hdfs://spark-node1:8020/spark/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>停止程序，在Web UI中Completed Applications对应的ApplicationID中能查看history.</p><ol start="2"><li>永久配置</li></ol><p><strong>spark-default.conf配置文件中配置History Server，对所有提交的Application都起作用</strong></p><p>在客户端节点，进入<code>../spark/conf/spark-defaults.conf</code>最后加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//开启记录事件日志的功能</span><br><span class="line">spark.eventLog.enabled          <span class="literal">true</span></span><br><span class="line">//设置事件日志存储的目录</span><br><span class="line">spark.eventLog.dir              hdfs://node21:8020/spark/<span class="built_in">test</span></span><br><span class="line">//设置HistoryServer加载事件日志的位置</span><br><span class="line">spark.history.fs.logDirectory   hdfs://node21:8020/spark/<span class="built_in">test</span></span><br><span class="line">//日志优化选项,压缩日志</span><br><span class="line">spark.eventLog.compress         <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动HistorySever：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./start-history-server.sh</span><br></pre></td></tr></table></figure><p>访问HistoryServer: spark-node1:18080，之后所有提交的应用程序运行状况都会被记录。</p><h2><span id="加入systemd">加入Systemd</span></h2><p>和前面ZooKeeper、HA的配置一样，将Spark的启动加入Systemd，让系统自动维护。在<code>/usr/lib/systemd/system/spark.serivce</code>加入</p><p>因为用了ZooKeeper集群做统一化管理，只需要master节点加入service即可。</p><p>spark-node1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Spark, Lightning-fast unified analytics engine</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target network-online.target</span><br><span class="line">Requires=network-online.target</span><br><span class="line">Wants=hadoop.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=galudisu</span><br><span class="line">Group=galudisu</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/spark/sbin/start-all.sh &amp;</span><br><span class="line">ExecStop=/opt/spark/sbin/stop-all.sh &amp;</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">Environment=SPARK_HOME=/opt/spark</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>spark-node2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Spark, Lightning-fast unified analytics engine</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target network-online.target</span><br><span class="line">Requires=network-online.target</span><br><span class="line">Wants=hadoop.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=galudisu</span><br><span class="line">Group=galudisu</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/spark/sbin/start-master.sh &amp;</span><br><span class="line">ExecStop=/opt/spark/sbin/stop-master.sh &amp;</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">Environment=SPARK_HOME=/opt/spark</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>又或者单独编写一个脚本执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;下载安装包&quot;&gt;下载安装包&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;官方下载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;点击&lt;a href=&quot;http://spark.apache.org/downloads.html&quot; targ
      
    
    </summary>
    
    
      <category term="spark" scheme="http://galudisu.info/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Akka技术架构的一些架构建议</title>
    <link href="http://galudisu.info/2018/10/26/ideal/ideal-reference/"/>
    <id>http://galudisu.info/2018/10/26/ideal/ideal-reference/</id>
    <published>2018-10-26T14:14:34.000Z</published>
    <updated>2019-08-27T09:05:47.505Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="社交设计">社交设计</span></h2><p><a href="http://serendip.me/" target="_blank" rel="noopener">Serendip.me</a>为人们提供<strong>社交音乐服务</strong>，帮助人们发现朋友们分享的优秀音乐，并为他们介绍“知音”——那些靠近他们的社交圈子，有相似音乐品味的陌生人。</p><p>serendip运行在AWS智商，采用了如下这些技术：<a href="http://www.scala-lang.org/" target="_blank" rel="noopener">scala</a>(还有一些Java)，<a href="http://akka.io/" target="_blank" rel="noopener">akka</a>(用来处理并发)，<a href="http://www.playframework.com/" target="_blank" rel="noopener">Play</a>框架(Web和API前端)，<a href="http://www.mongodb.org/" target="_blank" rel="noopener">MongoDB</a>和<a href="http://elasticsearch.org/" target="_blank" rel="noopener">Elasticsearch</a>。</p><h2><span id="技术栈的选择">技术栈的选择</span></h2><p>Serendip的主要功能是从公共音乐服务中收集Twitter上分享的所有音乐，所以它需要处理大量的数据，所以Serendip在选择语言和技术时，首先要考虑它们的扩展能力。</p><p>因为JVM久经考验的性能和工具，并且还有很多采用这门语言开发的开源系统(比如Elasticsearch)，所以他们选择JVM作为系统的基石。</p><p>而在JVM的体系中，scala又脱颖而出，成为了一个有趣的选择。Scala可以用现代的方式写代码，又可以跟Java全面互通。此外还有一个很重要的原因，akka actor框架是非常合适的流处理基础设施(绝对是！)。刚刚开始流行起来的Play框架看起来也很不错。Serendip开始于2011年初，当时这些都是非常前沿的技术。到了2011年末，scala和akka合并成<a href="http://typesafe.com/" target="_blank" rel="noopener">Typesafe</a>，Play也在不久之后加入。</p><p>选择MongoDB是因为它对开发者友好，易用，功能集和可能的扩展能力(采用了自动分片技术)。但因为Serendip使用和查询数据的方式需要在MongoDB上创建很多大索引，而这样会很快引发性能和内存方面的问题。所以他们主要是用MongoDB存储键-值文档，还有几个需要计数器的功能依赖于它的原子增长。</p><p>事实证明，这样使用时MongoDB非常牢靠。还容易操作，但主要是因为尽量避免使用分片，并且只有一个复制集(MongoDB的分片架构相当复杂)。</p><p>查询数据需要一个完全成熟的搜索系统。在开源的搜索解决方案中，Elasticsearch是扩展性最强，并且面向云端的系统。它有动态索引机制，还提供了很多搜索和切面的可能性，可以在其上构建很多功能。因此，Elasticsearch成为了serendip架构中的一个中心组件。</p><p>Serendip决定自己管理MongoDB和Elasticsearch，主要有两个原因。第一，Serendip要完全控制两个系统。不想在软件的升级/降级上依赖于其它元素。第二，因为serendip要处理大量数据，采用托管方案要比他们直接在EC2上自己管理昂贵得多。</p><h2><span id="一些数字">一些数字</span></h2><p>Serendip的“抽水泵” (处理Twitter公众流和Facebook用户订阅源的那部分)每天要消化大概5,000,000条信息项。这些信息项要经过一系列的“过滤器”，对它们进行检测，并解析出受支持服务(YouTube、Soundcloud、Bandcamp等)上的音乐链接，还要添加一些元数据上去。抽水泵和过滤器是akka的actor，并且整个过程是用单个m1.large EC2管理的。如果需要，可以用akka的远程actor将任务分发到集群中，轻松实现系统扩展。</p><p>从这些信息项中，Serendip每天大概能得到850,000条有效的信息项(也就是真的包含相关音乐链接的信息项)。这些信息项在Elasticsearch中索引(还要在MongoDB中备份并持续计数)。因为每条有效的信息项都要更新几个对象，所以在Elasticsearch中的索引率大约为40条/秒。</p><p>Serendip在Elasticsearch中保留一个月的信息项索引(微博和帖子)。每个月的索引大概包含25M信息项，有3个分片。集群运行着4个节点，每个都在m2.2xlarge实例上。这个配置有足够的内存运行Serendip所需的数据搜索。</p><p>Serendip的MongoDB集群的操作频率大概是100次写/秒和300次读/秒，因为它处理更多的数据类型、技术和统计数据更新。复制集的主节点跑在一个m2.2xlarge实例上，副节点在一个m1.xlarge实例上。</p><h2><span id="构建订阅源">构建订阅源</span></h2><p>在设计Serendip主音乐订阅源的架构时，想让订阅源是动态的，并且可以根据用户的动作和输入作出反应。比如说，如果某位用户将一首歌标为“摇滚”，或将某位艺术家标为“趾高气昂”，那么这些动作应该马上反应到订阅源上。如果用户“不喜欢”一位艺术家，那以后就不应该再播放那些音乐。</p><p>并且这个订阅源应该是几个源头的组合，比如朋友分享的音乐，喜爱的艺术家的音乐，以及有相同音乐品味的“建议”用户分享的音乐。</p><p>这些需求意味着那种“fan-out-on-write”式的订阅源创建方式可能并不合适。应该实时构建订阅源，把跟用户相关的所有信号都用上。Elasticsearch的功能可以构建出这种实时的订阅源生成器。</p><p>订阅源算法有几种选择信息项的“策略”，在每次订阅源的获取上都根据不同的比率动态组合。每个策略都会考虑到用户最近的动作和信号。策略的组合被转换成几种对鲜活数据的搜索，这些数据是不断地由Elasticsearch索引的。因为这些数据是基于时间的，并且索引每月创建一次，所以只需要查询全部数据中的一小部分子集。</p><p>Elasticsearch非常擅于处理这些搜索。它还提供了一种扩展这种架构的著名路径-通过增加分片数量扩展写操作。通过增加更多的复制和物理节点扩展搜索。</p><p>寻找“知音”的过程(根据用户的音乐品味进行匹配)充分利用了Elasticsearch的切面(聚合)能力。作为持续不断的社交流处理的一部分，系统通过计算顶级分享的艺术家来为它遇到的社交网络用户准备数据(在他们分享的音乐上使用切面搜索)。</p><p>当Serendip用户给出一个信号(播放音乐或跟订阅源交互)时，它能为那位用户重新触发一次知音计算过程。这个算法按照喜爱艺术家(这个是不断在更新的)列表来寻找匹配程度最高的其他用户，并用一些额外的参数作为权重，比如流行程度、分享次数等。然后再用另一组算法过滤掉垃圾邮件发送者(是的，有音乐垃圾邮件发送者)和异常值。</p><p>实践证明，这种处理能得出很好的结果，并不需要再用一套系统来运行更加复杂的聚类或推荐算法。</p><h2><span id="监测与部署">监测与部署</span></h2><p>Serendip用<a href="http://www.serverdensity.com/" target="_blank" rel="noopener">ServerDensity</a>做系统监测和报警。对于初创公司而言，它是一种易于使用的托管方案，有像样的功能集和合理的价格。ServerDensity原生提供了服务器和MongoDB的监测。Serendi还大量使用了它报告定制指标的能力来报告内部系统统计数据。</p><p>内部统计数据采集机制负责采集系统内发生的所有动作，并把它们保留在一个MongoDB集合内。一个定期任务每隔一分钟从MongoDB中读取一次这些统计数据，并报告给ServerDensity。这样就可以用ServerDensity对Elasticsearch及运营数据进行监测和报警。</p><p>服务器的管理和部署是用亚马逊Elastic Beanstalk完成的。Elastic Beanstalk是AWS的受限PaaS解决方案。很容易上手，但它不是功能完整的PaaS，对于大部分常见用例而言，它的基本功能已经足够了。它提供了易用的自动扩展配置，还可以通过EC2完整访问。</p><p>应用程序的构建是由EC2上的Jenkins实例执行的。Play程序被打包成WAR。一个构建后置脚本将这个WAR作为新版本推送到Elastic Beanstalk上。这个新版本不会自动部署到服务器上-它的部署是手动完成的。通常是先部署到临时环境中进行测试，然后经过证实后再部署到生产环境中。</p><h2><span id="外卖">外卖</span></h2><p>作为结论，这里有一些在构建Serendip的过程中得到的最重要的经验教训，重要程度跟顺序没什么关系。</p><ol><li>知道如何扩展。一开始你可能并不需要扩展，但你得知道系统的每一部分能够如何扩展，以及能扩展到什么程度。如果扩展需要时间，要预先给你自己留出充足的时间。</li><li>为峰值做好准备。特别是在创业阶段，如果你总是接近满负荷运行，一个lifehacker或reddit帖子就能把你的系统宕掉。保留充足的边界空间，这样才能应对突发负载，或时刻准备好真正快速地扩展。</li><li>选择一门不会拖你后腿的语言。确保你所采用的技术在你的语言中有原生客户端，或者至少有维护得很活跃的一些。不要被等着类库更新给拖住。</li><li>相信炒作。你想要技术跟你的产品共同成长，不会过早死掉。一个充满活力的活跃社区，以及跟该项技术有关的一些噪音，是这种技术存活的良好迹象。</li><li>不要相信炒作。看看那些批判你正在评估的技术的帖子。它们可以告诉你它的弱点。但也不要太认真，当事情不能按照期望工作时，人们通常会变得情绪化。</li><li>玩得开心点。选择会让你兴奋的技术。要能让你觉得“哦，我能用它做的事情太酷啦”。毕竟那(也)是我们来这里的目的。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;社交设计&quot;&gt;社交设计&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://serendip.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Serendip.me&lt;/a&gt;为人们提供&lt;
      
    
    </summary>
    
    
      <category term="ideal" scheme="http://galudisu.info/tags/ideal/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop集群配置</title>
    <link href="http://galudisu.info/2018/10/22/spark/spark-hadoop-1/"/>
    <id>http://galudisu.info/2018/10/22/spark/spark-hadoop-1/</id>
    <published>2018-10-21T16:08:22.000Z</published>
    <updated>2019-08-27T09:05:47.643Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="完全分布式集群ha">完全分布式集群(HA)</span></h2><ol><li>环境准备</li></ol><ul><li>修改IP</li><li>修改主机名及主机名和IP地址的映射</li><li>关闭防火墙</li><li>ssh免密登录</li><li>安装JDK，配置环境变量</li></ul><ol start="2"><li>集群规则</li></ol><table><thead><tr><th>节点名称</th><th>NN</th><th>JJN</th><th>DN</th><th>ZK/FC</th><th>ZK</th><th>RM</th><th>NM</th></tr></thead><tbody><tr><td>spark-node1</td><td>NameNode</td><td>JournalNode</td><td>DataNode</td><td>ZK/FC</td><td>ZooKeeper</td><td></td><td>NodeManager</td></tr><tr><td>spark-node2</td><td>NameNode</td><td>JournalNode</td><td>DataNode</td><td>ZK/FC</td><td>ZooKeeper</td><td>ResourceManager</td><td>NodeManager</td></tr><tr><td>spark-node3</td><td></td><td>JournalNode</td><td>DataNode</td><td></td><td>ZooKeeper</td><td>ResourceManager</td><td>NodeManager</td></tr></tbody></table><ol start="3"><li>安装Zookeeper集群</li></ol><p>安装详解参考：<a href="http://galudisu.info/2018/10/21/spark/spark-zookeeper-1/">CentOS 7.5 搭建Zookeeper集群与命令行操作</a></p><ol start="4"><li>设置SSH免密钥</li></ol><p>关于ssh免密钥的设置，要求每两台主机之前设置免密码，自己的主机与自己的主机之间也要设置免密码。这项操作可以在admin用户下执行，执行完毕公钥在<code>/home/xxx/.ssh/id_rsa.pub</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">[xxx@spark-node1 ~]<span class="comment"># ssh-copy-id spark-node1</span></span><br><span class="line">[xxx@spark-node1 ~]<span class="comment"># ssh-copy-id spark-node2</span></span><br><span class="line">[xxx@spark-node1 ~]<span class="comment"># ssh-copy-id spark-node3</span></span><br></pre></td></tr></table></figure><p>spark-node1与spark-node2为namenode节点要相互免密钥 HDFS的HA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 ~]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">[xxx@spark-node2 ~]<span class="comment"># ssh-copy-id spark-node2</span></span><br><span class="line">[xxx@spark-node2 ~]<span class="comment"># ssh-copy-id spark-node1</span></span><br><span class="line">[xxx@spark-node2 ~]<span class="comment"># ssh-copy-id spark-node3</span></span><br></pre></td></tr></table></figure><p>spark-node2与spark-node3为yarn节点要相互免密钥 YARN的HA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node3 ~]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">[xxx@spark-node3 ~]<span class="comment"># ssh-copy-id spark-node3</span></span><br><span class="line">[xxx@spark-node3 ~]<span class="comment"># ssh-copy-id spark-node1</span></span><br><span class="line">[xxx@spark-node3 ~]<span class="comment"># ssh-copy-id spark-node2</span></span><br></pre></td></tr></table></figure><ol start="5"><li>安装配置Hadoop集群</li></ol><p>解压<code>hadoop-2.7.6.tar.gz</code> 到 <code>/opt/</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar zxvf hadoop-2.7.6.tar.gz -C /opt/</span><br></pre></td></tr></table></figure><p>创建软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/hadoop-2.7.6 /opt/hadoop</span><br></pre></td></tr></table></figure><p>配置Hadoop集群，配置文件都在<code>/opt/hadoop/etc/hadoop/</code>下，修改<code>hadoop-env.sh</code>，<code>mapred-env.sh</code>，<code>yarn-env.sh</code>的JAVA环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk1.8.0_191-amd64</span><br></pre></td></tr></table></figure><p>修改core-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 把两个NameNode的地址组装成一个集群mycluster --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop/data/ha/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定ZKFC故障自动切换转移 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark-node1:2181,spark-node2:2181,spark-node3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改hdfs-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置dfs副本数，默认3个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 完全分布式集群名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 集群中NameNode节点都有哪些 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn1的RPC通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark-node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark-node2:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark-node1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.mycluster.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark-node2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定NameNode元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://spark-node1:8485;spark-node2:8485;spark-node3:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置隔离机制，即同一时刻只能有一台服务器对外响应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用隔离机制时需要ssh无秘钥登录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/admin/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明journalnode服务器存储目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop/data/ha/jn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭权限检查--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions.enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 访问代理类：client，mycluster，active配置失败自动切换实现方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置自动故障转移--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>　</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改mapred-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv mapred-site.xml.template mapred-site.xml</span><br><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定mr框架为yarn方式 --&gt;</span></span><br><span class="line">　<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">　<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定mr历史服务器主机,端口 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark-node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定mr历史服务器WebUI主机,端口 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>spark-node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器的WEB UI上最多显示20000个历史的作业记录信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.joblist.cache.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>20000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置作业运行日志 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.app.mapreduce.am.staging-dir&#125;/history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.app.mapreduce.am.staging-dir&#125;/history/done_intermediate<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.staging-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/hadoop-yarn/staging<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改slaves</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim slaves</span><br><span class="line">spark-node1</span><br><span class="line">spark-node2</span><br><span class="line">spark-node3</span><br></pre></td></tr></table></figure><p>修改yarn-site.xml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- reducer获取数据的方式 --&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!--启用resourcemanager ha--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.ha.enabled&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!--声明两台resourcemanager的地址--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.cluster-id&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;rmCluster&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.ha.rm-ids&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;rm1,rm2&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.hostname.rm1&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;spark-node2&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.hostname.rm2&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;spark-node3&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!--指定zookeeper集群的地址--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.zk-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;spark-node1:2181,spark-node2:2181,spark-node3:2181&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!--启用自动恢复--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.recovery.enabled&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;<span class="literal">true</span>&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;!--指定resourcemanager的状态信息存储在zookeeper集群--&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.store.class&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>拷贝hadoop到其它节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r hadoop-2.7.6/ xxx@spark-node2:/opt/</span><br><span class="line">scp -r hadoop-2.7.6/ xxx@spark-node3:/opt/</span><br></pre></td></tr></table></figure><p>配置Hadoop环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">## 末尾追加</span></span><br><span class="line"><span class="built_in">export</span>  HADOOP_HOME=/opt/hadoop-2.7.6</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure><ol start="5"><li>启动集群</li></ol><ol><li>在各个JournalNode节点上，输入以下命令启动journalnode服务：(前提zookeeper集群已启动)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ hadoop-daemon.sh start journalnode</span><br><span class="line">[xxx@spark-node2 ~]$ hadoop-daemon.sh start journalnode</span><br><span class="line">[xxx@spark-node3 ~]$ hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure><p>启动Journalnode是为了创建<code>/data/ha/jn</code>，此时jn里面是空的</p><ol start="2"><li>在<code>[nn1 ]</code>上，对namenode进行格式化，并启动：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p><img src="/img/spark/hadoop-format.png" alt="hadoop-format"></p><p>格式化namenode，此时jn里面会产生集群ID等信息</p><p><img src="/img/spark/hadoop-id.png" alt="hadoop-id"></p><p>另外，<code>/data/ha/tmp</code>也会产生如下信息</p><p><img src="/img/spark/hadoop-tmp.png" alt="hadoop-tmp"></p><p>启动nn1上namenode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 current]$ hadoop-daemon.sh  start namenode</span><br><span class="line">starting namenode, logging to /opt/hadoop-2.7.6/logs/hadoop-admin-namenode-node21.out</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>[nn2]</code>上，同步nn1的元数据信息：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 ~]$ hdfs namenode -bootstrapStandby</span><br></pre></td></tr></table></figure><p><img src="/img/spark/hadoop-nn2.png" alt="hadoop-nn2"></p><ol start="4"><li>启动<code>[nn2]</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 ~]$ hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>[nn1]</code>上，启动所有datanode</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ hadoop-daemons.sh start datanode</span><br></pre></td></tr></table></figure><ol start="6"><li>查看web页面此时显示</li></ol><p><img src="/img/spark/hadoop-node1.png" alt="hadoop-node1"><br><img src="/img/spark/hadoop-node2.png" alt="hadoop-node2"></p><ol start="7"><li>手动切换状态，在各个namenode节点上启动DFSZK Failover Controller，先在哪台机器启动，哪个机器的namenode就是Active NameNode</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ hadoop-daemon.sh start zkfc</span><br><span class="line">[xxx@spark-node2 ~]$ hadoop-daemon.sh start zkfc</span><br></pre></td></tr></table></figure><p>或者强制手动其中一个节点变为Active</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 data]$ hdfs haadmin -transitionToActive nn1 --forcemanual</span><br></pre></td></tr></table></figure><p>web页面查看</p><p><img src="/img/spark/hadoop-active.png" alt="hadoop-active"></p><ol start="8"><li>自动切换状态，需要初始化HA在zookeeper中状态，先停掉hdfs服务，然后随便找一台zookeeper的安装节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 current]$ hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure><p>查看，此时会产生一个hadoop-ha目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@spark-node2 ~]<span class="comment"># zkCli.sh</span></span><br></pre></td></tr></table></figure><p>启动hdfs服务，查看namenode状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ start-dfs.sh</span><br></pre></td></tr></table></figure><ol start="9"><li>验证</li></ol><ul><li>将Active NameNode进程kill</li><li>将Active NameNode机器断开网络</li></ul><ol start="10"><li>启动yarn</li></ol><p>在spark-node2中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 ~]$ start-yarn.sh</span><br></pre></td></tr></table></figure><p>在spark-node3中执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node3 ~]$ yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node2 ~]$ yarn rmadmin -getServiceState rm1</span><br><span class="line">active</span><br><span class="line">[xxx@spark-node2 ~]$ yarn rmadmin -getServiceState rm2</span><br><span class="line">standby</span><br></pre></td></tr></table></figure><p><img src="/img/spark/hadoop-yarn.png" alt="hadoop-yarn"></p><ol start="6"><li>测试集群</li></ol><ol><li>查看进程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ start-dfs.sh </span><br><span class="line">[xxx@spark-node2 ~]$ start-yarn.sh </span><br><span class="line">[xxx@spark-node3 ~]$ yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xxx @ spark-node1 in ~ [10:29:20] </span></span><br><span class="line">$ jps</span><br><span class="line">3220 JournalNode</span><br><span class="line">3588 DataNode</span><br><span class="line">4967 Jps</span><br><span class="line">4378 NodeManager</span><br><span class="line">3725 DFSZKFailoverController</span><br><span class="line">3407 NameNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># xxx @ spark-node2 in ~ [10:28:32] </span></span><br><span class="line">$ jps          </span><br><span class="line">3939 ResourceManager</span><br><span class="line">3380 NameNode</span><br><span class="line">3508 DataNode</span><br><span class="line">4040 NodeManager</span><br><span class="line">3660 DFSZKFailoverController</span><br><span class="line">4621 Jps</span><br><span class="line">3182 JournalNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># xxx @ spark-node3 in ~ [10:28:09] </span></span><br><span class="line">$ jps          </span><br><span class="line">3188 JournalNode</span><br><span class="line">3989 Jps</span><br><span class="line">3784 ResourceManager</span><br><span class="line">3641 NodeManager</span><br><span class="line">3371 DataNode</span><br></pre></td></tr></table></figure><ol start="2"><li>任务提交</li></ol><p>上传文件到集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ hadoop fs -mkdir -p /user/galudisu/input</span><br><span class="line">[xxx@spark-node1 ~]$ mkdir -p  /opt/wcinput/</span><br><span class="line">[xxx@spark-node1 ~]$ vi  /opt/wcinput/wc.txt </span><br><span class="line">[xxx@spark-node1 ~]$ hadoop fs -put  /opt/wcinput/wc.txt /user/galudisu/input</span><br></pre></td></tr></table></figure><p>wc.txt文本内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadoop spark   storm</span><br><span class="line">hbase hive sqoop</span><br><span class="line">hadoop flink flume</span><br><span class="line">spark hadoop</span><br></pre></td></tr></table></figure><p>上传文件后查看文件存放在什么位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">文件存储路径</span><br><span class="line">[xxx@spark-node1 subdir0]$ <span class="built_in">pwd</span></span><br><span class="line">/opt/hadoop/data/ha/tmp/dfs/data/current/BP-1244373306-192.168.100.21-1527653416622/current/finalized/subdir0/subdir0</span><br><span class="line">查看文件内容</span><br><span class="line">[xxx@spark-node1 subdir0]$ cat blk_1073741825</span><br><span class="line">hadoop spark   storm</span><br><span class="line">hbase hive sqoop</span><br><span class="line">hadoop flink flume</span><br><span class="line">spark hadoop</span><br></pre></td></tr></table></figure><p>下载文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 opt]$ hadoop fs -get /user/admin/input/wc.txt</span><br></pre></td></tr></table></figure><p>执行wordcount程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@spark-node1 ~]$ hadoop jar /opt/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.6.jar wordcount /user/galudisu/input /user/galudisu/output</span><br></pre></td></tr></table></figure><p>执行过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">18/10/22 10:44:06 INFO input.FileInputFormat: Total input paths to process : 1</span><br><span class="line">18/10/22 10:44:06 INFO mapreduce.JobSubmitter: number of splits:1</span><br><span class="line">18/10/22 10:44:07 INFO mapreduce.JobSubmitter: Submitting tokens <span class="keyword">for</span> job: job_1540218481613_0001</span><br><span class="line">18/10/22 10:44:07 INFO impl.YarnClientImpl: Submitted application application_1540218481613_0001</span><br><span class="line">18/10/22 10:44:07 INFO mapreduce.Job: The url to track the job: http://spark-node2:8088/proxy/application_1540218481613_0001/</span><br><span class="line">18/10/22 10:44:07 INFO mapreduce.Job: Running job: job_1540218481613_0001</span><br><span class="line">18/10/22 10:44:19 INFO mapreduce.Job: Job job_1540218481613_0001 running <span class="keyword">in</span> uber mode : <span class="literal">false</span></span><br><span class="line">18/10/22 10:44:19 INFO mapreduce.Job:  map 0% reduce 0%</span><br><span class="line">18/10/22 10:44:31 INFO mapreduce.Job:  map 100% reduce 0%</span><br><span class="line">18/10/22 10:44:39 INFO mapreduce.Job:  map 100% reduce 100%</span><br><span class="line">18/10/22 10:44:40 INFO mapreduce.Job: Job job_1540218481613_0001 completed successfully</span><br><span class="line">18/10/22 10:44:40 INFO mapreduce.Job: Counters: 49</span><br><span class="line">File System Counters</span><br><span class="line">FILE: Number of bytes <span class="built_in">read</span>=102</span><br><span class="line">FILE: Number of bytes written=250893</span><br><span class="line">FILE: Number of <span class="built_in">read</span> operations=0</span><br><span class="line">FILE: Number of large <span class="built_in">read</span> operations=0</span><br><span class="line">FILE: Number of write operations=0</span><br><span class="line">HDFS: Number of bytes <span class="built_in">read</span>=178</span><br><span class="line">HDFS: Number of bytes written=64</span><br><span class="line">HDFS: Number of <span class="built_in">read</span> operations=6</span><br><span class="line">HDFS: Number of large <span class="built_in">read</span> operations=0</span><br><span class="line">HDFS: Number of write operations=2</span><br><span class="line">Job Counters </span><br><span class="line">Launched map tasks=1</span><br><span class="line">Launched reduce tasks=1</span><br><span class="line">Data-local map tasks=1</span><br><span class="line">Total time spent by all maps <span class="keyword">in</span> occupied slots (ms)=9932</span><br><span class="line">Total time spent by all reduces <span class="keyword">in</span> occupied slots (ms)=4401</span><br><span class="line">Total time spent by all map tasks (ms)=9932</span><br><span class="line">Total time spent by all reduce tasks (ms)=4401</span><br><span class="line">Total vcore-milliseconds taken by all map tasks=9932</span><br><span class="line">Total vcore-milliseconds taken by all reduce tasks=4401</span><br><span class="line">Total megabyte-milliseconds taken by all map tasks=10170368</span><br><span class="line">Total megabyte-milliseconds taken by all reduce tasks=4506624</span><br><span class="line">Map-Reduce Framework</span><br><span class="line">Map input records=4</span><br><span class="line">Map output records=11</span><br><span class="line">Map output bytes=112</span><br><span class="line">Map output materialized bytes=102</span><br><span class="line">Input split bytes=108</span><br><span class="line">Combine input records=11</span><br><span class="line">Combine output records=8</span><br><span class="line">Reduce input groups=8</span><br><span class="line">Reduce shuffle bytes=102</span><br><span class="line">Reduce input records=8</span><br><span class="line">Reduce output records=8</span><br><span class="line">Spilled Records=16</span><br><span class="line">Shuffled Maps =1</span><br><span class="line">Failed Shuffles=0</span><br><span class="line">Merged Map outputs=1</span><br><span class="line">GC time elapsed (ms)=186</span><br><span class="line">CPU time spent (ms)=1950</span><br><span class="line">Physical memory (bytes) snapshot=291643392</span><br><span class="line">Virtual memory (bytes) snapshot=4170993664</span><br><span class="line">Total committed heap usage (bytes)=141291520</span><br><span class="line">Shuffle Errors</span><br><span class="line">BAD_ID=0</span><br><span class="line">CONNECTION=0</span><br><span class="line">IO_ERROR=0</span><br><span class="line">WRONG_LENGTH=0</span><br><span class="line">WRONG_MAP=0</span><br><span class="line">WRONG_REDUCE=0</span><br><span class="line">File Input Format Counters </span><br><span class="line">Bytes Read=70</span><br><span class="line">File Output Format Counters </span><br><span class="line">Bytes Written=64</span><br></pre></td></tr></table></figure><p>下载查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xxx @ spark-node1 in ~ [10:52:01] </span></span><br><span class="line">$ hadoop fs -get /user/galudisu/output/part-r-00000</span><br><span class="line"></span><br><span class="line"><span class="comment"># galudisu @ spark-node1 in ~ [10:52:06] </span></span><br><span class="line">$ cat part-r-00000 </span><br><span class="line">flink1</span><br><span class="line">flume1</span><br><span class="line">hadoop3</span><br><span class="line">hbase1</span><br><span class="line">hive1</span><br><span class="line">spark2</span><br><span class="line">sqoop1</span><br><span class="line">storm1</span><br></pre></td></tr></table></figure><h2><span id="hadoop加入systemd服务">Hadoop加入Systemd服务</span></h2><p>类似于ZooKeeper，将hadoop加入systemd中，让系统启动后自启</p><p>首先，在各个节点的hadoop目录创建一个启动脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    <span class="built_in">source</span> <span class="string">"/etc/profile"</span></span><br><span class="line"></span><br><span class="line">    /opt/hadoop/sbin/start-dfs.sh</span><br><span class="line">    /opt/hadoop/sbin/start-yarn.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">source</span> <span class="string">"/etc/profile"</span></span><br><span class="line"></span><br><span class="line">    /opt/hadoop/sbin/stop-yarn.sh</span><br><span class="line">    /opt/hadoop/sbin/stop-dfs.sh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    start|stop) <span class="string">"<span class="variable">$1</span>"</span> ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>加入系统Systemd开机启动，注意下面after，没有的服务要去掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Hadoop DFS namenode and datanode</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target network-online.target</span><br><span class="line">Requires=network-online.target</span><br><span class="line">Wants=zookeeper.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=spark</span><br><span class="line">Group=spark</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/opt/hadoop/hadoop-service.sh start</span><br><span class="line">ExecStop=/opt/hadoop/hadoop-service.sh stop</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">Environment=JAVA_HOME=/usr/java/jdk1.8.0_191-amd64</span><br><span class="line">Environment=HADOOP_HOME=/opt/hadoop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>按照上面的方式，单独修改每个节点的<code>hadoop-service.sh</code>即可。</p><p><img src="/img/spark/hadoop-data-node.png" alt="hadoop-data-node"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;完全分布式集群ha&quot;&gt;完全分布式集群(HA)&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;环境准备&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;修改IP&lt;/li&gt;
&lt;li&gt;修改主机名及主机名和IP地址的映射&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="hadoop" scheme="http://galudisu.info/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper原理与API应用</title>
    <link href="http://galudisu.info/2018/10/21/spark/spark-zookeeper-2/"/>
    <id>http://galudisu.info/2018/10/21/spark/spark-zookeeper-2/</id>
    <published>2018-10-21T08:24:35.000Z</published>
    <updated>2019-08-27T09:05:47.649Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="zookeeper概述">ZooKeeper概述</span></h2><p>1.1 概述</p><p>Zookeeper是Google的Chubby一个开源实现。它是一个针对大型分布式系统的可靠协调系统。提供的功能包括：配置维护、名字服务、分布式同步、组服务等。Zookeeper的目标就是封装复杂易出错的关键服务，讲简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><a id="more"></a><p>Zookeeper从设计模式角度来理解：是一个机遇观察者模式设计的分布式服务管理框架，它负责存储和管理大家关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册的那些观察者做出相应的反应，从而实现集群中类似Master/Slave管理模式。</p><p>1.2 特点</p><p><img src="/img/spark/zookeeper-architecture.png" alt="zookeeper-architecture"></p><ul><li>Zookeeper：一个领导者(leader)，多个跟随者(follower)组成的集群。</li><li>Leader负责进行投票的发起和决议，更新系统状态。</li><li>所有服务(servers)存储数据的一份拷贝(既可以存储在内存，也可以本地文件系统)</li><li>Follower用于接收客户请求并向客户端返回结果，在选举Leader过程中参与投票。</li><li>集群中只要有半数以上节点存活，Zookeeper集群就能正常服务。</li><li>全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的。</li><li>更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行。</li><li>数据更新原子性，一次数据更新要么成功，要么失败。</li><li>实时性，在一定时间范围内，client能读到最新数据。</li><li>不存在分区读写。</li></ul><p>1.3 数据结构</p><p><img src="/img/spark/zookeeper-data-model.png" alt="zookeeper-data-model"></p><p>Zookeeper数据模式的结构与Unix文件系统类似，整体上可以看做是一颗树，每个节点称作一个ZNode。每个ZNode默认能够存储1MB的数据，每个ZNode都可以通过其路径唯一标识。</p><p>1.4 应用场景</p><p>提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。</p><ul><li>统一命名服务：在分布式环境下，经常需要对应用/服务进行统一命名，便于识别不同服务。</li><li>统一配置管理：将配置信息写入ZooKeeper上的一个ZNode，各个节点监听这个ZNode，一旦ZNode中的数据被修改，ZooKeeper通知各个节点。</li><li>统一集群管理：将节点信息写入ZooKeeper上的一个ZNode，监听这个ZNode获取它的实时状态变化。</li><li>服务器节点动态上下线：监听注册服务列表，服务器下线发送事件通知。</li><li>软负载均衡。</li></ul><p><img src="/img/spark/zookeeper-in-hadoop.png" alt="zookeeper-in-hadoop"></p><h2><span id="zookeeper内部原理">Zookeeper内部原理</span></h2><ol><li>选举机制</li></ol><ul><li>半数机制：集群中半数以上机器存活，集群可用。所以ZooKeeper适合装在奇数台机器上。</li><li>ZooKeeper虽然在配置文件中没有指定master和slave。但是，ZooKeeper在启动时，leader被选举出，并且只有一个，其它作为follower，Leader是通过内部的选举机制临时产生的。</li></ul><ol start="2"><li>节点类型</li></ol><p>ZNode有两种类型：</p><ul><li>短暂(ephemeral)：客户端和服务端断开连接后，创建的节点自己删除</li><li>持久(persistent)：客户端和服务端断开连接后，创建的节点不删除</li></ul><p>ZNode有四种形式的目录节点(默认是persistent)</p><ul><li>持久化目录节点(persistent)：客户端与ZooKeeper断开连接后，该节点依旧存在</li><li>持久化顺序编号目录节点(persistent_sequential)：客户端与ZooKeeper断开连接后，该节点依旧存在，只是ZooKeeper给该节点名称进行顺序编号</li><li>临时目录节点(ephemeral)：客户端与ZooKeeper断开连接后，该节点被删除</li><li>临时顺序编号目录节点(ephemeral_sequential)：客户端与ZooKeeper断开连接后，该节点被删除，只是ZooKeeper给该节点名称进行顺序编号</li></ul><p>创建ZNode时设置顺序标识，ZNode名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护。</p><p>在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序。</p><ol start="3"><li>stat结构体</li></ol><ol><li>czxid- 引起这个znode创建的zxid，创建节点的事务的zxid</li></ol><p>每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。</p><p>事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。</p><ol start="2"><li><p>ctime - znode被创建的毫秒数(从1970年开始)</p></li><li><p>mzxid - znode最后更新的zxid</p></li><li><p>mtime - znode最后修改的毫秒数(从1970年开始)</p></li><li><p>pZxid-znode最后更新的子节点zxid</p></li><li><p>cversion - znode子节点变化号，znode子节点修改次数</p></li><li><p>dataversion - znode数据变化号</p></li><li><p>aclVersion - znode访问控制列表的变化号</p></li><li><p>ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。</p></li><li><p>dataLength- znode的数据长度</p></li><li><p>numChildren - znode子节点数量</p></li></ol><ol start="4"><li>监听器原理</li></ol><p><img src="/img/spark/zookeeper-listener.png" alt="zookeeper-listener"></p><ol start="5"><li>写数据流程</li></ol><p><img src="/img/spark/zookeeper-write-process.png" alt="zookeeper-write"></p><p><img src="/img/spark/zookeeper-write-process-b.png" alt="zookeeper-write"></p><ol start="6"><li>读数据流程</li></ol><p>读流程比较简单，因为是所有节点的数据都是相同的，ZooKeeper的读流程是直接读取即可。</p><h2><span id="api应用">API应用</span></h2><p>创建ZooKeeper客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String connectString = <span class="string">"node21:2181,node22:2181,node23:2181"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">private</span> ZooKeeper zkClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      zkClient = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 收到事件通知后的回调函数（用户的业务逻辑）</span></span><br><span class="line">      System.out.println(event.getType() + <span class="string">"--"</span> + event.getPath());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建子节点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建子节点</span><br><span class="line">@Test</span><br><span class="line">public void create() throws Exception &#123;</span><br><span class="line">// 数据的增删改查</span><br><span class="line">// 参数1：要创建的节点的路径； 参数2：节点数据 ； 参数3：节点权限 ；参数4：节点的类型</span><br><span class="line">String nodeCreated = zkClient.create(<span class="string">"/eclipse"</span>, <span class="string">"hello zk"</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断ZNode是否存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 判断znode是否存在</span><br><span class="line">@Test</span><br><span class="line">public void exist() throws Exception &#123;</span><br><span class="line">       Stat <span class="built_in">stat</span> = zkClient.exists(<span class="string">"/eclipse"</span>, <span class="literal">false</span>);</span><br><span class="line">       System.out.println(<span class="built_in">stat</span> == null ? <span class="string">"not exist"</span> : <span class="string">"exist"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="zookeeper实战">Zookeeper实战</span></h2><ol><li>监听服务器节点上下线</li></ol><p>需求：某分布式系统中，主节点可以有多台，可以动态上下线，任意一台客户端都能实时感知到主节点服务器的上下线。<br>具体实现：</p><p>在集群上创建/servers节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 10] create /servers <span class="string">"servers"</span></span><br><span class="line">Created /servers</span><br></pre></td></tr></table></figure><p>服务端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyg.zkcase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String connectString = <span class="string">"node21:2181,node22:2181,node23:2181"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String parentNode = <span class="string">"/servers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建到zk的客户端连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">        zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">       &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册服务器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registServer</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">String create = zk.create(parentNode + <span class="string">"/server"</span>, hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">        System.out.println(hostname +<span class="string">" is online "</span>+ create);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(hostname+<span class="string">" is working ..."</span>);</span><br><span class="line">       Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取zk连接</span></span><br><span class="line">DistributeServer server = <span class="keyword">new</span> DistributeServer();</span><br><span class="line">server.getConnect();</span><br><span class="line"><span class="comment">// 利用zk连接注册服务器信息</span></span><br><span class="line">server.registServer(args[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 启动业务功能</span></span><br><span class="line">server.business(args[<span class="number">0</span>]);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xyg.zkcase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeClient</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String connectString = <span class="string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String parentNode = <span class="string">"/servers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建到zk的客户端连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 再次启动监听</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          getServerList();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getServerList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取服务器子节点信息，并且对父节点进行监听</span></span><br><span class="line">    List&lt;String&gt; children = zk.getChildren(parentNode, <span class="keyword">true</span>);</span><br><span class="line">    ArrayList&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">    <span class="keyword">byte</span>[] data = zk.getData(parentNode + <span class="string">"/"</span> + child, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    servers.add(<span class="keyword">new</span> String(data));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把servers赋值给成员serverList，已提供给各业务线程使用</span></span><br><span class="line">     serversList = servers;</span><br><span class="line">     System.out.println(serversList);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 业务功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"client is working ..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取zk连接</span></span><br><span class="line">DistributeClient client = <span class="keyword">new</span> DistributeClient();</span><br><span class="line">client.getConnect();</span><br><span class="line"><span class="comment">// 获取servers的子节点信息，从中获取服务器信息列表</span></span><br><span class="line">client.getServerList();</span><br><span class="line"><span class="comment">// 业务进程启动</span></span><br><span class="line">client.business();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;zookeeper概述&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#zookeeper概述&quot;&gt;¶&lt;/a&gt;ZooKeeper概述&lt;/h2&gt;
&lt;p&gt;1.1 概述&lt;/p&gt;
&lt;p&gt;Zookeeper是Google的Chubby一个开源实现。它是一个针对大型分布式系统的可靠协调系统。提供的功能包括：配置维护、名字服务、分布式同步、组服务等。Zookeeper的目标就是封装复杂易出错的关键服务，讲简单易用的接口和性能高效、功能稳定的系统提供给用户。&lt;/p&gt;
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://galudisu.info/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7.5 搭建Zookeeper集群与命令行操作</title>
    <link href="http://galudisu.info/2018/10/21/spark/spark-zookeeper-1/"/>
    <id>http://galudisu.info/2018/10/21/spark/spark-zookeeper-1/</id>
    <published>2018-10-21T02:45:24.000Z</published>
    <updated>2019-08-27T09:05:47.646Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="分布式安装部署">分布式安装部署</span></h2><p>官网首页：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a><br>下载地址：<a href="http://mirror.bit.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/zookeeper/</a></p><p><img src="/img/spark/zookeeper-releases.png" alt="zookeeper-release"></p><h3><span id="集群规划">集群规划</span></h3><p>在node1，node2和node3三个节点上部署zookeeper，三个节点都已安装jdk。</p><table><thead><tr><th style="text-align:center">IP</th><th style="text-align:center">节点名称</th><th style="text-align:center">zookeeper</th></tr></thead><tbody><tr><td style="text-align:center">192.168.100.21</td><td style="text-align:center">spark-node1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">192.168.100.22</td><td style="text-align:center">spark-node2</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">192.168.100.23</td><td style="text-align:center">spark-node3</td><td style="text-align:center"></td></tr></tbody></table><h3><span id="解压安装">解压安装</span></h3><ol><li>解压zookeeper按转包到<code>/opt/</code>目录下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf zookeeper-3.4.12.tar.gz -C /opt/</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>/opt/</code> 创建软连接</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/zookeeper-3.4.12 /opt/zookeeper</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>/opt/zookeeper</code>目录下创建data</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/zookeeper/data</span><br></pre></td></tr></table></figure><ol start="4"><li>覆盖zookeeper的安装配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /opt/zookeeper/conf/zoo_sample.cfg /opt/zookeeper/conf/zoo.cfg</span><br></pre></td></tr></table></figure><h3><span id="配置zoocfg文件">配置zoo.cfg文件</span></h3><p>具体配置，修改dateDir，添加日志存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/opt/zookeeper/data</span><br><span class="line">dataLogDir=/opt/zookeeper/logs</span><br></pre></td></tr></table></figure><p>末尾增加如下配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.1=spark-node1:2888:3888</span><br><span class="line">server.2=spark-node2:2888:3888</span><br><span class="line">server.3=spark-node3:2888:3888</span><br></pre></td></tr></table></figure><h3><span id="集群配置">集群配置</span></h3><ol><li>在<code>/opt/zookeeper/data</code>目录下创建一个myid的文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch myid</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑myid文件，在文件中添加与server对应的编号：如 1</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim myid</span><br></pre></td></tr></table></figure><ol start="3"><li>拷贝配置好的zookeeper到其它机器上</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r zookeeper*/ xxx@spark-node2:/opt/</span><br><span class="line">scp -r zookeeper*/ xxx@spark-node3:/opt/</span><br></pre></td></tr></table></figure><p>并修改spark-node2，spark-node3中myid文件中内容为2、3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 2 &gt; myid</span><br><span class="line"><span class="built_in">echo</span> 3 &gt; myid</span><br></pre></td></tr></table></figure><h3><span id="启动集群">启动集群</span></h3><ol><li>分别启动zookeeper</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh start</span><br><span class="line">bin/zkServer.sh start</span><br><span class="line">bin/zkServer.sh start</span><br></pre></td></tr></table></figure><ol start="2"><li>查看状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/zookeeper-3.4.12/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follwer</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="3"><li>停止zookeeper</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zkServer.sh stop</span><br></pre></td></tr></table></figure><h3><span id="加入systemd管理">加入Systemd管理</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/zookeeper.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Zookeeper service</span><br><span class="line">After=syslog.target etwork.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment=ZOO_LOG_DIR=/opt/zookeeper/data/logs</span><br><span class="line">ExecStart=/opt/zookeeper/bin/zkServer.sh start</span><br><span class="line">ExecStop=/opt/zookeeper/bin/zkServer.sh stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3><span id="配置环境变量">配置环境变量</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/opt/zookeeper-3.4.12 </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br></pre></td></tr></table></figure><h3><span id="zoocfg配置参数解读">zoo.cfg配置参数解读</span></h3><p>Server.A=B:C:D。</p><p>A是一个数字，表示这个是第几号服务器；</p><p>B是这个服务器的ip地址；</p><p>C是这个服务器与集群中的Leader服务器交换信息的端口；</p><p>D是万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时服务器相互通信的端口。</p><p>集群模式下配置一个文件myid，这个文件在dataDir目录下，这个文件里面有一个数据就是A的值，Zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。</p><ol><li>tickTime=2000：通信心跳数</li></ol><p>tickTime：通信心跳数，Zookeeper服务器心跳时间，单位毫秒</p><p>Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。</p><p>它用于心跳机制，并且设置最小的session超时时间为两倍心跳时间。(session的最小超时时间是2 x tickTime)</p><p>2)initLimit=10：LF初始通信时限</p><p>集群中的follower跟随者服务器(F)与leader领导者服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。</p><p>投票选举新leader的初始化时间</p><p>Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。</p><p>Leader允许F在initLimit时间内完成这个工作。</p><p>3)syncLimit=5：LF同步通信时限</p><p>集群中Leader与Follower之间的最大响应时间单位，假如响应超过syncLimit x tickTime，</p><p>Leader认为Follwer死掉，从服务器列表中删除Follwer。</p><p>在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。</p><p>如果L发出心跳包在syncLimit之后，还没有从F那收到响应，那么就认为这个F已经不在线了。</p><p>4)dataDir：数据文件目录+数据持久化路径</p><p>保存内存数据库快照信息的位置，如果没有其他说明，更新的事务日志也保存到数据库。</p><p>5)clientPort=2181：客户端连接端口</p><p>监听客户端连接的端口</p><h2><span id="客户端命令行操作">客户端命令行操作</span></h2><ol><li>启动客户端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkCli.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>显示所有操作命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] <span class="built_in">help</span></span><br><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">    <span class="built_in">stat</span> path [watch]</span><br><span class="line">    <span class="built_in">set</span> path data [version]</span><br><span class="line">    ls path [watch]</span><br><span class="line">    delquota [-n|-b] path</span><br><span class="line">    ls2 path [watch]</span><br><span class="line">    setAcl path acl</span><br><span class="line">    setquota -n|-b val path</span><br><span class="line">    <span class="built_in">history</span> </span><br><span class="line">    redo cmdno</span><br><span class="line">    printwatches on|off</span><br><span class="line">    delete path [version]</span><br><span class="line">    sync path</span><br><span class="line">    listquota path</span><br><span class="line">    rmr path</span><br><span class="line">    get path [watch]</span><br><span class="line">    create [-s] [-e] path data acl</span><br><span class="line">    addauth scheme auth</span><br><span class="line">    quit </span><br><span class="line">    getAcl path</span><br><span class="line">    close </span><br><span class="line">    connect host:port</span><br></pre></td></tr></table></figure><ol start="3"><li>查看当前znode中所包含的内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure><ol start="4"><li>查看当前节点数据并能看到更新次数等数据</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] ls2 /</span><br><span class="line">[zookeeper]</span><br><span class="line">cZxid = 0x0</span><br><span class="line">ctime = Wed Dec 31 19:00:00 EST 1969</span><br><span class="line">mZxid = 0x0</span><br><span class="line">mtime = Wed Dec 31 19:00:00 EST 1969</span><br><span class="line">pZxid = 0x0</span><br><span class="line">cversion = -1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 1</span><br></pre></td></tr></table></figure><ol start="5"><li>创建普通节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] create /opt <span class="string">"aa"</span></span><br><span class="line">Created /opt</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] create /opt/s <span class="string">"bb"</span></span><br><span class="line">Created /opt</span><br></pre></td></tr></table></figure><ol start="6"><li>获取节点值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 5] get /opt</span><br><span class="line">aa</span><br><span class="line">cZxid = 0x4100000004</span><br><span class="line">ctime = Wed Jul 25 07:48:55 EDT 2018</span><br><span class="line">mZxid = 0x4100000004</span><br><span class="line">mtime = Wed Jul 25 07:48:55 EDT 2018</span><br><span class="line">pZxid = 0x4100000005</span><br><span class="line">cversion = 1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 2</span><br><span class="line">numChildren = 1</span><br><span class="line">[zk: localhost:2181(CONNECTED) 6] get /opt/s</span><br><span class="line">bb</span><br><span class="line">cZxid = 0x4100000005</span><br><span class="line">ctime = Wed Jul 25 07:51:21 EDT 2018</span><br><span class="line">mZxid = 0x4100000005</span><br><span class="line">mtime = Wed Jul 25 07:51:21 EDT 2018</span><br><span class="line">pZxid = 0x4100000005</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 2</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><ol start="7"><li>创建短暂节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] create -e /app 8888           </span><br><span class="line">Created /app</span><br></pre></td></tr></table></figure><p>在当前客户端是能查看到的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 8] ls /</span><br><span class="line">[app, opt, zookeeper]</span><br></pre></td></tr></table></figure><p>退出当前客户端然后再重启客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 9] quit</span><br><span class="line">[root@spark-node2 zookeepe]$ bin/zkCli.sh</span><br></pre></td></tr></table></figure><p>再次查看根目录下短暂节点已经删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /</span><br><span class="line">[opt, zookeeper]</span><br></pre></td></tr></table></figure><ol start="8"><li>创建带序号的节点</li></ol><p>先创建一个普通的根节点app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] create /app <span class="string">"app"</span></span><br><span class="line">create /app <span class="string">"app"</span></span><br></pre></td></tr></table></figure><p>创建带序号的节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] create -s /app/aa 888</span><br><span class="line">Created /app/aa0000000000</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] create -s /app/bb 888</span><br><span class="line">Created /app/bb0000000001</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] create -s /app/cc 888</span><br><span class="line">Created /app/cc0000000002</span><br></pre></td></tr></table></figure><p>如果原节点下有1个节点，则在排序时从1开始，以此类推。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 5] create -s /opt/aa 888</span><br><span class="line">Created /opt/aa0000000001</span><br></pre></td></tr></table></figure><ol start="9"><li>修改节点数据值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 6] <span class="built_in">set</span> /opt 999</span><br><span class="line">cZxid = 0x4100000004</span><br><span class="line">ctime = Wed Jul 25 07:48:55 EDT 2018</span><br><span class="line">mZxid = 0x410000000e</span><br><span class="line">mtime = Wed Jul 25 08:14:18 EDT 2018</span><br><span class="line">pZxid = 0x410000000d</span><br><span class="line">cversion = 2</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 3</span><br><span class="line">numChildren = 2</span><br></pre></td></tr></table></figure><ol start="10"><li>节点的值变化监听</li></ol><p>在spark-node2主机上注册监听/opt节点数据变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zkCli.sh</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] get /opt watch</span><br></pre></td></tr></table></figure><p>在spark-node1主机上修改/opt节点的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] <span class="built_in">set</span> /opt 777</span><br></pre></td></tr></table></figure><p>观察spark-node2主机收到数据变化的监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] </span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeDataChanged path:/opt</span><br></pre></td></tr></table></figure><ol start="11"><li>节点的子节点变化监听(路径变化)</li></ol><p>在spark-node2主机上注册监听/opt节点的子节点变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /opt watch</span><br><span class="line">[aa0000000001, module]</span><br></pre></td></tr></table></figure><p>在spark-node2主机/opt节点上创建子节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 8] create /opt/bb 666</span><br><span class="line">Created /opt/bb</span><br></pre></td></tr></table></figure><p>观察spark-node2主机收到子节点变化的监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] </span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeChildrenChanged path:/opt</span><br></pre></td></tr></table></figure><ol start="12"><li>删除节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 9] delete /opt/bb</span><br></pre></td></tr></table></figure><ol start="13"><li>递归删除节点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 10] rmr /opt</span><br></pre></td></tr></table></figure><ol start="14"><li>查看节点状态</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 14] <span class="built_in">stat</span> /app</span><br><span class="line">cZxid = 0x4100000009</span><br><span class="line">ctime = Wed Jul 25 08:09:56 EDT 2018</span><br><span class="line">mZxid = 0x4100000009</span><br><span class="line">mtime = Wed Jul 25 08:09:56 EDT 2018</span><br><span class="line">pZxid = 0x410000000c</span><br><span class="line">cversion = 3</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 3</span><br><span class="line">numChildren = 3</span><br></pre></td></tr></table></figure><ol start="15"><li>退出客户端</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 17] quit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;分布式安装部署&quot;&gt;分布式安装部署&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;官网首页：&lt;a href=&quot;https://zookeeper.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://galudisu.info/tags/zookeeper/"/>
    
  </entry>
  
</feed>
