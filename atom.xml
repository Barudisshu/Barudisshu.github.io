<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简单易懂の现代魔法</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://galudisu.info/"/>
  <updated>2019-11-05T03:57:07.976Z</updated>
  <id>http://galudisu.info/</id>
  
  <author>
    <name>barudisshu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第八章 React Redux</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_8_React_Redux/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_8_React_Redux/</id>
    <published>2019-11-27T07:50:08.000Z</published>
    <updated>2019-11-05T03:57:07.976Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Principles and key concepts</li><li>Installing Redux</li><li>Creating reducers</li><li>Creating actions</li><li>Creating a store</li><li>Connecting our React App to the store</li><li>Managing state with use Reducer</li></ul><h2><span id="principles-and-key-concepts">Principles and key concepts</span></h2><h3><span id="principles">Principles</span></h3><p>Redux的三大原则：</p><ul><li><strong>Single source of truth</strong>：意味着整个项目的状态被存储在一个单一对象。在一个真实应用系统中，这个对象很可能包含了一个复杂的内嵌对象树。</li><li><strong>State is read-only</strong>：意味着状态不能被直接改变。就是说不能通过组件来改变状态。在Redux中，唯一能改变状态的方法是通过action进行传递(dispatch)。</li><li><strong>Changes are made with pure functions</strong>：那些能够改变状态的函数被称为“<code>reducer</code>”。</li></ul><p>接下来的环节，会深入介绍action和reducer以及消息的store内容。</p><h3><span id="key-concepts">Key concepts</span></h3><p>Redux内存活的整个应用的状态被称为一个<code>store</code>。状态被存储在一个JavaScript对象中，形式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  products: [&#123; id: 1, name: "Table", ...&#125;, &#123;...&#125;, ...],</span><br><span class="line">  productsLoading: false,</span><br><span class="line">  currentProduct: &#123; id: 2, xname: "Chair", ... &#125;,</span><br><span class="line">  basket: [&#123; product: &#123; id: 2, xname: "Chair" &#125;, quantity: 1 &#125;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>状态不会包含有任何函数、setter或者getter。它就是一个简单的JavaScript对象。</p><p>要更新一个store中的state，就是派遣一个<strong>action</strong>。其中action又是另外一个简单的JavaScript对象，格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: "PRODUCTS/LOADING"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>type</code>属性决定了哪种action需要被处理。<code>type</code>是必须的，否则reducer不知道如何改变状态。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: "PRODUCTS/GETSINGLE",</span><br><span class="line">  product: &#123; id: 1, name: "Table", ...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个带有一个额外的属性值，因为reducer除了要知道action的类型外，还要获取更新的内容。</p><p>因此，reducer是纯函数。</p><blockquote><p>纯函数就是不依赖于外部自由变量的函数，对于给定的输入，总能得到相同的结果。</p></blockquote><p>下面是reducer的一个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export const productsReducer = (state = initialProductState, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &quot;PRODUCTS/LOADING&quot;: &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    ...state,</span><br><span class="line">productsLoading: true</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">case &quot;PRODUCTS/GETSINGLE&quot;: &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    ...state,</span><br><span class="line">currentProduct: action.product,</span><br><span class="line">productsLoading: false</span><br><span class="line">  &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">default:</span><br><span class="line">  &#125;</span><br><span class="line">  return state || initialProductState;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于reducer有几点：</p><ul><li>reducer接收两个参数，current state 和要处理的action</li><li>reducer第一次被调用时，state参数默认为一个初始化状态对象</li><li>这里需要使用switch语句处理不同的action类型</li><li>返回语句表示创建一个新的状态覆盖原来已有的状态属性</li><li>reducer返回新的(更新的)状态</li></ul><p>你会注意action和reducer都不是TypeScript类型的。下面开始实战。</p><h2><span id="installing-redux">Installing Redux</span></h2><p>在使用Redux之前，需要安装依赖项。另外还需要安装一个库<code>redux-thunk</code>，以实现异步的ation:</p><ol><li>安装redux,</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux</span><br></pre></td></tr></table></figure><ol start="2"><li>安装具体的redux的关联框架，</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add rect-redux</span><br></pre></td></tr></table></figure><ol start="3"><li>对应TS，</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @types/react-redux</span><br></pre></td></tr></table></figure><ol start="4"><li>安装<code>redux-thunk</code>，</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux-thunk</span><br><span class="line">yarn add -D @types/redux-thunk</span><br></pre></td></tr></table></figure><h2><span id="creating-actions">Creating actions</span></h2><p>这里将沿用前面章节使用的代码，将Redux集成到产品页面上。本小节，我们会创建action获取产品内容。以及使用另外一个action更改新的状态。</p><p>在此之前，首先在<code>ProductsData.ts</code>创建一个假的API，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getProducts = <span class="keyword">async</span> (): <span class="built_in">Promise</span>&lt;IProduct[]&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> wait(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> products;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数异步等待返回的产品信息。</p><h3><span id="creating-state-and-action-types">Creating state and action types</span></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Principles and key concepts&lt;/li&gt;
&lt;li&gt;Installing Redux&lt;/li&gt;
&lt;li&gt;Creating reducers&lt;/li&gt;
&lt;li&gt;Creating actions&lt;/li&gt;
&lt;li&gt;Creating a stor
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第七章 表单</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_7_Working_with_Forms/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_7_Working_with_Forms/</id>
    <published>2019-11-27T07:50:07.000Z</published>
    <updated>2019-11-05T03:57:08.008Z</updated>
    
    <content type="html"><![CDATA[<ul><li>creating a form with controlled components</li><li>Reducing boilerplate code with generic components</li><li>Validating forms</li><li>Form submission</li></ul><h2><span id="creating-a-form-with-controlled-components">Creating a form with controlled components</span></h2><p>表单是大部分应用的常见内容。在React中，创建表单的标准方式是使用被称为 <em>controlled component</em> 的组件。</p><h3><span id="adding-a-contact-us-page">Adding a Contact Us page</span></h3><p>在src目录添加一个新的文件<code>ContactUsPage.tsx</code>，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class ContactUsPage extends React.Component &#123;</span><br><span class="line">public render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">&lt;h1&gt;Contact Us&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">If you enter your details we&apos;ll get back to you as soon as we can.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ContactUsPage;</span><br></pre></td></tr></table></figure><p>该组件需要包含状态，目前首先创建了header相关信息。接下来，导入该组件到页面中，打开<code>Routes.tsx</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ContactUsPage from &quot;./ContactUsPage&quot;;</span><br></pre></td></tr></table></figure><p>在<code>Routes</code>组件的<code>render</code>方法中，添加新的路由，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">&lt;Redirect exact=&#123;true&#125; from=&quot;/&quot; to=&quot;/products&quot; /&gt;</span><br><span class="line">&lt;Route path=&quot;/products/:id&quot; component=&quot;&#123;ProductPage&#125; /&gt;</span><br><span class="line">&lt;Route exact=&#123;true&#125; path=&quot;/products&quot; compoent=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;contactus&quot; component=&#123;ContactUsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">&lt;Route path=&quot;/login&quot; compoent=&#123;LoginPage&#125; /&gt;</span><br><span class="line">&lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><p>打开<code>Header.tsx</code>，添加新的导航信息，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">&lt;NavLink to=&quot;/products&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;</span><br><span class="line">  Products</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink to=&quot;/contactus&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;</span><br><span class="line">  Contact Us</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink to=&quot;/admin&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;</span><br><span class="line">  Admin</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><p>现在，页面已经创建了，下面创建表单输入框。</p><h2><span id="creating-controlled-inputs">Creating controlled inputs</span></h2><p>在src目录下创建一个新文件<code>ContactUs.tsx</code>，包含下面内容，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const ContactUs: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ContactUs;</span><br></pre></td></tr></table></figure><p>这是一个功能组件，渲染一个表单包含label和用户名的输入框。</p><p>现在需要添加对应的css样式，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> auto <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-start;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: lightgray solid <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在我们页面<code>ContactUsPage.tsx</code>添加并渲染表单，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ContactUs from &quot;./ContactUs&quot;;</span><br></pre></td></tr></table></figure><p>在<code>render</code>方法中添加，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Contact Us&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;If you enter your details we&apos;ll get back to you as soon as we can.&lt;/p&gt;</span><br><span class="line">  &lt;ContactUs /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>表单已经创建好了，但需要创建一个状态类型到<code>ContactUsPage</code>页面中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  email: string;</span><br><span class="line">  reason: string;</span><br><span class="line">  notes: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContactUsPage extends React.Component&lt;&#123;&#125;, IState&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>在构造器中初始化状态，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public constructor(props: &#123;&#125;) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    email: &quot;&quot;,</span><br><span class="line">name: &quot;&quot;,</span><br><span class="line">notes: &quot;&quot;,</span><br><span class="line">reason: &quot;&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要将<code>ContactUsPage</code>中的状态传递到<code>ContactUs</code>组件中。在<code>ContactUs</code>组件中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  email: string;</span><br><span class="line">  reason: string;</span><br><span class="line">  notes: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>将表单名name绑定到<code>name</code>属性中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; id=&quot;name&quot; value=&#123;props.name&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>将表单状态传递给<code>ContactUsPage</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContactUs</span><br><span class="line">  name=&#123;this.state.name&#125;</span><br><span class="line">  emial=&#123;this.state.email&#125;</span><br><span class="line">  reason=&#123;this.state.reason&#125;</span><br><span class="line">  notes=&#123;this.state.notes&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>添加事件监听，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;name&quot; value=&#123;props.name&#125; onChange=&#123;handleNameChange&#125; /&gt;</span><br></pre></td></tr></table></figure><p>创建对应的handler，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  const handleNameChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">    props.onNameChange(e.currentTarget.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  return ( ... );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是使用到了<code>React.ChangeEvent</code>。我们需要添加<code>onNameChange</code>函数到IProps中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  onNameChange: (name: string) =&gt; void;</span><br><span class="line">  email: string;</span><br><span class="line">  onEmailChange: (email: string) =&gt;void;</span><br><span class="line">  reason: string;</span><br><span class="line">  onReasonChange: (reason: string) =&gt; void;</span><br><span class="line">  notes: string;</span><br><span class="line">  onNotesChange: (notes: string) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在需要将来自<code>ContactUsPage</code>的Props传递到<code>ContactUs</code>中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContactUs</span><br><span class="line">  name=&#123;this.state.name&#125;</span><br><span class="line">  onNameChange=&#123;this.handleNameChange&#125;</span><br><span class="line">  email=&#123;this.state.email&#125;</span><br><span class="line">  onEmailChange=&#123;this.handleEmailChange&#125;</span><br><span class="line">  reason=&#123;this.state.reason&#125;</span><br><span class="line">  onReasonChange=&#123;this.handleReasonChange&#125;</span><br><span class="line">  notes=&#123;this.state.notes&#125;</span><br><span class="line">  onNotesChange=&#123;this.handleNotesChange&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来创建对应的handlers方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private handleNameChange = (name: string =&gt; &#123;</span><br><span class="line">  this.setState(&#123; name &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">private handleEmailChange = (email: string) =&gt; &#123;</span><br><span class="line">  this.setState(&#123; email &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">private handleReasonChange = (reason: string) =&gt; &#123;</span><br><span class="line">  this.setState(&#123; reason &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">private handleNotesChange = (notes: string) =&gt; &#123;</span><br><span class="line">  this.setState(&#123; notes &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来在<code>ContactUs</code>中补充其它表单内容，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      id=&quot;name&quot;</span><br><span class="line">      value=&#123;props.name&#125;</span><br><span class="line">      onChange=&#123;handleNameChange&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;email&quot;&gt;Your email address&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;email&quot; value=&#123;props.email&#125; onChange=&#123;handleEmailChange&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;reason&quot;&gt;Reason you need to contact us&lt;/label&gt;</span><br><span class="line">    &lt;select id=&quot;reason&quot; value=&#123;props.reason&#125; onChange=&#123;handleReasonChange&#125;&gt;</span><br><span class="line">      &lt;option value=&quot;Marketing&quot;&gt;Marketing&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Support&quot; selected=&#123;true&#125;&gt;Support&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Feedback&quot;&gt;Feedback&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Jobs&quot;&gt;Jobs&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;notes&quot;&gt;Additional notes&lt;/label&gt;</span><br><span class="line">    &lt;textarea id=&quot;notes&quot; value=&#123;props.notes&#125; onChange=&#123;handleNotesChange&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>现在创建这些handler的函数属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const handleEmailChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;)</span><br><span class="line">=&gt; &#123;</span><br><span class="line">props.onEmailChange(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br><span class="line">const handleReasonChange = (e:</span><br><span class="line">React.ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; &#123;</span><br><span class="line">props.onReasonChange(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br><span class="line">const handleNotesChange = (e:</span><br><span class="line">React.ChangeEvent&lt;HTMLTextAreaElement&gt;) =&gt; &#123;</span><br><span class="line">props.onNotesChange(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2><span id="reducing-boilerplate-code-with-generic-components">Reducing boilerplate code with generic components</span></h2><p>通用表单组件将有利于减少表单代码的重复实现。我们重构上面的<code>ContactUs</code>组件来实现generic form components。</p><p>假设我们希望，理想情况下消费组件<code>ContactUs</code>内容的generic component组件的形式如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form</span><br><span class="line">defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;Form.Field name=&quot;name&quot; label=&quot;Your name&quot; /&gt;</span><br><span class="line">&lt;Form.Field name=&quot;email&quot; label=&quot;Your email address&quot; type=&quot;Email&quot; /&gt;</span><br><span class="line">&lt;Form.Field name=&quot;reason&quot; label=&quot;Reason you need to contact us&quot;</span><br><span class="line">type=&quot;Select&quot; options=&#123;[&quot;Marketing&quot;, &quot;Support&quot;, &quot;Feedback&quot;, &quot;Jobs&quot;,</span><br><span class="line">&quot;Other&quot;]&#125; /&gt;</span><br><span class="line">&lt;Form.Field name=&quot;notes&quot; label=&quot;Additional notes&quot; type=&quot;TextArea&quot; /&gt;</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>在这个示例中，有两个通用合成组件：<code>Form</code>和<code>Field</code>。它们有某些特点，</p><ul><li><code>Form</code>组件是用于合成、管理状态和交互的。</li><li><code>Fomr</code>组件使用<code>defaultValues</code>属性来传递默认值。</li><li><code>Field</code>组件渲染label和每个字段的一个编辑器。</li><li>每个字段包含一个<code>name</code>属性，并被存储在对应的state属性名内。</li><li>每个字段有一个<code>label</code>属性用于展示每个字段的标签。</li><li>特殊字段用<code>type</code>属性标识。默认的属性为文本类型<code>input</code>。</li><li>如果编辑器类型是<code>Select</code>，我们可以通过<code>options</code>属性指定。</li></ul><p>新版本的<code>ContactUs</code>组件相比原来的更简短、更易用。状态的管理和事件的处理被隐藏和封装在<code>Form</code>组件内。</p><h3><span id="creating-a-basic-form-component">Creating a basic form component</span></h3><p>下面开始构建我们的通用<code>Form</code>组件；</p><ol><li>在<code>src</code>文件夹下创建一个新的文件<code>Form.tsx</code>，包含下面内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;&#125;</span><br><span class="line"></span><br><span class="line">interface IState &#123;&#125;</span><br><span class="line"></span><br><span class="line">export class Form extends React.Component&lt;IFormProps, IState&gt; &#123;</span><br><span class="line">  constructor(props: IFormProps) &#123;&#125;</span><br><span class="line">  public render() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Form</code>是一个基类组件，因为它需要管理状态。我们将属性接口命名为<code>IFormProps</code>，因为之后我们将需要一个字段属性的接口。</p><ol start="2"><li>添加一个<code>defaultValues</code>属性到<code>IFormProps</code>接口中，它为每个字段提供默认值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export interface IValues &#123;</span><br><span class="line">  [key: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;</span><br><span class="line">  defaultValues: IValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用一个额外的接口<code>IValues</code>，它是一个索引的key/value类型<code>[key: string]: any</code>，key是字段名，value是字段值。</p><p>因此，<code>defaultValues</code>属性可以是，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: "", email: "", reason: "Support", notes: "" &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于表单的state，需要存储这个接口类型，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>接下来需要在构造方法中初始化组件的状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: IFormProps) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state =  &#123;</span><br><span class="line">    values: props.defaultValues</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>最后一步，实现<code>render</code>方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  return (</span><br><span class="line">  &lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">  &#123;this.props.children&#125;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>form</code>标签中渲染子组件，使用了<code>children</code>属性。</p><p>接下来，我们需要实现我们的<code>Field</code>组件。</p><h3><span id="adding-a-basic-field-component">Adding a basic Field component</span></h3><p><code>Field</code>组件需要渲染一个标签(label)和一个编辑框(editor)。</p><ol><li>首先在<code>Form.tsx</code>中创建一个接口属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IFieldProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  label: string;</span><br><span class="line">  type?: &quot;Text&quot; | &quot;Email&quot; | &quot;Select&quot; | &quot;TextArea&quot;;</span><br><span class="line">  options?: string[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>表示字段名</li><li><code>label</code>是展示标签</li><li><code>type</code>输入类型，可选</li><li><code>options</code>，仅作用于当<code>type</code>是<code>Select</code>时，可选</li></ul><ol start="2"><li>现在添加<code>Field</code>属性字段的骨架，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Field: React.SFC&lt;IFieldProps&gt; = props =&gt; &#123;</span><br><span class="line">  return ();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>另外，首先添加<code>type</code>字段的默认属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Form.Field.defaultProps = &#123;</span><br><span class="line">  type: &quot;Text&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样，默认的<code>type</code>是一个文本类型，</p><ol start="4"><li>现在，渲染它的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static Field: React.SFC&lt;IFieldProps&gt; = props =&gt; &#123;</span><br><span class="line">  const &#123; name, label, type, options &#125; = props;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&#123;name&#125;&gt;&#123;label&#125;&lt;/label&gt;</span><br><span class="line">  &lt;input type=&#123;type.toLowerCase()&#125; id=&#123;name&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  ）；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这虽然是好的开头，但是，仅使用<code>Text</code>和<code>Email</code>类型。</p><ol start="5"><li>因此，需要添加合适的条件进行渲染，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;type === &quot;TextArea&quot; ... &#125;</span><br><span class="line"></span><br><span class="line">&#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">  &lt;select&gt;</span><br><span class="line">    &#123;options &amp;&amp;</span><br><span class="line">      options.map(option =&gt; (</span><br><span class="line">        &lt;option key=&#123;option&#125; value=&#123;option&#125;&gt;</span><br><span class="line">          &#123;option&#125;</span><br><span class="line">        &lt;/option&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><h3><span id="sharing-state-with-react-context">Sharing state with React context</span></h3><p><code>Form</code>组件内的字段值状态，需要在<code>Field</code>组件内共享，即可以通过<code>Field</code>组件访问和修改。</p><ol><li>首先在<code>Form.tsx</code>创建一个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>IFormContext</code>下使用<code>React.createContext</code>创建一个上下文创建(context component)，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const FormContext = React.createContext&lt;IFormContext&gt;(&#123;</span><br><span class="line">  values: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>Form</code>的<code>render</code>方法中，创建包含上下文的值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const context: IFormContext = &#123;</span><br><span class="line">    values: this.state.values</span><br><span class="line">  &#125;;</span><br><span class="line">  return ( ... )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>包装表单标签，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormContext.Provider value=&#123;context&#125;&gt;</span><br><span class="line">  &lt;form ... &gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/FormContext.Provider&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>Field</code>上下文进行消费，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormContext.Consumer&gt;</span><br><span class="line">  &#123;context =&gt; (</span><br><span class="line">    &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/FormContext.Consumer&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>现在可以访问这些上下文了，下面补充剩余的输入框，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&#123;name&#125;&gt;&#123;label&#125;&lt;/label&gt;</span><br><span class="line">  &#123;(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</span><br><span class="line">     &lt;input type=&#123;type.toLowerCase() id=&#123;name&#125; value=&#123;context.values[name]&#125; /&gt;</span><br><span class="line">   )&#125;</span><br><span class="line">   </span><br><span class="line">   &#123;type === &quot;TextArea&quot; &amp;&amp; (</span><br><span class="line">     &lt;textarea id=&#123;name&#125; value=&#123;context.values[name]&#125; /&gt;</span><br><span class="line">   )&#125;</span><br><span class="line">   </span><br><span class="line">   &#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">     &lt;select value=&#123;context.values[name]&#125;&gt;</span><br><span class="line"> ...</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">   )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>目前还没有添加事件用于更新上下文的状态，需要实现相应的事件处理机制。</p><ol start="7"><li>在<code>Form</code>类中创建一个<code>setValue</code>方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private setValue = (fieldName: string, value: any) =&gt; &#123;</span><br><span class="line">  const newValues = &#123; ...this.state.values, [fieldName]: value &#125;;</span><br><span class="line">  this.setState(&#123; values: newValues &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该方法包含有：</p><ul><li>该方法接收fieldName和value作为参数。</li><li>状态被更新为<code>newValues</code>，旧的值被更新，没有则添加。</li><li>新值被更新了。</li></ul><ol start="8"><li>接下来在<code>Field</code>组件中创建该方法的一个上下文属性，以实现访问，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  setValue?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>对应地，在<code>Form</code>组件也创建一个上下文属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const context: IFormContext = &#123;</span><br><span class="line">  setValue: this.setValue,</span><br><span class="line">  values: this.state.values</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="10"><li>现在可以在<code>Field</code>组件中访问该方法了。在<code>Field</code>中，即在解构(destucture)对象props后面，创建对应的事件Hnadler，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const &#123; name, label, type, options &#125; = props;</span><br><span class="line"></span><br><span class="line">const handleChange = (</span><br><span class="line">  e:</span><br><span class="line">    | React.ChangeEvent&lt;HTMLInputElement&gt;</span><br><span class="line">    | React.ChangeEvent&lt;HTMLTextAreaElement&gt;</span><br><span class="line">    | React.ChangeEvent&lt;HTMLSelectElement&gt;,</span><br><span class="line">  context: IFormContext</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  if (context.setValue) &#123;</span><br><span class="line">    context.setValue(props.name, e.currentTarget.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该方法有几个关键的地方：</p><ul><li>TypeScript的事件改变类型是<code>ChangeEvent&lt;T&gt;</code>，其中<code>T</code>是被处理的元素。</li><li>该方法的第一个参数<code>e</code>，对应事件类型，组合(union)了所有不同的输入框事件，方便对事件进行统一处理。</li><li>该方法的第二个参数是表单上线文。</li><li>方法体内加入了条件语句，以确保编译顺利。</li><li>调用<code>setValue</code>方法更新或添加新值。</li></ul><ol start="11"><li>现在可以为<code>input</code>输入框添加这个事件处理，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input </span><br><span class="line">  type=&#123;type.toLowerCase() &#125;</span><br><span class="line">  id=&#123;name&#125;</span><br><span class="line">  value=&#123;context.values[name] &#125;</span><br><span class="line">  onChange=&#123;e =&gt; handleChange(e, context) &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ol start="12"><li>对于<code>textarea</code>标签，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea</span><br><span class="line">  id=&#123;name&#125;</span><br><span class="line">  value=&#123;context.values[name]&#125;</span><br><span class="line">  onChange=&#123;e =&gt; handleChange(e, context) &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ol start="13"><li>对于<code>select</code>标签，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select</span><br><span class="line">  value=&#123;context.values[name] &#125;</span><br><span class="line">  onChange=&#123;e =&gt; handleChange(e, context) &#125;</span><br><span class="line">&gt;</span><br><span class="line"> ...</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>现在，我们的<code>Form</code>和<code>Field</code>组件可以组合在一起工作了。</p><h3><span id="implementing-our-new-contactus-component">Implementing our new ContactUs component</span></h3><p>接下来，我们使用<code>Form</code>和<code>Field</code>重新实现我们的<code>ContactUs</code>组件。</p><ol><li><p>首先删除<code>ContactUs.tsx</code>中的props，</p></li><li><p>重新定义<code>ContactUs</code>的SFC，</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const ContactUs: React.SFC = () =&gt; &#123;</span><br><span class="line">  return ();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>ContactUs.tsx</code>中导入<code>Form</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Form &#125; from &quot;./Form&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>现在引用<code>Form</code>组件，带上默认值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> return (</span><br><span class="line">   &lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">&lt;/Form&gt;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><ol start="5"><li>添加<code>name</code>输入框，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">  &lt;Form.Field name=&quot;name&quot; label=&quot;Your name&quot; /&gt;</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>注意这个没有写<code>type</code>属性，则默认使用<code>text</code>填充，</p><ol start="6"><li>下面补充<code>email</code>，<code>reason</code>和<code>notes</code>字段，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">  &lt;Form.Field name=&quot;name&quot; label=&quot;Your name&quot; /&gt;</span><br><span class="line">  &lt;Form.Field name=&quot;email&quot; label=&quot;Your email address&quot; type=&quot;Email&quot; /&gt;</span><br><span class="line">  &lt;Form.Field</span><br><span class="line">    name=&quot;reason&quot;</span><br><span class="line">label=&quot;Reason you need to contact us&quot;</span><br><span class="line">type=&quot;Select&quot;</span><br><span class="line">options=&#123;[&quot;Marketing&quot;, &quot;Support&quot;, &quot;Feedback&quot;, &quot;Jobs&quot;, &quot;Other&quot;]&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Form.Field name=&quot;notes&quot; label=&quot;Additional notes&quot; type=&quot;TextArea&quot; /&gt;</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>接下来的<code>ContactUsPage</code>就变得简单了。它不需要包含任何状态(state)，因为状态的维护已经交由<code>Form</code>组件管理。我们也不需要传递任何属性(props)到<code>ContactUs</code>组件中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class ContactUsPage extends React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    return (</span><br><span class="line">  &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Contact Us&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  If you enter your details we&apos;ll get back to you as soon as we can.</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;ContactUs /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前为止这个通用组件变得易用并减少我们的重复代码，但还需添加表单验证的实现。</p><h2><span id="validating-forms">Validating forms</span></h2><p>为了提升用户体验，需要在表单中实现校验功能。</p><p>在<code>ContactUs</code>组件中我们需要实现的校验规则是：</p><ul><li>name和email应该被填充</li><li>name字段不少于2个字符</li></ul><h3><span id="adding-a-validatio-rules-prop-to-form">Adding a validatio rules prop to form</span></h3><p>首先思考如何在表单中指定校验规则。我们需要为一个字段指定一个或多个规则。某些规则可能会有参数，例如最小长度。以如下形式，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form</span><br><span class="line">  ...</span><br><span class="line">  validationRules=&#123;&#123;</span><br><span class="line">    email: &#123; validator: required &#125;,</span><br><span class="line">name: [&#123; validator: required &#125;, &#123; validator: minLength, arg: 3 &#125;]</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>首先在<code>Form</code>组件实现一个<code>validationRules</code>属性，</p><ol><li>在<code>Form.tsx</code>中定义一个<code>Validator</code>函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export type Validator= (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  values: IValues,</span><br><span class="line">  args?: any</span><br><span class="line">) =&gt; string;</span><br></pre></td></tr></table></figure><p>一个<code>Validator</code>函数包含字段名、值、以及一个可选参数，并返回string的字符串消息。如果输入内容合法，则返回空字符串。</p><ol start="2"><li>下面使用该类型创建一个<code>required</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const required: Validator = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  values: IValues,</span><br><span class="line">  args?: any</span><br><span class="line">): string =&gt;</span><br><span class="line">  values[fieldName] === undefined ||</span><br><span class="line">  values[fieldName] === null ||</span><br><span class="line">  values[fieldName] === &quot;&quot;</span><br><span class="line">    ? &quot;This must be populated&quot;</span><br><span class="line">: &quot;&quot;;</span><br></pre></td></tr></table></figure><p>这里需要将这个函数对外暴露使用。该函数会检测字段值是<code>undefined</code>、<code>null</code>还是空字符串，如果是则返回<code>This must be populated</code>的错误信息。</p><ol start="3"><li>类似地，创建一个长度判断的函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const minLength: Validator = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  values: IValues,</span><br><span class="line">  length: number</span><br><span class="line">): string =&gt;</span><br><span class="line">  values[fieldName] &amp;&amp; values[fieldName].length &lt; length ? `This must be at least $&#123;length&#125; characters`</span><br><span class="line">  : &quot;&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>接下来需要创建传递这些规则的props，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface IValidation &#123;</span><br><span class="line">  validator: Validator;</span><br><span class="line">  arg?: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IValidationProp &#123;</span><br><span class="line">  [key: string]: IValidation | IValidation[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;</span><br><span class="line">  defaultValues: IValues;</span><br><span class="line">  validationRules: IValidationProp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>validationRules</code>是一个索引key/value类型，其中key是字段名，value是一个或多个验证规则。</li><li>一个校验规则包含函数类型和一个参数。</li></ul><ol start="5"><li>有了<code>validationRules</code>后，在<code>ContactUs</code>中添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Form, minLenght, requied &#125; from &quot;./Forma&quot;;</span><br></pre></td></tr></table></figure><ol start="6"><li>现在，添加校验规则到<code>ContactUs</code>组件中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">  valiationRules=&#123;&#123;</span><br><span class="line">    email: &#123; validator: required &#125;,</span><br><span class="line">name: [&#123; validator: required &#125;, &#123; validator: minLength, arg: 2 &#125;]</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><h3><span id="tracking-validation-error-messages">Tracking validation error messages</span></h3><p>有必要跟踪用户的不合法输入信息，提供友好的用户体验。</p><p><code>Form</code>组件的职责用于管理表单状态，因此将错误信息添加到state中，</p><ol><li>定义错误信息类型，添加到<code>IState</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IErrors &#123;</span><br><span class="line">  [key: string]: string[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IState &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>errors</code>是一个key/value键值对，key为字段名，value为一组错误消息。</p><ol start="2"><li>在构造器中初始化<code>errors</code>的状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: IFormProps) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  const errors: IErrors = &#123;&#125;;</span><br><span class="line">  Object.keys(props.defaultValues).forEach(fieldName =&gt; &#123;</span><br><span class="line">    errors[fieldName] = [];</span><br><span class="line">  &#125;);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    errors,</span><br><span class="line">    values: props.defaultValues</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的<code>defaultValues</code>包含了所有字段名。当<code>Form</code>组件初始化，所有字段的错误信息为空。</p><ol start="3"><li><code>Field</code>组件最终被用于渲染校验的错误信息，因此需要将这些信息添加到表单上下文。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">  values: IValues;</span><br><span class="line">  setValue?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加一个空白的<code>error</code>字面量作为默认值。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const FormContext = React.createContext&lt;IFormContext&gt;(&#123;</span><br><span class="line">  errors: &#123;&#125;,</span><br><span class="line">  values: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>现在加入到context中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const context: IFormContext = &#123;</span><br><span class="line">    errors: this.state.errors,</span><br><span class="line">setValue: this.setValue,</span><br><span class="line">values: this.state.values</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，校验错误信息被设置在state中，并且可以被<code>Field</code>组件访问。接下来要创建一个方法来调用这些校验规则。</p><h3><span id="invoking-validation-rules">Invoking validation rules</span></h3><p>前面定义了校验规则，并且将校验信息关联到state中。但这些规则还没被调用。接下来我们要实现：</p><ol><li>我们需要在<code>Form</code>组件内创建一个方法，使用这些规则来校验字段。我们创建一个<code>validate</code>方法，它接收字段名和它的值。该方法会返回一个error message的数组信息，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private validate = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  value: any</span><br><span class="line">): string[] =&gt; &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>方法内，需要获取校验规则，并初始化返回信息<code>errors</code>。我们会收集校验的错误信息并存储在<code>errors</code>中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private validate = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  value: any</span><br><span class="line">): string[] =&gt; &#123;</span><br><span class="line">  const rules = this.props.validationRules[fieldName];</span><br><span class="line">  const errors: string[] = [];</span><br><span class="line">  </span><br><span class="line">  // TODO - execute all the validators</span><br><span class="line">  return errors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>上下文获取的规则可能是一个<code>IValidation</code>数组，也可能是一个<code>IValidation</code>对象。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const errors: string[] = [];</span><br><span class="line">if (Array.isArray(rules)) &#123;</span><br><span class="line">  // TODO - execute all the validators in the array of rules</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  if (rules) &#123;</span><br><span class="line">    const error = rules.validator(fieldName, this.state.values, rules.arg);</span><br><span class="line">if (error) &#123;</span><br><span class="line">  errors.push(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">return errors;</span><br></pre></td></tr></table></figure><ol start="4"><li>有多个校验规则时，我们可以使用<code>forEach</code>函数迭代执行，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (Array.isArray(rules)) &#123;</span><br><span class="line">  rules.forEach(rule =&gt; &#123;</span><br><span class="line">    const error = rule.validator(</span><br><span class="line">  fieldNmae,</span><br><span class="line">  this.state.values,</span><br><span class="line">  rule.arg</span><br><span class="line">    );</span><br><span class="line">if (error) &#123;</span><br><span class="line">  errors.push(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">return errors;</span><br></pre></td></tr></table></figure><ol start="5"><li>剩下的代码部分是，将校验的结果存储到表单状态<code>errors</code>中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (Array.isArray(rules)) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">const newErrors = &#123; ...this.state.errors, [fieldName]: errors &#125;;</span><br><span class="line">this.setState(&#123; errors: newErrors &#125;);</span><br><span class="line">return errors;</span><br></pre></td></tr></table></figure><ol start="6"><li>表单<code>Field</code>组件需要调用到这个<code>validate</code>方法。首先添加到<code>IFormContext</code>接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">  setValue?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">  validate?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>现在将它添加到<code>Form</code>渲染内容中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const context: IFormContext = &#123;</span><br><span class="line">    errors: this.state.errors,</span><br><span class="line">setValue: this.setValue,</span><br><span class="line">validate: this.validate,</span><br><span class="line">values: this.state.values</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单的校验和方法的调用已经完成了。但没有事件触发这个动作，</p><h3><span id="triggering-validation-rule-execution-from-field">TRiggering validation rule execution from field</span></h3><p>当用户输入表单内容后，我们希望校验规则在blur时触发，</p><ol><li>首先创建一个函数处理这些输入框触发的<code>blur</code>事件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const handleChange = (</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleBlur = (</span><br><span class="line">  e:</span><br><span class="line">    | React.FocusEvent&lt;HTMLInputElement&gt;</span><br><span class="line">| React.FocusEvent&lt;HTMLTextAreaElement&gt;</span><br><span class="line">| React.FocusEvent&lt;HTMLSelectElement&gt;,</span><br><span class="line">  context: IFormContext</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  if (context.validate) &#123;</span><br><span class="line">    context.validate(props.name, e.currentTarget.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">return ( ... )</span><br></pre></td></tr></table></figure><ul><li>TypeScript的blur事件是<code>FocusEvent&lt;T&gt;</code>，其中<code>T</code>是被处理的元素。</li><li>参数<code>e</code>作为事件对象。</li><li>第二个参数是表单上下文。</li><li>需要使用条件语句判断<code>validate</code>方法是否定义。</li><li>方法体内调用<code>valdiate</code>方法。</li></ul><ol start="2"><li>将事件引入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</span><br><span class="line">&lt;input</span><br><span class="line">type=&#123;type.toLowerCase()&#125;</span><br><span class="line">id=&#123;name&#125;</span><br><span class="line">value=&#123;context.values[name]&#125;</span><br><span class="line">onChange=&#123;e =&gt; handleChange(e, context)&#125;</span><br><span class="line">onBlur=&#123;e =&gt; handleBlur(e, context)&#125;</span><br><span class="line">/&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>类似地，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;type === &quot;TextArea&quot; &amp;&amp; (</span><br><span class="line">&lt;textarea</span><br><span class="line">id=&#123;name&#125;</span><br><span class="line">value=&#123;context.values[name]&#125;</span><br><span class="line">onChange=&#123;e =&gt; handleChange(e, context)&#125;</span><br><span class="line">onBlur=&#123;e =&gt; handleBlur(e, context)&#125;</span><br><span class="line">/&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">&lt;select</span><br><span class="line">value=&#123;context.values[name]&#125;</span><br><span class="line">onChange=&#123;e =&gt; handleChange(e, context)&#125;</span><br><span class="line">onBlur=&#123;e =&gt; handleBlur(e, context)&#125;</span><br><span class="line">&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>输入框字段会在失去焦点时触发校验动作。</p><h3><span id="rendering-validation-error-messages">Rendering validation error messages</span></h3><p>在此之前，需要将错误信息展示或者隐藏。</p><ol><li>添加<code>form-error</code>样式控制，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&#123;name&#125;&gt;&#123;label&#125;&lt;/label&gt;</span><br><span class="line">  &#123;(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</span><br><span class="line">    ...</span><br><span class="line">  )&#125;</span><br><span class="line">  &#123;type === &quot;TextArea&quot; &amp;&amp; (</span><br><span class="line">    ...</span><br><span class="line">  )&#125;</span><br><span class="line">  &#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">    ...</span><br><span class="line">  )&#125;</span><br><span class="line">&#123;context.errors[name] &amp;&amp;</span><br><span class="line">  context.errors[name].length &gt; 0 &amp;&amp;</span><br><span class="line">  context.errors[name].map(error =&gt; (</span><br><span class="line">    &lt;span key=&#123;error&#125; className=&quot;form-error&quot;&gt;</span><br><span class="line">       &#123;error&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  ))&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>首先检测有错误的字段，再将错误信息渲染出来。</p><ol start="2"><li>下面是css样式，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.form-error &#123;</span><br><span class="line">font-size: 13px;</span><br><span class="line">color: red;</span><br><span class="line">margin: 3px auto 0px 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="form-submission">Form submission</span></h2><p>表单触发提交动作时，同样也需要进行校验。</p><ol><li>首先添加提交按钮，在<code>Form</code>组件中添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormContext.Provider value=&#123;context&#125;&gt;</span><br><span class="line">  &lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">    &#123;this.props.children&#125;</span><br><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/FormContext.Provider&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>给按钮添加样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border</span>: black solid <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">button</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: gray solid <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="adding-a-onsubmit-form-prop">Adding a onSubmit form prop</span></h3><p>在我们的<code>Form</code>组件中，需要一个新的属性来消费表单的提交动作。</p><ol><li>在<code>Form</code>组件中创建一个prop函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export interface ISubmitResult &#123;</span><br><span class="line">  success: boolean;</span><br><span class="line">  errors?: IErrors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;</span><br><span class="line">  defaultValues: IValues;</span><br><span class="line">  validationRules: IValidationProp;</span><br><span class="line">  onSubmit: (values: IValues) =&gt; Promise&lt;ISubmitResult&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onSubmit</code>函数会接收filed的值，并异步返回提交的信息。</p><ol start="2"><li>另外需要添加状态记录表单的提交动作，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">  submitting: boolean;</span><br><span class="line">  submitted: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>另外需要在构造器初始化，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: IFormProps) &#123;</span><br><span class="line">  ...</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    errors,</span><br><span class="line">submitted: false,</span><br><span class="line">submitting: false,</span><br><span class="line">values: props.defaultValues</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>表单提交后按钮不可用，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;submit&quot;</span><br><span class="line">  disabled=&#123;this.state.submitting || this.state.submitted&#125;</span><br><span class="line">&gt;</span><br><span class="line">  Submit</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在表单中添加事件控制，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form className=&quot;form&quot; noValidate=&#123;true&#125; onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>下面模拟这个提交动作，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里使用了<code>preventDefault</code>避免浏览器自动提交。</p><ol start="7"><li>接下来就是重点，表单验证！</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private validateForm(): boolean &#123;</span><br><span class="line">  const errors: IErrors = &#123;&#125;;</span><br><span class="line">  let haveError: boolean = false;</span><br><span class="line">  Object.keys(this.props.defaultValues).map(fieldName =&gt; &#123;</span><br><span class="line">    errors[fieldName] = this.validate(</span><br><span class="line">      fieldName,</span><br><span class="line">      this.state.values[fieldName]</span><br><span class="line">    );</span><br><span class="line">    if (errors[fieldName].length &gt; 0) &#123;</span><br><span class="line">      haveError = true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  this.setState(&#123; errors &#125;);</span><br><span class="line">  return !haveError;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  if (this.validateForm()) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>表单的状态会更新到最新的校验错误信息，</p><ol start="8"><li>实现剩余的代码，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123; </span><br><span class="line">  e.preventDefault();</span><br><span class="line">  if (this.validateForm()) &#123;</span><br><span class="line">    this.setState(&#123; submitting: true &#125;);</span><br><span class="line">    const result = await this.props.onSubmit(this.state.values);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      errors: result.errors || &#123;&#125;,</span><br><span class="line">      submitted: result.success,</span><br><span class="line">      submitting: false</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3><span id="consuming-the-onsubmit-form-prop">Consuming the onSubmit form prop</span></h3><p>在本小节，将实现如何消费表单的提交内容。</p><ol><li>首先在<code>ContactUs</code>组件中导入<code>ISubmitResult</code>和<code>IValues</code>，用于处理提交的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Form, ISubmitResult, IValues, minLength, required &#125; from &quot;./Form&quot;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  onSubmit: (values: IValues) =&gt; Promise&lt;ISubmitResult&gt;;</span><br><span class="line">&#125;</span><br><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个<code>handleSubmit</code>函数，它将会调用<code>onSubmit</code>属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  const handleSubmit = async (values: IValues): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">    const result = await props.onSubmit(values);</span><br><span class="line">return result;</span><br><span class="line">  &#125;;</span><br><span class="line">  return ( ... );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>onSubmit</code>属性是异步的，因此需要函数前缀带<code>async</code>以及<code>onSubmit</code>前面带<code>await</code>。</p><ol start="3"><li>绑定这个属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;Form ... onSubmit=&#123;handleSubmit&#125;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/Form&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="4"><li>现在移步到<code>ContactUsPage</code>组件，创建提交处理，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private handleSubmit = async (values: IValues): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">  await wait(1000); // simulate asynchronous web API call</span><br><span class="line">  return &#123;</span><br><span class="line">    errors: &#123;</span><br><span class="line">  email: [&quot;Some is wrong with this&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">success: false</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>接着创建<code>wait</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const wait = (ms: number): Promise&lt;void&gt; =&gt; &#123;</span><br><span class="line">  return new Promise(resolve =&gt; setTimeout(resolve, ms));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>在<code>ContactUs</code>组件中加上，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContactUs onSubmit=&#123;this.handleSubmit&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>导入暴露的属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ISubmitResult, IValues &#125; from &quot;./Form&quot;;</span><br></pre></td></tr></table></figure><h2><span id="summary">Summary</span></h2><p>本章讨论了控制组件，通过实现自定义表单组件描述。我们构建了一个通用型的<code>Form</code>和<code>Field</code>组件，并实现了状态控制、事件处理、表单提交等操作。</p><h2><span id="questions">Questions</span></h2><p>问题练习：</p><ol><li>扩展<code>Field</code>组件内容，包含<code>number</code>属性。</li><li>实现一个的输入框，该输入框响应紧急的程度，用数字表示。</li><li>实现一个新的校验函数，检测输入的数字是否在区间范围内。</li><li>合并实现2和3的功能。</li><li>为这个输入框添加事件。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;creating a form with controlled components&lt;/li&gt;
&lt;li&gt;Reducing boilerplate code with generic components&lt;/li&gt;
&lt;li&gt;Validating forms&lt;/li
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第六章 Component Patterns</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_6_Component_Patterns/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_6_Component_Patterns/</id>
    <published>2019-11-27T07:50:06.000Z</published>
    <updated>2019-11-05T03:57:07.987Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Container and presentational components</li><li>Compound compoents</li><li>Render props pattern</li><li>Higher-order components</li></ul><h2><span id="container-and-presentational-components">container and presentational components</span></h2><p>容器和表述组件。就是将复杂组件的属性内容进行抽取成为一个新的组件。</p><p>(略)</p><h2><span id="compound-components">Compound components</span></h2><p>合成组件，就是将一系列组件一起工作。</p><p>(略)</p><h2><span id="higher-order-components">Higher-order components</span></h2><p><strong>A higher-order component(HOC)</strong> 是一个函数组件，接收一个组件参数，返回该组件的增强版本。这样看起来没什么意义，下面通过一个例子<code>withLoader</code>组件来阐述。最终效果类似延迟加载动态圈。</p><h3><span id="adding-asynchronous-data-fetching">Adding asynchronous data fetching</span></h3><p>下面构造一份延迟数据来模拟真实的网络环境，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const wait = (ms: number): Promise&lt;void&gt; =&gt; &#123;</span><br><span class="line">    return new Promise(resolve =&gt; setTimeout(resolve, ms));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const getProduct = async (id: number): Promise&lt;IProduct | null&gt; =&gt; &#123;</span><br><span class="line">    await wait(1000);</span><br><span class="line">    const foundProducts = products.filter(customer =&gt; customer.id === id);</span><br><span class="line">    return foundProducts.length === 0 ? null : foundProducts[0];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着在原来的<code>ProductPage</code>页面导入<code>getProduct</code>函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; getProduct, IProduct &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><p>在<code>ProductPage</code>状态中加入一个新的属性<code>loading</code>，表示数据是否已经加载，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">product?: IProduct;</span><br><span class="line">added: boolean;</span><br><span class="line">loading: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造函数中初始化状态属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public constructor(props: Props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">added: false,</span><br><span class="line">loading: true</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件加载时使用<code>getProduct</code>函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public async componentDidMount() &#123;</span><br><span class="line">  if (this.props.match.params.id) &#123;</span><br><span class="line">    const id: number = parseInt(this.props.match.params.id, 10);</span><br><span class="line">    const product = await getProduct(id);</span><br><span class="line">    if (product !== null) &#123;</span><br><span class="line">      this.setState(&#123; product, loading: false &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了<code>await</code>关键字异步调用<code>getProduct</code>。另外还要修改生命周期方法<code>componentDidMount</code>带上<code>async</code>关键字。</p><h3><span id="implementing-the-withloader-hoc">Implementing the withLoader HOC</span></h3><p>我们将会创建<code>withLoader</code>加载组件，被用于指示组件处于繁忙状态。</p><ol><li>创建一个新文件，<code>withLoader.tsx</code>，内容如下，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  loading: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const withLoader = &lt;P extends object&gt;(</span><br><span class="line">  Component: React.ComponentType&lt;P&gt;</span><br><span class="line">): React.SFC&lt;P &amp; IProps&gt; =&gt; (props: P &amp; IProps) =&gt;</span><br><span class="line">  props.loading ? (</span><br><span class="line">    &lt;div className=&quot;loader-overlay&quot;&gt;</span><br><span class="line">      &lt;div className=&quot;loader-circle-wrap&quot;&gt;</span><br><span class="line">        &lt;div className=&quot;loader-circle&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    &lt;Component &#123;...props&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">export default withLoader;</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>withLoader</code>是一个函数，接收一个类型是<code>P</code>的组件</li><li><code>withLoader</code>调用一个函数组件</li><li>函数组件的属性定义是<code>P &amp; IProps</code>，它是一个交集类型</li><li>组件的所有属性会通过SFC传入，并带上一个新的属性<code>loading</code></li><li>props被解构为一个<code>loading</code>变量，剩余的其它属性作为rest参数</li></ul><ol start="2"><li>添加加载转轮的CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loader-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10004</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loader-circle-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loader-circle</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">4px</span> solid <span class="number">#899091</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: loader-circle-spin <span class="number">0.7s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="consuming-the-withloader-hoc">Consuming the withLoader HOC</span></h3><p>要消费这个高阶组件，只需要简单包装原来的组件即可。</p><p>原来的<code>Product.tsx</code>文件修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import withLoader from &quot;./withLoader&quot;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">export default withLoader(Product);</span><br></pre></td></tr></table></figure><p>在引用的页面部分修改为，即<code>ProductPage</code>页面，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;product || this.state.loading ? (</span><br><span class="line">  &lt;Product</span><br><span class="line">loading=&#123;this.state.loading&#125;</span><br><span class="line">product=&#123;product&#125;</span><br><span class="line">inBasket=&#123;this.state.added&#125;</span><br><span class="line">onAddToBasket=&#123;this.handleAddClick&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">) : (</span><br><span class="line">  &lt;p&gt;Product not found!&lt;/p&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>修改原来Props的属性选项为可选的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  product?: IProduct;</span><br><span class="line">  added: boolean;</span><br><span class="line">  loading: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外需要处理空值的情况，修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const handleAddClick = () =&gt; &#123;</span><br><span class="line">props.onAddToBasket();</span><br><span class="line">&#125;;</span><br><span class="line">if (!product) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">return (</span><br><span class="line">&lt;React.Fragment&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/React.Fragment&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>HOC非常适用于对原来组件的增强处理。比较常见的是React Router中使用了非常多这种HOC模式。React Router自身也实现了<code>withRouter</code>组件函数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Container and presentational components&lt;/li&gt;
&lt;li&gt;Compound compoents&lt;/li&gt;
&lt;li&gt;Render props pattern&lt;/li&gt;
&lt;li&gt;Higher-order components&lt;
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第五章 高级类型</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_5_Advanced_Types/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_5_Advanced_Types/</id>
    <published>2019-11-27T07:50:05.000Z</published>
    <updated>2019-11-05T03:57:07.982Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Union Types</li><li>Type guards</li><li>Generics</li><li>Overload signatures</li><li>Lookup and mapped types</li></ul><h2><span id="union-types">Union types</span></h2><p>顾名思义，联合类型就是将类型组合的一种形式。</p><h3><span id="string-literal-types">String literal types</span></h3><p>字符串字面量类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Control = &quot;Textbox&quot;</span><br></pre></td></tr></table></figure><p>这个类型的值仅能是<code>&quot;Textbox&quot;</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let notes: Control;</span><br><span class="line">notes = &quot;Textbox&quot;;</span><br></pre></td></tr></table></figure><p>用其它值表示则会报错，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notes = &quot;DropDown&quot;;// &quot;DropDown&quot; is not assignable to type &quot;Textbox&quot;</span><br></pre></td></tr></table></figure><p>和其它TypeScript类型一样，<code>null</code>和<code>undefined</code>是有效的值，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notes = null;</span><br><span class="line">notes = undefined;</span><br></pre></td></tr></table></figure><p>字符串字面量类型自身没有多大用处，它的用处在于结合到联合类型中。</p><h3><span id="string-literal-union-types">String literal union types</span></h3><p>字符串字面量联合类型就是将多个字符串字面类型组合在一起。例如，将原先的<code>Control</code>类型增强为联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Control = &quot;Textbox&quot; | &quot;DropDown&quot;</span><br></pre></td></tr></table></figure><p>设置值为二选一，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let notes: Control;</span><br><span class="line">notes = &quot;Textbox&quot;;</span><br><span class="line">notes = &quot;DropDown&quot;;</span><br></pre></td></tr></table></figure><p>扩展更多的字面量，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Control = &quot;Textbox&quot; | &quot;DropDown&quot; | &quot;DatePicker&quot; | &quot;NumberSlider&quot;;</span><br></pre></td></tr></table></figure><h3><span id="discriminated-union-pattern">Discriminated union pattern</span></h3><p>区分联合模式(discriminated union pattern)允许我们从不同联合类型中处理逻辑，以一个例子说明，</p><ol><li>首先创建三个不同的接口分别表示textbox、date picker、number slider，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface ITextbox &#123;</span><br><span class="line">control: &quot;TextBox&quot;;</span><br><span class="line">value: string;</span><br><span class="line">multiline: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IDatePicker &#123;</span><br><span class="line">control: &quot;DatePicker&quot;;</span><br><span class="line">value: Date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface INumberSlider &#123;</span><br><span class="line">control: &quot;NumberSlider&quot;;</span><br><span class="line">value: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们都有一个属性<code>control</code>，会成为模式的判别准则，</p><ol start="2"><li>我们将这些接口组合成为一个联合类型叫做<code>Field</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Field = ITextbox | IDatePicker | INumberSlider;</span><br></pre></td></tr></table></figure><ol start="3"><li>接着创建一个函数来初始化<code>Field</code>类型的值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function intializeValue(field: Field) &#123;</span><br><span class="line">switch (field.control) &#123;</span><br><span class="line">case &quot;Textbox&quot;:</span><br><span class="line">field.value = &quot;&quot;;</span><br><span class="line">break;</span><br><span class="line">case &quot;DatePicker&quot;:</span><br><span class="line">field.value = new Date();</span><br><span class="line">break;</span><br><span class="line">case &quot;NumberSlier&quot;:</span><br><span class="line">filed.value = 0;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">const shouldNotReach: never = field;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化值的设置取决于这个区分属性<code>control</code>。因此我们需要使用<code>switch</code>语句进行分岔处理。</p><p>其中<code>default</code>分支在<code>switch</code>语句中应该从不达到，对于不可达语句，使用<code>never</code>类型表述。</p><ol start="4"><li>随着时间的推移，新增了一个checkbox字段需求，接着实现这个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface ICheckbox &#123;</span><br><span class="line">control: &quot;Checkbox&quot;;</span><br><span class="line">value: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>将这个field添加到联合<code>Field</code>类型中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Field = ITextbox | IDatePicker | INumberSlider | ICheckbox;</span><br></pre></td></tr></table></figure><p>我们将会立即看到<code>initializeValue</code>函数在<code>never</code>声明中抛出编译错误，</p><ol start="6"><li>增加一个分支即可，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function intializeValue(field: Field) &#123;</span><br><span class="line">switch (field.control) &#123;</span><br><span class="line">case &quot;Textbox&quot;:</span><br><span class="line">field.value = &quot;&quot;;</span><br><span class="line">break;</span><br><span class="line">case &quot;DatePicker&quot;:</span><br><span class="line">field.value = new Date();</span><br><span class="line">break;</span><br><span class="line">case &quot;NumberSlider&quot;:</span><br><span class="line">field.value = 0;</span><br><span class="line">break;</span><br><span class="line">case &quot;Checkbox&quot;:</span><br><span class="line">field.value = false;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">const shouldNotReach: never = field;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，联合类型允许我们组合任何类型成为另外一种类型。</p><h2><span id="type-guards">Type guards</span></h2><p>类型守卫，允许我们在一个代码条件分支上缩小一个对象的具体类型。对于联合类型来说可以在代码分支对不同具体类型进行处理。</p><p>例如上面的<code>intializeValue</code>函数，通过<code>switch</code>语句控制分支<code>control</code>来对不同设值类型进行处理。</p><p>下面介绍另外一种不同的方式。</p><h3><span id="using-the-typeof-keyword">Using the typeof keyword</span></h3><p><code>typeof</code>关键字是JavaScript的关键字，它会返回改类型的一个字符串。因此可以使用它缩小类型。</p><p>例如，有一个包含字符串和一个字符串数组的类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type StringOrStringArray = string | string[];</span><br></pre></td></tr></table></figure><p>我们需要实现一个<code>first</code>的函数，它接收类型为<code>StringOrStringArray</code>的参数并返回一个字符串，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function first(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求函数，如果是一个字符串，则返回第一个字符，如果是一个字符串数组则返回数组第一个元素，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function first(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">if (typeof stringOrArray === &quot;string&quot;) &#123;</span><br><span class="line">return stringOrArray.substr(0, 1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return stringOrArray[0];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检测是否生效，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(first(&quot;The&quot;));</span><br><span class="line">console.log(first([&quot;The&quot;, &quot;cat&quot;]));</span><br></pre></td></tr></table></figure><p>因为<code>typeof</code>关键字仅能被用于JavaScript类型。为了说明这一点，对原来的函数做了增强。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function firstEnhanced(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">if (typeof stringOrArray === &quot;string&quot;) &#123;</span><br><span class="line">return stringOrArray.substr(0, 1);</span><br><span class="line">&#125; else if (typeof stringOrArray === &quot;string[]&quot;) &#123;</span><br><span class="line">return stringOrArray[0];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">const shouldNotReach: never = stringOrArray;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时TypeScript编译器在第二个分支报错，<code>typeof</code>关键字仅作用于JavaScript类型，即<code>string</code>、<code>number</code>、<code>boolean</code>、<code>symbol</code>、<code>undefined</code>、<code>object</code>以及<code>function</code>；错误信息告诉我们<code>string[]</code>类型和JavaScript的类型<code>object</code>重合了，因此第二个分支实际上返回的是<code>object</code>。</p><p>修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function firstEnhanced(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">if (typeof stringOrArray === &quot;string&quot;) &#123;</span><br><span class="line">return stringOrArray.substr(0, 1);</span><br><span class="line">&#125; else if (typeof stringOrArray === &quot;object&quot;) &#123;</span><br><span class="line">return stringOrArray[0];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">const shouldNotReach: never = stringOrArray;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，<code>typeof</code>对于JavaScript类型是良好的，但对于TypeScript的具体类型却无从入手。</p><h3><span id="using-the-instanceof-keyword">Using the instanceof keyword</span></h3><p><code>instanceof</code>关键字还是JavaScript的，典型地被用于决定一个对象是否是某个类的实例。</p><p>例如，有两个类<code>Person</code>和<code>Company</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">id: number;</span><br><span class="line">firstName: string;</span><br><span class="line">surname: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class company &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及定义一个联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type PersonOrCompany = Person | Company;</span><br></pre></td></tr></table></figure><p>现在编写一个函数，接收一个<code>Person</code>或<code>Company</code>，并输出名字到控制台，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function logName(personOrCompany: PersonOrCompany) &#123;</span><br><span class="line">if (personOrCompany instanceof Person) &#123;</span><br><span class="line">console.log(`$&#123;personOrCompany.firstName&#125; $&#123;personOrCompany.surname&#125;`);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(personOrCompany.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>instanceof</code>虽然缩小了类的类型，但它仍然是JavaScript类型，有许多TypeScript类型不能处理。</p><h3><span id="using-the-in-keyword">Using the in keyword</span></h3><p><code>in</code>关键字是另外一个JavaScript关键字，被用于检测一个属性是否是一个对象。</p><p>例如，取代原来类的定义，使用接口对<code>Person</code>和<code>Company</code>进行声明，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">firstName: string;</span><br><span class="line">surname: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ICompany &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及创建一个联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type PersonOrCompany = IPerson | ICompany;</span><br></pre></td></tr></table></figure><p>重写原来的方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function logName(personOrCompany: PersonOrCompany) &#123;</span><br><span class="line">if (&quot;firstName&quot; in personOrCompany) &#123;</span><br><span class="line">console.log(`$&#123;personOrCompany.firstName&#125; $&#123;personOrCompany.surname&#125;`);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(personOrCompany.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>in</code>关键字比较灵活，可以被用于任何对象类型。</p><h3><span id="using-a-user-defined-type-guard">Using a user-defined type guard</span></h3><p>自定义类型守卫，这部分属于TypeScript3特性，改写原来的代码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">firstName: string;</span><br><span class="line">surname: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ICompany &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type PersonOrCompany = IPerson | ICompany;</span><br></pre></td></tr></table></figure><p>然后实现类型守卫函数，返回boolean，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isPerson(personOrCompany: PersonOrCompany): personOrCompany is IPerson &#123;</span><br><span class="line">return &quot;firstName&quot; in personOrCompany;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="generics">Generics</span></h2><p>泛型可以作用于一个函数或类中。</p><h3><span id="generic-functions">Generic functions</span></h3><p>下面通过一个例子描述泛型函数。我们将创建一个包装函数围绕<code>fetch</code>函数获取web servcie的数据，</p><ol><li>首先创建函数的方法签名，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function getData&lt;T&gt;(url: string): Promise&lt;T&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要转变为arrow function的形式，我们可以…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const getData = &lt;T&gt;(url: string): Promise&lt;T&gt; =&gt; &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>现在让我们实现我们的函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getData&lt;T&gt;(url: string): Promise&lt;T&gt; &#123;</span><br><span class="line">return fetch(url).then(response =&gt; &#123;</span><br><span class="line">if (!response.ok) &#123;</span><br><span class="line">throw new Error(response.statusText);</span><br><span class="line">&#125;</span><br><span class="line">return response.json();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后，消费这个函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData&lt;IPerson&gt;(&quot;/people/1&quot;).then(person =&gt; console.log(person));</span><br></pre></td></tr></table></figure><h3><span id="generic-classes">Generic classes</span></h3><p>泛型类，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class List&lt;T&gt; &#123;</span><br><span class="line">private data: T[] = [];</span><br><span class="line"></span><br><span class="line">public getList(): T[] &#123;</span><br><span class="line">return this.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public add(item: T) &#123;</span><br><span class="line">this.data.push(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public remove(item: T) &#123;</span><br><span class="line">this.data = this.data.filter(dataItem: T) =&gt; &#123;</span><br><span class="line">return !this.equals(item, dataItem);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">private equals(obj1: T, obj2: T) &#123;</span><br><span class="line">return Object.keys(obj1).every(key =&gt; &#123;</span><br><span class="line">return obj1[key] === obj2[key];</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对应的消费接口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br><span class="line">const billy: IPerson = &#123; id: 1, name: &quot;Billy&quot; &#125;;</span><br></pre></td></tr></table></figure><p>然后创建一个泛型类实例，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const people = new List&lt;IPerson&gt;();</span><br></pre></td></tr></table></figure><p>调用泛型方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">people.add(billy);</span><br><span class="line">people.remove(billy);</span><br></pre></td></tr></table></figure><p>获取条目信息，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const items = people.getList();</span><br></pre></td></tr></table></figure><p>其中<code>React.Component</code>包含有两个泛型参数，分别是props和state。</p><h2><span id="overload-signatures">Overload signatures</span></h2><p>方法签名重载。</p><p>首先有两个函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function condenseString(string: string): string &#123;</span><br><span class="line">return string.split(&quot; &quot;).join(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function condenseArray(array: string[]): string[] &#123;</span><br><span class="line">return array.map(item -&gt; item.split(&quot; &quot;).join(&quot;&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在将这两个函数组合为一个函数。我们可以使用联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function condense(stringOrArray: string | string[]): string| string[] &#123;</span><br><span class="line">return typeof stringOrArray === &quot;string&quot; ? stringOrArray.split(&quot; &quot;).join(&quot;&quot;) : stringOrArray.map(item =&gt; item.split(&quot; &quot;).join(&quot;&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const condensedText = condense(&quot;the cat sat on the mat&quot;);</span><br></pre></td></tr></table></figure><p>如果我们将鼠标放在<code>condensedText</code>上，我们会发现它是个联合类型，</p><p>现在添加两个重载的方法签名，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function condense(string: string): string;</span><br><span class="line">function condense(array: string[]): string[];</span><br><span class="line">function condense(stringOrArray: string | string[]): string | string[] &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>再次消费重载的函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const moreCondensedText = condense(&quot;The cat sat on the mat&quot;);</span><br></pre></td></tr></table></figure><p>将鼠标悬浮在<code>moreCondensedText</code>上，可以得到一个更好的确定类型是<code>string</code>。可以看到重载方法签名可以得到更好的类型推断。</p><h2><span id="lookup-and-mapped-types">Lookup and mapped types</span></h2><p>TypeScript中提供了一个关键字<code>keyof</code>用于为一个对象中的所有属性创建联合类型。这种被创建的类型被称为查询类型(lookup type)。它允许我们基于已有的类型的属性，动态地创建类型。</p><p>以一个例子为例，我们有下面这些接口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用关键字<code>keyof</code>创建该接口的查询类型(lookup type)，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type PersonProps = keyof IPerson;</span><br></pre></td></tr></table></figure><p>如果将光标悬浮在<code>PersonProps</code>类型上，我们可以看到它是个联合类型，包含<code>&quot;id&quot;</code>和<code>&quot;name&quot;</code>属性，</p><p>在原来的<code>IPerson</code>上添加一个新的属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">age: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>PersonProps</code>类型包含了一个新的扩展属性<code>&quot;age&quot;</code>，</p><p>因此<code>PersonProps</code>类型是个lookup type，顾名思义它总是会查询它需要的字面量。</p><p>接下来我们看看这种查询类型的某些有用的地方，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Field &#123;</span><br><span class="line">name: string;</span><br><span class="line">label: string;</span><br><span class="line">defaultValue: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这仅是开始，我们可以让<code>name</code>属性更强，并使原来的类是个泛型类，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Field&lt;T, K extends keyof T&gt; &#123;</span><br><span class="line">name: K,</span><br><span class="line">label: string;</span><br><span class="line">defaultValue: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在该类创建了两个泛型参数。第一个泛型参数是对象类型，第二个是对象类型的属性类型。</p><p>然后我们创建这个类的实例，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const idField: Field&lt;IPerson, &quot;id&quot;&gt; = new Field();</span><br></pre></td></tr></table></figure><p>尝试引用不存在于<code>IPerson</code>的属性会发生报错，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const addressField: Field&lt;IPerson, &quot;address&quot;&gt; = new Field();</span><br></pre></td></tr></table></figure><p>另外，<code>defaultValue</code>不是类型安全的，譬如可以设置值为字符串，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idField.defaultValue = &quot;2&quot;;</span><br></pre></td></tr></table></figure><p>可以改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Field&lt;T, K extends keyof T&gt; &#123;</span><br><span class="line">name: K;</span><br><span class="line">label: string;</span><br><span class="line">defaultValue: T[K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询<code>T[K]</code>的类型，对于<code>idField</code>。它会处理到<code>IPerson</code>的属性<code>id</code>，即<code>number</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idFiled.defaultValue = 2;</span><br></pre></td></tr></table></figure><p>接下来创建一个映射类型。映射类型就是映射已存在类型的属性。</p><p>首先创建一个类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个只读版本的新类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type ReadonlyPerson = &#123; readonly [P in keyof IPerson]: IPerson[P] &#125;;</span><br></pre></td></tr></table></figure><p>其中重要的是创建这个映射<code>[P in keyof IPerson]</code>。这里将<code>IPerson</code>的所有属性迭代指派给<code>P</code>。因此，这个类型实际上是，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type ReadonlyPerson = &#123;</span><br><span class="line">readonly id: number</span><br><span class="line">readonly name: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在visual studio code中，它的实际定义会被解析为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Readonly&lt;T&gt; = &#123;</span><br><span class="line">readonly [P in keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以尝试创建我们自己呃泛型映射类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Stringify&lt;T&gt; = &#123; [P in keyof T]: string &#125;;</span><br></pre></td></tr></table></figure><p>然后消费我们的映射类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let tim: Stringify&lt;IPerson&gt; = &#123;</span><br><span class="line">id: &quot;1&quot;,</span><br><span class="line">name: &quot;Time&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>映射类型适用于需要从已有的类型创建一个新的类型的场景。在TypeScript中，除了<code>Radonly&lt;T&gt;</code>类型外，还有<code>Partial&lt;T&gt;</code>，它会创建一个所有属性都是optional的映射类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Union Types&lt;/li&gt;
&lt;li&gt;Type guards&lt;/li&gt;
&lt;li&gt;Generics&lt;/li&gt;
&lt;li&gt;Overload signatures&lt;/li&gt;
&lt;li&gt;Lookup and mapped types&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;sp
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第四章 React Router</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_4_Routing_with_React_Router/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_4_Routing_with_React_Router/</id>
    <published>2019-11-27T07:50:04.000Z</published>
    <updated>2019-11-05T03:57:07.972Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装React Router</li><li>声明路由</li><li>创建向导</li><li>路由参数</li><li>处理not found路由</li><li>实现页面重定向</li><li>查询参数</li><li>路由提示符</li><li>内嵌路由</li><li>动画转换</li><li>lazy loading 路由</li></ul><h2><span id="installing-react-router-with-routing-types">Installing React Router with routing types</span></h2><p>将React Router添加进项目中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>以及将TypeScript版本的React Router添加到devDependency的开发依赖中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @types/react-router-dom</span><br></pre></td></tr></table></figure><h2><span id="declaring-routes">Declaring routes</span></h2><p>在页面我们需要使用<code>BrowserRouter</code>和<code>Route</code>组件。<code>BrowserRouter</code>是top-level组件，会寻找下层的<code>Route</code>组件以决定不同的页面路径。</p><p>在引入<code>BrowserRouter</code>和<code>Route</code>之前，首先创建两个页面，</p><ol><li>创建一个<code>ProductsData.ts</code>文件，内容如下，</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IProduct &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    description: <span class="built_in">string</span>;</span><br><span class="line">    price: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> products: IProduct[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="string">"A collection of navigational components that compose declaratively with your app"</span>,</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">"React Router"</span>,</span><br><span class="line">        price: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="string">"A library that helps manage state across your app"</span>,</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">"React Redux"</span>,</span><br><span class="line">        price: <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="string">"A library that helps you interact with a GraphQL backend"</span>,</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">"React Apollo"</span>,</span><br><span class="line">        price: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>创建另外一个<code>ProductsPage.tsx</code>文件导入这些数据，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; IProduct, products &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>因为需要在组件引用数据，创建一个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">products: IProduct[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建类组件，初始化状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class ProductsPage extends React.Component&lt;&#123;&#125;, IState&gt; &#123;</span><br><span class="line">    public constructor(props: &#123;&#125;) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            products: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ProductsPage;</span><br></pre></td></tr></table></figure><ol start="5"><li>实现<code>componentDidMount</code>生命周期方法，更新组件的State，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">this.setState(&#123; products &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>实现对应的<code>render</code>方法进行渲染，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">&lt;p&gt;Welcome to React Shop where you can get all your tools for ReactJS!&lt;/p&gt;</span><br><span class="line">&lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">&#123;this.state.products.map(product =&gt; (</span><br><span class="line">&lt;li key=&#123;product.id&#125; className=&quot;product-list-item&quot;&gt;</span><br><span class="line">&#123;product.name&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">))&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>对应CSS样式为，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.product-list</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.product-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>实现第二个页面，文件名为<code>AdminPage.tsx</code>，它是个无状态组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const AdminPage: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">            &lt;h1&gt;Admin Panel&lt;/h1&gt;</span><br><span class="line">            &lt;p&gt;You should only be here if you have logged in&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default AdminPage;</span><br></pre></td></tr></table></figure><ol start="9"><li>现在我们有两个页面了，需要为其定义两个路由。首先创建一个<code>Routes.tsx</code>的文件，包含下面的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; BrowserRouter as Router, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import AdminPage from &quot;./AdminPage&quot;;</span><br><span class="line">import ProductsPage from &quot;./ProductsPage&quot;;</span><br></pre></td></tr></table></figure><ol start="10"><li>渲染路由页面，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const Routes: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Route path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">                &lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Routes;</span><br></pre></td></tr></table></figure><ol start="11"><li>最后一步，把<code>Routes</code>添加到根组件<code>index.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &apos;./index.css&apos;;</span><br><span class="line">import Routes from &quot;./Routes&quot;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Routes /&gt;, </span><br><span class="line">    document.getElementById(&apos;root&apos;) as HTMLElement);</span><br></pre></td></tr></table></figure><ol start="12"><li>目前页面上是什么也没有看到的，需要我们在浏览器直接输入地址，&quot;<code>/products</code>&quot;，或者访问另一个页面&quot;<code>/admin</code>&quot;,</li></ol><h2><span id="creating-navigation">Creating navigation</span></h2><p>非常幸运的是，React Router有一些组件提供了向导的功能。</p><h3><span id="using-the-link-component">Using the Link component</span></h3><p>使用<code>Link</code>组件实现向导功能，</p><ol><li>创建一个<code>Header.tsx</code>文件，包含以下内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import logo from &quot;./logo.svg&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>接着创建两个<code>Link</code>链接，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const Header: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;header className=&quot;header&quot;&gt;</span><br><span class="line">            &lt;img src=&#123;logo&#125; className=&quot;header-logo&quot; alt=&quot;logo&quot; /&gt;</span><br><span class="line">            &lt;h1 className=&quot;header-title&quot;&gt;React Shop&lt;/h1&gt;</span><br><span class="line">            &lt;nav&gt;</span><br><span class="line">                &lt;Link to=&quot;/products&quot; className=&quot;header-link&quot;&gt;Products&lt;/Link&gt;</span><br><span class="line">                &lt;Link to=&quot;/admin&quot; className=&quot;header-link&quot;&gt;Admin&lt;/Link&gt;</span><br><span class="line">            &lt;/nav&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Header;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加对应的CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#222</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-logo</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: header-logo-spin infinite <span class="number">20s</span> linear;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> header-logo-spin &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>把<code>Header</code>添加到我们的<code>Routes.tsx</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Header from &quot;./Header&quot;;</span><br></pre></td></tr></table></figure><ol start="5"><li>加入导航，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;Route path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure><h2><span id="使用navlink组件">使用NavLink组件</span></h2><p>React Router还提供了另外一个组件用于页面链接，称为<code>NavLink</code>。下面我们用<code>NavLink</code>重构一下原来的<code>Header</code>组件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; NavLink &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import logo from &quot;./logo.svg&quot;;</span><br><span class="line"></span><br><span class="line">const Header: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;header className=&quot;header&quot;&gt;</span><br><span class="line">            &lt;img src=&#123;logo&#125; className=&quot;header-logo&quot; alt=&quot;logo&quot; /&gt;</span><br><span class="line">            &lt;h1 className=&quot;header-title&quot;&gt;React Shop&lt;/h1&gt;</span><br><span class="line">            &lt;nav&gt;</span><br><span class="line">                &lt;NavLink to=&quot;/products&quot; className=&quot;header-link&quot;&gt;Products&lt;/NavLink&gt;</span><br><span class="line">                &lt;NavLink to=&quot;/admin&quot; className=&quot;header-link&quot;&gt;Admin&lt;/NavLink&gt;</span><br><span class="line">            &lt;/nav&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Header;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>NavLink</code>暴露了一个<code>activeClassName</code>属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavLink to=&quot;/products&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;Products&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink to=&quot;/admin&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;Admin&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加对应CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.header-link-active</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">#ebebeb</span> solid <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，<code>NavLink</code>主要让我们导航带上样式功能。</p><h3><span id="路由参数">路由参数</span></h3><p>路由参数是路径变量的部分，用于决定目标组件的渲染逻辑。</p><p>我们需要添加另外一个页面，来展示商品的描述内容和价格，我们想要让页面导向使用&quot;<code>/products/{id}</code>&quot;路径，其中<code>id</code>对应商品ID。</p><ol><li>首先在原来的<code>Routes.tsx</code>添加路由路径和参数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对应的<code>ProductPage</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; IProduct, products &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>这里的关键点是，我们需要用到<code>RouteComponentProps</code>来访问路径上的参数<code>id</code>。另外需要定义类型别名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Props = RouteComponentProps&lt;&#123;id: string&#125;&gt;;</span><br></pre></td></tr></table></figure><ol start="4"><li>另外还需要有个状态记录商品被添加到购物篮中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">    product?: IProduct;</span><br><span class="line">    added: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>初始化该状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class ProductPage extends React.Component&lt;Props, IState&gt; &#123;</span><br><span class="line">    public constructor(props: Props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.setState(&#123; added: false &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ProductPage;</span><br></pre></td></tr></table></figure><ol start="6"><li>当组件被加载进DOM，会通过路径参数上的id查找商品。<code>RouteComponentProps</code>给我们提供了一个<code>match</code>对象，以访问路径上的参数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">        if (this.props.match.params.id) &#123;</span><br><span class="line">          const id: number = parseInt(this.props.match.params.id, 10);</span><br><span class="line">          const product = products.filter(p =&gt; p.id === id)[0];</span><br><span class="line">          this.setState(&#123; product &#125;);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住，路径参数id是个字符串，需要使用<code>parseInt</code>进行转换，</p><ol start="7"><li>初始化好商品和组件状态后，我们进入到<code>render</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">const product = this.state.product;</span><br><span class="line">return (</span><br><span class="line">  &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">&#123;product ? (</span><br><span class="line">  &lt;React.Fragment&gt;</span><br><span class="line">&lt;h1&gt;&#123;product.name&#125;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&#123;product.description&#125;&lt;/p&gt;</span><br><span class="line">&lt;p className=&quot;product-price&quot;&gt;</span><br><span class="line">&#123;new Intl.NumberFormat(&quot;en-US&quot;, &#123;</span><br><span class="line">currency: &quot;USD&quot;,</span><br><span class="line">style: &quot;currency&quot;</span><br><span class="line">&#125;).format(product.price)&#125;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&#123;!this.state.added &amp;&amp; (</span><br><span class="line">&lt;button onClick=&#123;this.handleAddClick&#125;&gt;Add to basket&lt;/button&gt;</span><br><span class="line">)&#125;</span><br><span class="line">  &lt;/React.Fragment&gt;</span><br><span class="line">) : (</span><br><span class="line">  &lt;p&gt;Product not found!&lt;/p&gt;</span><br><span class="line">)&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一些新东西，</p><ul><li>第一行创建了常量<code>product</code>；</li><li>三元运算符</li><li>使用了<code>React.Fragment</code>，类似实现单独一个parent的功能</li><li>使用了<code>Intl.NumberFormat</code>装换货币符号</li></ul><ol start="8"><li>另外还需要添加<code>handleAddClick</code>方法处理按钮事件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleAddClick = () =&gt; &#123;</span><br><span class="line">this.setState(&#123; added: true &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="9"><li>现在，将我们实现好的<code>ProductPage</code>组件，导入到<code>Routes.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ProductPage from &quot;./ProductPage&quot;;</span><br></pre></td></tr></table></figure><ol start="10"><li><p>直接浏览器键入&quot;<code>/products/2</code>“查看新路由页面，但有个问题是”<code>/products</code>“和”<code>/products/:id</code>&quot;都被渲染了</p></li><li><p>为了解决这个问题，修改为，</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="12"><li>进一步，我们需要为每个条目添加链接，回到原来的<code>ProductsPage.tsx</code>组件，修改相应部分内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">public render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Welcome to React Shop where you can get all your tools for ReactJS!</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">          &#123;this.state.products.map(product =&gt; (</span><br><span class="line">            &lt;li key=&#123;product.id&#125; className=&quot;product-list-item&quot;&gt;</span><br><span class="line">              &lt;Link to=&#123;`/products/$&#123;product.id&#125;`&#125;&gt;&#123;product.name&#125;&lt;/Link&gt;</span><br><span class="line">              &#123;product.name&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="13"><li>补充CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.product-list-item</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="handling-not-found-routes">Handling not found routes</span></h3><p>如果用户输入的路径不存在怎么处理？例如，我们尝试键入&quot;/tools&quot;，但路由中没有找到任何匹配的路由，我们希望提示该路径不存在。</p><ol><li>首先创建一个新的文件<code>NotFoundPage.tsx</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const NotFoundPage: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">      &lt;h1&gt;Sorry, this page cannot be found&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default NotFoundPage;</span><br></pre></td></tr></table></figure><ol start="2"><li>在路由组件中，导入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import NotFoundPage from &quot;./NotFoundPage&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加到路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">&lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure><p>但其他页面也一同渲染了，我们希望如果没有找到对应路由页面，仅渲染<code>NotFoundPage</code>，这是需要用到<code>Switch</code>组件。</p><ol start="4"><li>首先导入<code>Swith</code>组件到<code>Routes.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserRouter as Router, Route, Switch &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>Route</code>包一层<code>Switch</code>组件即可，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><p><code>Switch</code>组件仅渲染第一个匹配到的<code>Route</code>组件。在我们案例中，当找不到页面是，第一个匹配到的就是<code>NotFoundPage</code>，这样就解决了我们的问题。</p><h2><span id="implementing-page-redirects">Implementing page redirects</span></h2><p>页面重定向使用了<code>Redirect</code>组件实现</p><h3><span id="simple-redirect">Simple redirect</span></h3><p>如果我们访问<code>/</code>路径，我们注意到它是个not found页面。我们希望当路径是<code>/</code>时，重定向到<code>/products</code>。</p><ol><li>首先，需要在<code>Routes.tsx</code>导入<code>Redirect</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserRouter as Router, Redirect, Route, Switch &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后使用<code>Redirect</code>组件进行重定向，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Redirect exact=&#123;true&#125; from=&quot;/&quot; to=&quot;/products&quot; /&gt;</span><br><span class="line">  &lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><h3><span id="conditional-redirect">Conditional redirect</span></h3><p>另外我们可以用<code>Redirect</code>组件对为授权用户进行保护访问。例如，我们的shop例子中，我们仅确保登录用户可以访问我们的<code>Admin</code>页面。</p><ol><li>创建一个<code>LoginPage</code>路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/login&quot; component=&#123;LoginPage&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加一个登录页<code>LoginPage.tsx</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const LoginPage: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">      &lt;h1&gt;Login&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;You need to login... &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default LoginPage;</span><br></pre></td></tr></table></figure><ol start="3"><li>回到原来的<code>Routes.tsx</code>导入<code>LoginPage</code>:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import LoginPage from &quot;./LoginPage&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>在重定向到&quot;<code>admin</code>&quot;之前，我们需要在<code>Routes.tsx</code>中添加一些状态值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Routes: React.SFC = () =&gt; &#123;</span><br><span class="line">const [loggedIn, setLoggedIn] = React.useState(false);</span><br><span class="line">return (</span><br><span class="line">&lt;Router&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Router&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>最后一步是添加条件判断，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">&#123;loggedIn ? &lt;AdminPage /&gt; : &lt;Redirect to=&quot;/login&quot; /&gt;&#125;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>如果我们将<code>loggedIn</code>状态修改为true，我们就可以再次访问我们的Admin页面了，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [loggedIn, setLoggedIn] = React.useState(true);</span><br></pre></td></tr></table></figure><h2><span id="query-parameters">Query parameters</span></h2><p>查询参数是URL地址的一部分，例如&quot;<code>/products?search=redux</code>&quot;。让我们实现一个商品查询功能。</p><ol><li>在原来的<code>ProductsPage.tsx</code>中，添加一个状态变量<code>search</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  products: IProduct[];</span><br><span class="line">  search: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>我们需要用到<code>RouteComponentProps</code>作为属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class ProductsPage extends React.Component&lt;RouteComponentProps, IState&gt; &#123;</span><br><span class="line">  public constructor(props: RouteComponentProps) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      products: [],</span><br><span class="line">      search: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="4"><li>我们需要在<code>componentDidMount</code>确定好<code>search</code>的值，因此，实现<code>getDerivedStateFromProps</code>方法获取URL参数，并更新state，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static getDerivedStateFromProps(</span><br><span class="line">    props: RouteComponentProps,</span><br><span class="line">    state: IState</span><br><span class="line">  ) &#123;</span><br><span class="line">    const searchParams = new URLSearchParams(props.location.search);</span><br><span class="line">    const search = searchParams.get(&quot;search&quot;) || &quot;&quot;;</span><br><span class="line">    return &#123;</span><br><span class="line">      products: state.products,</span><br><span class="line">      search</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>不幸的是，<code>URLsearchParams</code>没有在所有浏览器中实现，所以我们需要用到<code>url-search-params-polyfill</code>，</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D url-search-params-polyfill</span><br></pre></td></tr></table></figure><ol start="6"><li>导入到<code>ProductPages.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;url-search-params-polyfill&quot;;</span><br></pre></td></tr></table></figure><ol start="7"><li>在渲染部分使用<code>search</code>状态，并包装一个<code>if</code>语句，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">  &#123;this.state.products.map(product =&gt; &#123;</span><br><span class="line">  if(</span><br><span class="line">  !this.state.search || </span><br><span class="line">  (this.state.search &amp;&amp;</span><br><span class="line">product.name.toLowerCase().indexOf(this.state.search.toLowerCase()) &gt; -1)</span><br><span class="line">  ) &#123;</span><br><span class="line">  return (</span><br><span class="line">&lt;li key=&#123;product.id&#125; className=&quot;product-list-item&quot;&gt;</span><br><span class="line">  &lt;Link to=&#123;`/products/$&#123;product.id&#125;`&#125;&gt;&#123;product.name&#125;&lt;/Link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">  return null;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>替换为搜索框搜索的方式… 我们需要，</p><ol start="8"><li>在<code>Header.tsx</code>文件中创建state，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [search, setSearch] = React.useState(&quot;&quot;);</span><br></pre></td></tr></table></figure><ol start="9"><li>另外需要获取搜索参数，需要导入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NavLink, RouteComponentProps, withRouter&#125; from &quot;reactrouter-</span><br><span class="line">dom&quot;;</span><br><span class="line">import &quot;url-search-params-polyfill&quot;;</span><br></pre></td></tr></table></figure><ol start="10"><li>添加<code>props</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Header: React.SFC&lt;RouteComponentProps&gt; = props =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>组件首次渲染时，从路径参数获取值并设置<code>search</code>的状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const [search, setSearch] = React.useState(&quot;&quot;);</span><br><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">const searchParams = new</span><br><span class="line">URLSearchParams(props.location.search);</span><br><span class="line">setSearch(searchParams.get(&quot;search&quot;) || &quot;&quot;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><ol start="12"><li>将<code>search</code>添加到<code>redner</code>方法中，让用户进行输入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">... </span><br><span class="line">&lt;header className=&quot;header&quot;&gt;</span><br><span class="line">&lt;div className=&quot;search-container&quot;&gt;</span><br><span class="line">&lt;input </span><br><span class="line">type=&quot;search&quot;</span><br><span class="line">placeholder=&quot;search&quot;</span><br><span class="line">value=&#123;search&#125;</span><br><span class="line">onChange=&#123;handleSearchChange&#125;</span><br><span class="line">onKeyDown=&#123;handleSearchKeydown&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="13"><li>添加<code>search-container</code>CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search-container</span> &#123;</span><br><span class="line"><span class="attribute">text-align</span>: right;</span><br><span class="line"><span class="attribute">margin-bottom</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="14"><li>回到原来的<code>Header.tsx</code>，添加对应的事件处理方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const handleSearchChange = (e:</span><br><span class="line">React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">setSearch(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleSearchKeydown = (e:</span><br><span class="line">React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">if (e.key === &quot;Enter&quot;) &#123;</span><br><span class="line">props.history.push(`/products?search=$&#123;search&#125;`);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="15"><li>另外我们需要用<code>withRouter</code>包装<code>Header</code>暴露接口，以使<code>this.props.history</code>可以生效，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default withRouter(Hader);</span><br></pre></td></tr></table></figure><h3><span id="route-prompts">Route prompts</span></h3><p><code>react-router-dom</code>组件中还有一个<code>Prompt</code>组件，顾名思义就是弹出框…</p><ol><li>我们希望用户离开商品页面时，如果没有购物，则弹出提示，首先，在<code>ProductPage.tsx</code>中导入<code>Prompt</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Prompt, RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加对应触发条件即可，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;Prompt when=&#123;!this.state.added&#125; message=&#123;this.navAwayMessage&#125; /&gt;</span><br><span class="line">  ...</span><br><span class="line">    private navAwayMessage = () =&gt; &quot;Are you sure you leave without buying this product?&quot;;</span><br></pre></td></tr></table></figure><h2><span id="nested-routes">Nested routes</span></h2><p>内嵌路由就是在某一个一级URL下渲染多个组件。</p><p>譬如我们想要创建一个3层渲染，</p><ul><li>第一层包含<code>Users</code>和<code>Products</code>的链接</li><li><code>Users</code>层又包含所有用户</li><li>点击每个用户可以看到具体信息</li></ul><ol><li>首先修改<code>AdminPage.tsx</code>，导入向导组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NavLink, Route, RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ul><li>我们将会使用<code>NavLink</code>组件渲染菜单</li><li><code>Route</code>用于内嵌路由</li><li><code>RouteComponentProps</code>类型将会获取URL的参数id</li></ul><ol start="2"><li>将<code>p</code>标签内容替换为下面…</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Admin Panel&lt;/h1&gt;</span><br><span class="line">  &lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">&lt;li key=&quot;users&quot; &gt;</span><br><span class="line">&lt;NavLink to=&#123;`/admin/user`&#125; activeClassName=&quot;admin-link-active&quot;&gt;Users&lt;/NavLink&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li key=&quot;products&quot;&gt;</span><br><span class="line">&lt;NavLink to=&#123;`/admin/products`&#125; activeClassName=&quot;admin-link-active&quot;&gt;Products&lt;/NavLink&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加对应样式…</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.admin-sections &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  margin: 0px 0px 20px 0px;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.admin-sections li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.admin-sections li a &#123;</span><br><span class="line">  color: #222;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.admin-link-active &#123;</span><br><span class="line">  border-bottom: #6f6e6e solid 2px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>回到原来的<code>AdminPage.tsx</code>，添加两个路由组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Admin Panel&lt;/h1&gt;</span><br><span class="line">  &lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin/users/:id&quot; component=&#123;AdminUsers&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin/products&quot; component=&#123;AdminProducts&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建这两个路由组件，在<code>AdminPage.tsx</code>内添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const AdminProducts: React.SFC = () =&gt; &#123;</span><br><span class="line">  return &lt;div&gt;Some options to administer products&lt;/div&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>接下来的<code>AdminUsers</code>组件可能会复杂一些。首先定义一种数据结构，在<code>AdminPage.tsx</code>的组件<code>AdminProducts</code>下，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface IUser &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  isAdmin: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const adminUsersData: IUser[] = [</span><br><span class="line">  &#123; id: 1, name: &quot;Fred&quot;, isAdmin: true &#125;,</span><br><span class="line">  &#123; id: 2, name: &quot;Bob&quot;, isAdmin: false &#125;,</span><br><span class="line">  &#123; id: 3, name: &quot;Jane&quot;, isAdmin: true &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这样一来就有3个用户了。</p><ol start="7"><li>接下来实现<code>AdminUsers</code>组件的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const AdminUsers: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">        &#123;adminUsersData.map(user =&gt; (</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;NavLink</span><br><span class="line">              to=&#123;`/admin/users/$&#123;user.id&#125;`&#125;</span><br><span class="line">              activeClassName=&quot;admin-link-active&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &#123;user.name&#125;</span><br><span class="line">            &lt;/NavLink&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该组件会渲染每个用户名的链接。它是一个内嵌路径，</p><ol start="8"><li>另外，还需要定义另外一个路由展示用户详细信息。添加一个路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;Route path=&quot;/admin/users/:id&quot; component=&#123;AdminUser&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="9"><li>这个<code>AdminUser</code>也还没有实现，因此，在<code>AdminUsers</code>组件下面添加上，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const AdminUser: React.SFC&lt;RouteComponentProps&lt;&#123; id: string &#125;&gt;&gt; = props =&gt; &#123;</span><br><span class="line">  return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们用到了<code>RouteComponentProps</code>通过<code>id</code>来获取可用的属性。</p><ol start="10"><li>然后通过<code>id</code>获取定义的<code>adminUsersData</code>中的记录，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const AdminUser: React.SFC&lt;RouteComponentProps&lt;&#123; id: string &#125;&gt;&gt; = props =&gt; &#123;</span><br><span class="line">  let user: IUser;</span><br><span class="line">  if (props.match.params.id) &#123;</span><br><span class="line">    const id: number = parseInt(props.match.params.id, 10);</span><br><span class="line">    user = adminUsersData.filter(u =&gt; u.id === id)[0];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="11"><li>有了<code>user</code>对象后，渲染其内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const AdminUser: React.SFC&lt;RouteComponentProps&lt;&#123; id: string &#125;&gt;&gt; = props =&gt; &#123;</span><br><span class="line">  let user: IUser;</span><br><span class="line">  if (props.match.params.id) &#123;</span><br><span class="line">    const id: number = parseInt(props.match.params.id, 10);</span><br><span class="line">    user = adminUsersData.filter(u =&gt; u.id === id)[0];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;b&gt;Id: &lt;/b&gt;</span><br><span class="line">        &lt;span&gt;&#123;user.id.toString()&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;b&gt;Is Admin: &lt;/b&gt;</span><br><span class="line">        &lt;span&gt;&#123;user.isAdmin.toString()&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="12"><li>再次运行，进入到<code>Admin</code>页面，点击<code>Products</code>… 点击<code>Users</code>…</li></ol><p>因此，如果需要实现内嵌路由，需要用到<code>NavLink</code>或<code>Link</code>组件，以及使用<code>Route</code>组件渲染这些内容。</p><h2><span id="animated-transitions">Animated transitions</span></h2><p>本小节将给不同的导航添加动画。我们会使用<code>react-transition-group</code>中的<code>TransitionGroup</code>和<code>CSSTransition</code>组件，步骤如下，</p><ol><li>首先安装对应这些包，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react-transition-group</span><br><span class="line">npm install @types/react-transition-group --save-dev</span><br></pre></td></tr></table></figure><p><code>TransitionGroup</code> 会持续跟踪它内部本地state的子组，并计算子组进入和退出。<code>CSSTransition</code>则在<code>TransitionGroup</code>子组离开或退出时，提供CSS类来表示一种状态。</p><p>因此，<code>TransitionGroup</code>和<code>CSSTransition</code>可以包装我们的路由，并调用CSS类，</p><ol start="2"><li>首先我们需要在我们的<code>Routes.tsx</code>中导入这些组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; CSSTransition, TransitionGroup &#125; from &quot;react-transition-group&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们还需要路由属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Redirect, Route, RouteComponentProps, Switch &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>作用我们的<code>Route</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const Routes: React.SFC&lt;RouteComponentProps&gt; = props =&gt; &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="5"><li>用<code>CSSTransition</code>和<code>TransitionGroup</code>来包装我们的路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;TransitionGroup&gt;</span><br><span class="line">  &lt;CSSTransition</span><br><span class="line">key=&#123;props.location.key&#125;</span><br><span class="line">timeout=&#123;500&#125;</span><br><span class="line">classNames=&quot;animate&quot;</span><br><span class="line">  &gt;</span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Redirect exact=&#123;true&#125; from=&quot;/&quot; to=&quot;/products&quot; /&gt;</span><br><span class="line">  &lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">&#123;loggedIn ? &lt;AdminPage /&gt; : &lt;Redirect to=&quot;/login&quot; /&gt;&#125;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">  &lt;Route path=&quot;/login&quot; component=&#123;LoginPage&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br><span class="line">  &lt;/CSSTransition&gt;</span><br><span class="line">&lt;/TransitionGroup&gt;</span><br></pre></td></tr></table></figure><p><code>TransitionGroup</code>要求子组要有一个唯一的<code>key</code>决定退出和进入的动作。因此我们在<code>CSSTransition</code>上指定<code>key</code>属性为<code>RouteComponentProps</code>上的<code>location.key</code>。我们设置了transtion的timeout属性为半秒，以及它的样式类。</p><ol start="6"><li>接下来，我们需要添加这些CSS类到<code>index.css</code>中，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.animate-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animate-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">450ms</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animate-exit</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当它的<code>key</code>改变时，<code>CSSTransition</code>会调用这些CSS样式。</p><ol start="7"><li>因为我们不能在<code>Router</code>组件外部使用高阶组件<code>withRouter</code>。要解决这个问题，可以添加一个新的组件<code>RoutesWrap</code>进行包装，在原来的<code>Routes.tsx</code>中添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const RoutesWrap: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Route component=&#123;Routes&#125; /&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Routes extends React.Component&lt;RouteComponentProps,</span><br><span class="line">IState&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">export default RoutesWrap;</span><br></pre></td></tr></table></figure><ol start="8"><li>在<code>Routes</code>组件中移除<code>Router</code>，让<code>div</code>标签作为它的根。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;TransitionGroup&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/TransitionGroup&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行程序，可以看到进入不同页面是有一种渐退效果。</p><h2><span id="lazy-loading-routes">Lazy loading routes</span></h2><p>截至目前为止，所有JavaScript会在app第一次加载时全部加载。包括<code>Admin</code>这些我们不需要的页面。这一点会造成一些资源浪费。所以需要用到一种称为“lazy loading”的组件。</p><ol><li>首先我们需要导入<code>Suspense</code>这个组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Suspense &#125; from &quot;react&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>接着以另一种方式导入这个<code>AdminPage</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ADminPage = React.lazy(() =&gt; import(&quot;./AdminPage&quot;));</span><br></pre></td></tr></table></figure><p>我们使用了React的一个函数<code>lazy</code>，它接收一个函数并返回一个动态导入，换句话说就是指派了一个<code>AdminPage</code>组件变量。</p><ol start="3"><li>上面步骤会获得一个lint错误，<strong>A dynamic import call in ES5/ES3 requires the ‘Promise’ constructor. Make sure you have a declaration for the ‘Promise’ constructor or include ‘ES2015’ in your <code>--lib</code> option.</strong> 需要在<code>tsconfig.json</code>中添加<code>lib</code>选项。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">  <span class="string">"lib"</span>: [<span class="string">"es6"</span>, <span class="string">"dom"</span>],</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>接下来的内容是，使用<code>Suspense</code>组件包装这个<code>AdminPage</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">&#123;loggedIn ? (</span><br><span class="line">&lt;Suspense fallback=&#123;&lt;div className=&quot;pagecontainer&quot;&gt;</span><br><span class="line">Loading...&lt;/div&gt;&#125;&gt;</span><br><span class="line">&lt;AdminPage /&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">) : (</span><br><span class="line">&lt;Redirect to=&quot;/login&quot; /&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><p><code>Suspense</code>组件会在<code>AdminPage</code>被加载时，展示这个<code>div</code>部分内容。有点说明的是，组件加载非常快，可能实际浏览器看了没效果，需要进入<strong>Network</strong>选择<strong>Slow 3G</strong>网络环境模式。刷新页面便可看到出现Loading…</p><h2><span id="总结">总结</span></h2><p>React Router给我们一套全面的组件管理导航页。最先学习的是底层组件<code>Router</code>，它会查找下游的<code>Route</code>组件并根据路径进行渲染。</p><p><code>Link</code>组件让我们在应用中链接到不同的页面。我们学习了<code>NavLinke</code>和<code>Link</code>相似，但提供了对不同激活路径的样式功能。因此<code>NavLink</code>最大好处用在侧边栏或标头横幅，<code>Link</code>用在内嵌页面跳转。</p><p><code>RouteComponentProps</code>是一种泛型类型，它提供了访问路径参数的能力。我们还发现了React Router并不能解析路径参数，但可以使用本地的JavaScript的<code>URLSearchParams</code>实现。</p><p><code>Redirect</code>组件提供了路径重定向的功能。这非常适用于对权限页面的控制。</p><p><code>Prompt</code>组件提供了弹窗的能力。</p><p>我们还学习了通过使用<code>TransitionGroup</code>和<code>CSSTransition</code>组件，通过包装我们的<code>Route</code>组件实现一种渐退的效果。</p><p>另外我们还学习了使用<code>Suspense</code>组件配合React的<code>lazy</code>函数，对不同的页面实现延迟加载，帮助我们提升应用的性能效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;安装React Router&lt;/li&gt;
&lt;li&gt;声明路由&lt;/li&gt;
&lt;li&gt;创建向导&lt;/li&gt;
&lt;li&gt;路由参数&lt;/li&gt;
&lt;li&gt;处理not found路由&lt;/li&gt;
&lt;li&gt;实现页面重定向&lt;/li&gt;
&lt;li&gt;查询参数&lt;/li&gt;
&lt;li&gt;路由提示符&lt;/li&gt;

      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第三章 开始在React中使用TS</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_3_Getting_Started_with_React_and_TypeScript/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_3_Getting_Started_with_React_and_TypeScript/</id>
    <published>2019-11-27T07:50:03.000Z</published>
    <updated>2019-11-05T03:57:08.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>创建一个React和TypeScript项目</li><li>创建一个类组件</li><li>处理类组件的事件</li><li>类组件的状态</li><li>类组件声明周期方法</li><li>创建一个函数组件</li></ul><h2><span id="创建一个react和typescript项目">创建一个React和TypeScript项目</span></h2><h3><span id="使用create-react-app">使用<code>create-react-app</code></span></h3><p><code>create-eract-app</code>是一个npm包的命令行工具，用于快速创建React和TypeScript应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-react-ts-app --typescript</span><br></pre></td></tr></table></figure><p>项目创建后，添加TSLint，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-react-ts-app</span><br><span class="line">npm install tslint tslint-react tslint-config-prettier --save-dev</span><br></pre></td></tr></table></figure><p>添加文件<code>tslint.json</code>，包含一些规则，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"extends"</span>: [<span class="string">"tslint:recommended"</span>, <span class="string">"tslint-react"</span>, <span class="string">"tslintconfig-prettier"</span>],</span><br><span class="line"><span class="attr">"rules"</span>: &#123;</span><br><span class="line"><span class="attr">"ordered-imports"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"object-literal-sort-keys"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"no-debugger"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"no-console"</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line"><span class="attr">"exclude"</span>: [</span><br><span class="line"><span class="string">"config/**/*.js"</span>,</span><br><span class="line"><span class="string">"node_modules/**/*.ts"</span>,</span><br><span class="line"><span class="string">"coverage/lcov-report/*.js"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3><span id="创建一个简单的react-component">创建一个简单的React component</span></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &lt;h1&gt; My React App!&lt;<span class="regexp">/h1&gt;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>React.SFC</code>是一个TypeScript的React类型，它不包含任何内部状态。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">const</span> App: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &lt;h1&gt;My React App!&lt;<span class="regexp">/h1&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>) <span class="keyword">as</span> HTMLElement);</span><br></pre></td></tr></table></figure><h3><span id="添加webpack">添加webpack</span></h3><p>(略)</p><h3><span id="项目目录结构">项目目录结构</span></h3><p>(略)</p><h3><span id="创建一个基本的类组件">创建一个基本的类组件</span></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Confirm <span class="keyword">extends</span> React.Component &#123;</span><br><span class="line"><span class="keyword">public</span> render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Confirm;</span><br></pre></td></tr></table></figure><p><code>render</code>方法决定了该组件需要展示的内容。我们用JSX来定义需要展示的内容。简单来说，JSX就是HTML和JavaScript的混合。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=<span class="string">"confirm-wrapper confirm-visible"</span>&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-container"</span>&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;This is where our title should go&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-content-container"</span>&gt;</span><br><span class="line">&lt;p&gt;This is where our content should go&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-buttons-container"</span>&gt;</span><br><span class="line">&lt;button className=<span class="string">"confirm-cancel"</span>&gt;Cancel&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button className="confirm-ok"&gt;Okay&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>怎么使用<code>Confirm</code>组件？在<code>App.tsx</code>中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Confirm from &apos;./Confirm&apos;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&lt;div className=&quot;App&quot;&gt;</span><br><span class="line">&lt;header className=&quot;App-header&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;Confirm /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2><span id="jsx">JSX</span></h2><p>JSX看起来很像HTML，它不是有效的JavaScript，我们需要一个处理步骤将其转换为JavaScript。</p><p>打开浏览器，进入<a href="https://babeljs.io/repl" target="_blank" rel="noopener">https://babeljs.io/repl</a>，输入下面内容，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is where our title should go<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右侧会获得编译之后的JS文件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line"><span class="string">"This is where our title should go"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>React.createElement</code>有三个参数，</p><ul><li>元素类型，可以是一个HTML标签，一个React组件类型，或一个React 代码段</li><li>属性对象</li><li>子类或内容</li></ul><p>例如，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;This is where our title should go&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>最终会被编译为，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line"><span class="string">"div"</span>,</span><br><span class="line">&#123; <span class="attr">className</span>: <span class="string">"confirm-title-container"</span> &#125;,</span><br><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line"><span class="string">"This is where our title should go"</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>现在看是有意义的，但目前仅由HTML构筑。加点JavaScript代码看看，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123;</span><br><span class="line">title: <span class="string">"React and TypeScript"</span></span><br><span class="line">&#125;;</span><br><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;&#123;props.title&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>它会被编译为，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> props = &#123;</span><br><span class="line">title: <span class="string">"React and TypeScript"</span></span><br><span class="line">&#125;;</span><br><span class="line">React.createElement(</span><br><span class="line"><span class="string">"div"</span>,</span><br><span class="line">&#123; <span class="attr">className</span>: <span class="string">"confirm-title-container"</span> &#125;,</span><br><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line">props.title</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>更进一步，让字面量<code>props</code>为空，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;&#123;props.title ? props.title : <span class="string">"React and TypeScript"</span>&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>内嵌调用原封不变，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line">props.title ? props.title : <span class="string">"React and TypeScript"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>因此，为什么我们使用<code>className</code>属性而不是<code>class</code>？现在知道JSX会编译为JavaScript，由于<code>class</code>是JavaScript的关键字，在JSX包含<code>class</code>属性会发生冲突。因此React使用<code>className</code>代替CSS引用。</p></blockquote><h2><span id="component-props">Component props</span></h2><p>目前，组件<code>Confirm</code>的标题和内容是硬编码的。需要将这些引用属性以组件形式接收</p><ol><li>首先，我们需要为我们的props定义个TypeScript类型。我们将会用到一个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">title: string;</span><br><span class="line">content: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将该<code>IProps</code>类型以尖括号引入定义中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Confirm extends React.Component&lt;IProps&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>React.Component</code>被称为泛型类。泛型类允许类型允许在内部传递使用。在我们的例子中，我们传递了<code>IProps</code>接口。</p></blockquote><ol start="3"><li>然后我们的类内使用<code>this.props.propName</code>。在我们的JSX文件中，可以直接引用这些属性，取代硬编码的方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;div className=&quot;confirm-title-container&quot;&gt;</span><br><span class="line">&lt;span&gt;&#123;this.props.title&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;confirm-content-container&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;this.props.content&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>目前编译不过，因为<code>Confirm</code>组件现在要求传入<code>title</code>和<code>content</code>属性，</p><p>修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">title=&quot;React and TypeScript&quot;</span><br><span class="line">content=&quot;Are you sure you want to learn React and TypeScript?&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3><span id="optional-props">Optional props</span></h3><p>接口Props的内容可以定义为可选属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">title: string;</span><br><span class="line">content: string;</span><br><span class="line">cancelCaption?: string;</span><br><span class="line">okCaption?: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="default-prop-values">Default prop values</span></h3><blockquote><p>当组件被初始化，可以被组件添加默认props属性值。它通过一个称为<code>defaultProps</code>的静态对象字面量实现。</p></blockquote><ol><li>创建默认的<code>cancelCaption</code>和<code>okCaption</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Confirm extends React.Component&lt;IProps&gt; &#123;</span><br><span class="line">public static defaultProps = &#123;</span><br><span class="line">cancelCaption: &quot;Cancel&quot;,</span><br><span class="line">okCaption: &quot;Okay&quot;</span><br><span class="line">&#125;;</span><br><span class="line">public render() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要覆盖默认属性，补充具体属性值即可，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">title=&quot;React and TypeScript&quot;</span><br><span class="line">content=&quot;Are you sure you want to learn React and TypeScript?&quot;</span><br><span class="line">cancelCaption=&quot;No way&quot;</span><br><span class="line">okCaption=&quot;Yes please!&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>带有默认值的可选属性便于组件使用，这样大部分通用的配置可以自动装配起来，不用组个指定。</p></blockquote><h2><span id="处理类组件事件">处理类组件事件</span></h2><p>事件存在于多数编程语言中。以允许我们执行特定逻辑。</p><h3><span id="基础事件句柄">基础事件句柄</span></h3><blockquote><p>所有的本地JavaScript事件都可以在JSX中处理。JSX允许我们通过属性来调用这些事件函数。本地事件名会被带上前缀<code>on</code>以峰驼方式传递。因此，例如在JS中的属性事件是<code>click</code>，在JSX则对应<code>onClick</code>。</p></blockquote><p><strong>要查看所有可用事件列表，可以前往<code>node_modules/@types/react</code>文件夹的<code>index.d.ts</code>文件</strong></p><ol><li>首先是我们需要处理按钮上的<code>click</code>事件，对应上为，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button className=&quot;confirm-ok&quot; onClick=&#123;this.handleOkClick&#125;&gt;...&lt;/button&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建这个<code>handleOkClick</code>方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkClick() &#123;</span><br><span class="line">console.log(&quot;Ok clicked&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="the-this-problem">The this problem</span></h3><p>在事件的处理上承受来自JavaScript的经典<code>this</code>问题。我们在事件处理上获取不到引用，譬如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkClick() &#123;</span><br><span class="line">console.log(&quot;Ok clicked&quot;, this.props):</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击按钮，会出现undefined！！原因是<code>this</code>代表的是当前这个事件，而不是我们的类！</p><p>一种解决方法是，将<code>handleOkClick</code>方法改为 arrow function。</p><blockquote><p>arrow function相当于一个表达式。它不会创建自身的<code>this</code>——这样解决了<code>this</code>的问题。</p></blockquote><p>我们把原来的方法改一改，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkClick = () =&gt; &#123;</span><br><span class="line">console.log(&quot;Ok clicked&quot;, this.props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在再次点击按钮，程序正常了。</p><h3><span id="function-props">Function props</span></h3><p>有时候需要在组件消费者(component)中传递事件处理逻辑。</p><ol><li>修改对应的IProps接口，对应函数类型属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">title: string;</span><br><span class="line">content: string;</span><br><span class="line">cancelCaption?: string;</span><br><span class="line">okCaption?: string;</span><br><span class="line">onOkClick: () =&gt; void;</span><br><span class="line">onCancelClick: () =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在消费方引用函数属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">...</span><br><span class="line">onCancelClick=&#123;this.handleCancelConfirmClick&#125;</span><br><span class="line">onOkClick=&#123;this.handleOkConfirmClick&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3><span id="类组件状态">类组件状态</span></h3><p>状态是一个对象，它决定了组件的行为和渲染。我们需要在我们的app中引入状态，以管理我们Confirm窗口打开或关闭。</p><p>State的定义和Props类型，首先我们需要创建一个接口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">confirmOpen: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着传递<code>React.Component</code>的第二个泛型参数中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component&lt;&#123;&#125;, IState&gt;</span><br></pre></td></tr></table></figure><h3><span id="initializing-the-state">Initializing the state</span></h3><p>定义的状态需要被初始化，初始化动作在构造函数中实现，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: &#123;&#125;) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">confirmOpen: true,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>state被存放在组件类内的一个私有属性中。以及可以在组件内被使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">open=&#123;this.state.confirmOPen&#125;</span><br><span class="line">...</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3><span id="changing-state">Changing state</span></h3><p>状态的改变不能直接访问控制，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkConfirmClick = () =&gt; &#123;</span><br><span class="line">this.state.confirmOpen = false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>它会出现错误消息说状态是read-only!的。我们需要使用<code>setState</code>方法来改变状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkConfirmClick = () =&gt; &#123;</span><br><span class="line">this.setState(&#123; confirmOpen: false &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们仅能在构造函数中初始化State，其它类组件任何地方都不能初始化状态。以及，状态的更改，仅能在改组件内调用<code>setState</code>实现。</p><h2><span id="class-component-life-cycle-methods">Class component life cycle methods</span></h2><p>生命周期允许我们在特定点做某些处理。</p><h3><span id="componentdidmount">componentDidMount</span></h3><p>当一个组件被插入到DOM中时，<code>componentDidMount</code>被调用。下面是一些该方法常见的用例：</p><ul><li>调用web service以获取某些数据</li><li>添加事件监听</li><li>初始化计时</li><li>初始化第三方库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private timer: number = 0;</span><br><span class="line"></span><br><span class="line">public componentDidMount() &#123;</span><br><span class="line">this.timer = window.setInterval(() =&gt; this.handleTimerTick(), 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="componentwillunmount">componentWillUnmount</span></h3><p>当组件从DOM内被移除时触发<code>componentWillUnmount</code>，下面是常见的用例，</p><ul><li>移除事件监听器</li><li>取消激活的网络请求</li><li>移除计时器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public componentWillUnmount() &#123;</span><br><span class="line">clearInterval(this.timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="getderivedstatefromprops">getDerivedStateFromProps</span></h3><p>每次组件被渲染时，触发<code>getDerivedStateFromProps</code>。它是一个组件的静态方法，返回改变的状态或返回null。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static getDerivedStateFromProps(props: &#123;&#125;, state: IState) &#123;</span><br><span class="line">console.log(&quot;getDerivedStateFromProps&quot;, props, state);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="getsnapshotbeforeupdate-and-componentdidupdate">getSnapshotBeforeUpdate and componentDidUpdate</span></h3><h3><span id="shouldcomponentupdate">shouldComponentUpdate</span></h3><h2><span id="creating-a-function-component">Creating a function component</span></h2><p>函数组件是从JavaScript函数实现的。</p><h3><span id="creating-a-basic-function-component">Creating a basic function component</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const Confirm: React.SFC&lt;IProps&gt; = (props) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整示例如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const ComponentName: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">const handler = () =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">&lt;div&gt; Our JSX&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ComponentName.defaultProps = &#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ComponentName;</span><br></pre></td></tr></table></figure><h3><span id="stateful-function-components">Stateful function components</span></h3><p>富状态函数组件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Confirm: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">const [cancelClickCount, setCancelClickCount] = React.useState(0);</span><br><span class="line"></span><br><span class="line">const handleOkClick = () =&gt; &#123;</span><br><span class="line">props.onOkClick();</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;创建一个React和TypeScript项目&lt;/li&gt;
&lt;li&gt;创建一个类组件&lt;/li&gt;
&lt;li&gt;处理类组件的事件&lt;/li&gt;
&lt;li&gt;类组件的状态&lt;/li&gt;
&lt;li&gt;类组件声明周期方法&lt;/li&gt;
&lt;li&gt;创建一个函数组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第二章 TypeScript3的新特性</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_2_TypeScript_3/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_2_TypeScript_3/</id>
    <published>2019-11-27T07:50:01.000Z</published>
    <updated>2019-11-05T03:57:07.995Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Tuples</li><li>The unknown type</li><li>Project references</li><li>Default JSX properties</li></ul><h2><span id="tuples">Tuples</span></h2><p>元组类型用中括号表示，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> product: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line">product = [<span class="string">"Table"</span>, <span class="number">500</span>];</span><br></pre></td></tr></table></figure><h2><span id="javascript-的rest扩展语法">JavaScript 的rest扩展语法</span></h2><p>在JavaScript中，一个<code>rest</code>参数就是汇集多个参数以一个参数表示。因此它称为<code>rest</code>(剩余的、)。不要跟RESTful混淆。</p><p>TS中用三个点表示这种<code>rest</code>参数，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">...scores</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="open-ended-tuples">Open-ended tuples</span></h3><p>结合rest的扩展，tuple可以写成，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">string</span>, ...number[]];</span><br><span class="line"><span class="keyword">const</span> billyScores: Scores = [<span class="string">"Billy"</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">75</span>];</span><br></pre></td></tr></table></figure><h3><span id="tuple-function-parameters">Tuple function parameters</span></h3><p>除了rest扩展写法，TS3支持带上参数类型，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">...scores: [...<span class="built_in">number</span>[]]</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">string</span>, ...number[]];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logNameAndScores</span>(<span class="params">...scores: Scores</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores);</span><br><span class="line">&#125;</span><br><span class="line">logNameAndScores(<span class="string">"Sally"</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">70</span>);</span><br></pre></td></tr></table></figure><h3><span id="spread-expressions">Spread expressions</span></h3><p>TS3中允许使用扩展语法，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScore</span>(<span class="params">score1: <span class="built_in">number</span>, score2: <span class="built_in">number</span>, score3: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(score1, score2, score3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scores: [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">75</span>, <span class="number">65</span>, <span class="number">80</span>];</span><br><span class="line"></span><br><span class="line">logScore(...scores);</span><br></pre></td></tr></table></figure><p>但不支持open-ended tuples，因此下面代码编译出错，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scoresUnlimited: [...number[]] = [<span class="number">75</span>, <span class="number">65</span>, <span class="number">80</span>];</span><br><span class="line">logScore(...scoresUnlimited);</span><br></pre></td></tr></table></figure><h3><span id="empty-tuples">Empty tuples</span></h3><p>TS3中可以定义空tuple，</p><p>对于类型别名，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Empty = [];</span><br></pre></td></tr></table></figure><p>声明该类型的一个变量，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> empty: Empty = [];</span><br></pre></td></tr></table></figure><p>如果尝试给该类型指派一个非空值，会出现编译错误，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notEmpty: Empty = [<span class="string">"Billy"</span>];</span><br></pre></td></tr></table></figure><p>空tuple可能没什么用，它的主要用处在于作为联合类型(union type)的一部分。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [] | [<span class="built_in">number</span>] | [<span class="built_in">number</span>, <span class="built_in">number</span>] | [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> benScores: Scores = [];</span><br><span class="line"><span class="keyword">const</span> samScores: Scores = [<span class="number">55</span>];</span><br><span class="line"><span class="keyword">const</span> bobScores: Scores = [<span class="number">95</span>, <span class="number">75</span>];</span><br><span class="line"><span class="keyword">const</span> jayneScores: Scores = [<span class="number">65</span>, <span class="number">50</span>, <span class="number">70</span>];</span><br><span class="line"><span class="keyword">const</span> sarahScores: Scores = [<span class="number">95</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">75</span>];<span class="comment">// illegal</span></span><br></pre></td></tr></table></figure><h3><span id="可选tuple元素">可选tuple元素</span></h3><p>TS中用<code>?</code>表示一个可选元素，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">number</span>, <span class="built_in">number</span>?, <span class="built_in">number</span>?];</span><br></pre></td></tr></table></figure><p>这样就可以创建带一个到三个元素的变量，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> samScores: Scores = [<span class="number">55</span>];</span><br><span class="line"><span class="keyword">const</span> bobScores: Scores = [<span class="number">95</span>, <span class="number">75</span>];</span><br><span class="line"><span class="keyword">const</span> jayneScores: Scores = [<span class="number">65</span>, <span class="number">50</span>, <span class="number">70</span>];</span><br></pre></td></tr></table></figure><p>严格来说，TypeScript是把类型看做是“真实的”，因此对应Type Safe的层次也是看做是类型安全的，不匹配的类型将发生编译错误，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sarahScores: Scores = [<span class="number">95</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">75</span>];<span class="comment">// illegal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> benScores: Scores = [];<span class="comment">// illegal</span></span><br></pre></td></tr></table></figure><h3><span id="unknown-type">Unknown type</span></h3><p>TS中对未知类型使用<code>unknow</code>表示，<code>unknown</code>类型通常和<code>any</code>类型交替地使用，编译器不会对这种类型进行检查，因此，下面写法是正确的，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">scores: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores.firstName);</span><br><span class="line"><span class="built_in">console</span>.log(scores.scores);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call this function</span></span><br><span class="line">logScores(&#123;</span><br><span class="line">name: <span class="string">"Billy"</span>,</span><br><span class="line">scores: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">75</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但如果改为，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScoresBetter</span>(<span class="params">socres: unknown</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores.firstName);</span><br><span class="line"><span class="built_in">console</span>.log(scores.scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>立即获得一个编译器警告，带程序依然有效。</p><h3><span id="type-checking-with-a-type-redicate">Type checking with a type redicate</span></h3><p>顾名思义，就是用“谓语”对类型作检查，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scoresCheck = (</span><br><span class="line">scores: <span class="built_in">any</span></span><br><span class="line">): scores is &#123; name: <span class="built_in">string</span>; scores: <span class="built_in">number</span>[] &#125; =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"name"</span> <span class="keyword">in</span> socres &amp;&amp; <span class="string">"scores"</span> <span class="keyword">in</span> scores;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>scores</code>参数带有类型谓语，<code>scores is { name: string; scores: number[] }</code>，以确保它包含类型属性<code>name</code>和<code>scores</code>。</p><p>可以结合类型别名，提高可读性，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = &#123; name: <span class="built_in">string</span>; scores: <span class="built_in">number</span>[] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scoresCheck = (</span><br><span class="line">scores: <span class="built_in">any</span></span><br><span class="line">): scores is Scores =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"name"</span> <span class="keyword">in</span> scores &amp;&amp; <span class="string">"scores"</span> <span class="keyword">in</span> scores;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类型谓语属于type guard的一种方式，还有其它几种实现type guard的方式。</p><h3><span id="type-narrowing-with-a-type-assertion">Type narrowing with a type assertion</span></h3><p>类型收缩(type narrowing)类似于Java的强制转换，通过类型断言的方式，使用<code>as</code>关键实现，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">scores: <span class="built_in">number</span>[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">scores: unknown</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log((scores <span class="keyword">as</span> scores).name);</span><br><span class="line"><span class="built_in">console</span>.log((scores <span class="keyword">as</span> Scores).scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="project-reference">Project reference</span></h3><p>(略) 参考网上tsconfig.json内容，</p><h3><span id="default-jsx-properties">Default JSX properties</span></h3><p>在TS3之前，我们必须设置默认的Props属性，并检查是否为null，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">text: <span class="built_in">string</span>;</span><br><span class="line">delimiter?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SplitText <span class="keyword">extends</span> Component&lt;IProps&gt; &#123;</span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">delimiter: <span class="string">","</span></span><br><span class="line">&#125;;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> bits = <span class="keyword">this</span>.props.text.split(<span class="keyword">this</span>.props.delimiter!);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;bits.map(<span class="function">(<span class="params">bit: <span class="built_in">string</span></span>) =&gt;</span> (</span><br><span class="line">&lt;li key=&#123;bit&#125;&gt;&#123;bit&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">))&#125;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;SplitText text=<span class="string">"Fred,Jane,Bob"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>TS3之后，可以不必要将<code>delimiter</code>属性设置为optional的，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">text: <span class="built_in">string</span>;</span><br><span class="line">delimiter: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SplitText <span class="keyword">extends</span> Component&lt;IProps&gt; &#123;</span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">delimiter: <span class="string">","</span></span><br><span class="line">&#125;;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> bits = <span class="keyword">this</span>.props.text.split(<span class="keyword">this</span>.props.delimiter);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;bits.map(<span class="function">(<span class="params">bit: <span class="built_in">string</span></span>) =&gt;</span> (</span><br><span class="line">&lt;li key=&#123;bit&#125;&gt;&#123;bit&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">))&#125;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="问题">问题</span></h3><ol><li>怎么调用<code>drawPoint</code>这个函数，</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawPoint</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> point: [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line">drawPoint(...point);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建另外一个版本的<code>drawPoint</code>，参数用<code>[number, number, number]</code>实现，</p></li><li><p>在问题2中，让<code>z</code>是可选的。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;The unknown type&lt;/li&gt;
&lt;li&gt;Project references&lt;/li&gt;
&lt;li&gt;Default JSX properties&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span id=&quot;tuples&quot;&gt;Tuple
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第一章 基础</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_1_TypeScript_Basics/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_1_TypeScript_Basics/</id>
    <published>2019-11-27T07:50:00.000Z</published>
    <updated>2019-11-05T03:57:07.992Z</updated>
    
    <content type="html"><![CDATA[<ul><li>TypeScript 的好处</li><li>基础类型</li><li>接口，类型alias，类</li><li>模块结构</li><li>配置</li><li>TypeScript lint</li><li>代码格式化</li></ul><h2><span id="技术前提">技术前提</span></h2><ul><li><p>TypeScript 背景： <a href="https://www.typescriptlang.org/play/" target="_blank" rel="noopener">https://www.typescriptlang.org/play/</a></p></li><li><p>Node.js 以及npm：Node &gt;= 8.2， npm &gt;= 5.2</p></li><li><p>TypeScript安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure></li><li><p>Visual Studio Code：前端开发利器</p></li></ul><h2><span id="typescript-带来了什么">TypeScript 带来了什么</span></h2><p>TypeScript解决了JavaScript代码增长带来难于阅读和难于维护的痛点。比起JavaScript，</p><ul><li>开发前期可以捕获代码错误</li><li>静态类型允许开发工具提升开发者的经验和生产力</li><li>兼容各种浏览器，以及一些非浏览器平台</li></ul><h2><span id="基础类型">基础类型</span></h2><h3><span id="原生类型">原生类型</span></h3><ul><li><code>string</code>: Unicode字符串</li><li><code>number</code>: 表达整数和浮点数</li><li><code>boolean</code>: 逻辑true或false</li><li><code>undefined</code>: 未定义值</li><li><code>null</code>: null</li></ul><h3><span id="类型标注">类型标注</span></h3><p>TypeScript在变量声明时带有类型，语法为<code>:Type</code>。</p><h3><span id="类型推断">类型推断</span></h3><p>TypeScript可以简单地有赋值推断出其类型，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4><span id="any">Any</span></h4><p>既没有值，也没有指定类型的变量，它的类型是<code>any</code>，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag;</span><br></pre></td></tr></table></figure><p>它用于动态声明，表示其值的类型会随后被确定。</p><h4><span id="void">Void</span></h4><p>用于函数的返回表示，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function logText(text: string): void &#123;</span><br><span class="line">console.log(text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常不带return语句体的函数，返回值类型会自动推断为<code>void</code>。</p><h4><span id="never">Never</span></h4><p>表示“从不”，用于指定该代码不可达</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function foreverTask(taskName: string): never &#123;</span><br><span class="line">while(true) &#123;</span><br><span class="line">console.log(`Doing $&#123;taskName&#125; over and over again ...`);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数一直循环，永不还回，所以需要给定类型<code>never</code>。</p><h4><span id="enumerations">Enumerations</span></h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> OrderStatus &#123;</span><br><span class="line">Paid,</span><br><span class="line">Shipped,</span><br><span class="line">Completed,</span><br><span class="line">Cancelled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问通过下标方式，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let status = OrderStatus.Paid</span><br></pre></td></tr></table></figure><p>TypeScript的枚举，遵循自动下标的语法，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum OrderStatus &#123;</span><br><span class="line">Paid = 1,</span><br><span class="line">Shipped,</span><br><span class="line">Completed,</span><br><span class="line">Cancelled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不声明的部分按顺序逐个递增，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let status = OrderStatus.Shipped;</span><br><span class="line">console.log(status);// print 2</span><br></pre></td></tr></table></figure><h4><span id="objects">Objects</span></h4><p>TS的object和JS是共享的，是一种非原生类型。例如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const customer = &#123;</span><br><span class="line">name: &quot;Lamps Ltd&quot;,</span><br><span class="line">turnover: 2000134,</span><br><span class="line">active: true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>和JS一样，可以通过下标，直接修改和访问其值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customer.turnover = 123,</span><br></pre></td></tr></table></figure><p>不同的是，它有类型，所以下面会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">customer.turnover = &quot;500,500&quot;,</span><br></pre></td></tr></table></figure><h4><span id="arrays">Arrays</span></h4><p>数组需要带类型，其它地方用法和JS差不多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const numbers: number[] = [];</span><br><span class="line">number.push(1);</span><br></pre></td></tr></table></figure><p>另外可以通过类型推断来声明，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const numbers = [1, 3, 5];</span><br></pre></td></tr></table></figure><p>迭代方式有几种，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i in numbers) &#123;</span><br><span class="line">console.log(numbers[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers.forEach(function (num)&#123;</span><br><span class="line">console.log(num);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3><span id="创建接口类型别名类">创建接口，类型别名，类</span></h3><p>常量的定义，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const customer = &#123;</span><br><span class="line">name: &quot;Lamps Ltd&quot;,</span><br><span class="line">turnover: 2000134,</span><br><span class="line">active: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是改为下面会出现编译错误，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let customer: Object;</span><br><span class="line">customer = &#123;</span><br><span class="line">name: &quot;Lamps Ltd&quot;,</span><br><span class="line">turnover: 2000134,</span><br><span class="line">active: true</span><br><span class="line">&#125;;</span><br><span class="line">customer.turnover = 20002000;// error</span><br></pre></td></tr></table></figure><p>Typescript 编译器不知道<code>customer</code>有哪些属性，所以需要引入结构化特性。</p><h3><span id="interfaces">Interfaces</span></h3><p>接口用<code>interface</code>关键字声明，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface Product &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="properties">Properties</span></h3><p>properties就是结构的其中一个属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Product &#123;</span><br><span class="line">name: string;</span><br><span class="line">unitPrice: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的属性必须声明了才能访问，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const table: Product = &#123;</span><br><span class="line">name: &quot;Table&quot;,</span><br><span class="line">unitPrice: 500</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口也是类型，所以可以在其它接口引用，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface Product &#123;</span><br><span class="line">name: string;</span><br><span class="line">unitPrice: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const table: Product = &#123;</span><br><span class="line">name: &quot;Table&quot;,</span><br><span class="line">unitPrice: 500</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const tableOrder: OrderDetail = &#123;</span><br><span class="line">product: table,</span><br><span class="line">quantity: 1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3><span id="方法签名">方法签名</span></h3><p>接口可以包含方法签名而没有具体实现，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line">getTotal(idscount: number): number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体对象需要实现接口的方法签名，方法签名必须一致，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const tableOrder: OrderDetail = &#123;</span><br><span class="line">product: table,</span><br><span class="line">quantity: 1,</span><br><span class="line">getTotal(discount: number): number &#123;</span><br><span class="line">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</span><br><span class="line">const discountAmount = priceWithoutDiscount * discount;</span><br><span class="line">return priceWithoutDiscount - discountAmount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接口中的方法签名，参数部分可以不用声明类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface OrderDetail &#123;</span><br><span class="line">....</span><br><span class="line">getTotal(number): number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但省略的参数类型使得阅读难于理解，我们不知道具体参数是什么类型？</p><h3><span id="可选属性可选参数">可选属性，可选参数</span></h3><p>和大部分现代语言类似，TypeScript中使用<code>?</code>表示属性或参数是个optional 的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line">dateAdded?: Date,</span><br><span class="line">getTotal(discount: number): number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法签名的参数也可以是可选的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line">dateAdded?: Date,</span><br><span class="line">getTotal(discount?: number): number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法签名的实现可以改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getTotal(discount?: number): number &#123;</span><br><span class="line">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</span><br><span class="line">const discountAmount = priceWithoutDiscount * (discount || 0);</span><br><span class="line">return priceWithoutDiscount - discountAmount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此在方法调用时，可以不传参数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableOrder.getTotal();</span><br></pre></td></tr></table></figure><h3><span id="readonly-属性">Readonly 属性</span></h3><p><code>readonly</code>属性，顾名思义只能读取，不能修改，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Product &#123;</span><br><span class="line">readonly name: string;</span><br><span class="line">unitPrice: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，下面操作发生编译错误，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const table: Product = &#123;</span><br><span class="line">name: &quot;Table&quot;;</span><br><span class="line">unitPrice: 500</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">table.name = &quot;Better Table&quot;;</span><br></pre></td></tr></table></figure><h3><span id="接口继承">接口继承</span></h3><p>接口继承使用<code>extends</code>关键字，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Product &#123;</span><br><span class="line">name: string;</span><br><span class="line">unitPrice: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface DiscountCode [</span><br><span class="line">code: string;</span><br><span class="line">percentage: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ProductWithDiscountCodes extends Product &#123;</span><br><span class="line">discountCodes: DiscountCode[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的实例可以简单创建，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const table: ProductWithDiscountCodes = &#123;</span><br><span class="line">name: &quot;Table&quot;,</span><br><span class="line">unitPrice: 500,</span><br><span class="line">discountCodes: [</span><br><span class="line">&#123; code: &quot;SUMMER10&quot;, percentage: 0.1 &#125;,</span><br><span class="line">&#123; code: &quot;BFRI&quot;, percentage: 0.2 &#125;</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3><span id="类型别名">类型别名</span></h3><p>类型别名就是给指定类型标准一个新的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type GetTotal = (discount: number) =&gt; number;</span><br><span class="line"></span><br><span class="line">interface OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line">getTotal: GetTotal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型别名和接口相似，不同的是类型别名不能有extends，也不能implemented。</p><h3><span id="类">类</span></h3><p>类比起接口有更多的特性，</p><h3><span id="基础类">基础类</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Product &#123;</span><br><span class="line">name: stirng;</span><br><span class="line">unitPrice: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大部分概念和Java类型，可以通过<code>new</code>关键字声明实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const table = new Product();</span><br><span class="line">table.name = &quot;Table&quot;;</span><br><span class="line">table.unitPrice = 500;</span><br></pre></td></tr></table></figure><p>可以调用对应的成员方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line"></span><br><span class="line">getTotal(discount: number): number &#123;</span><br><span class="line">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</span><br><span class="line">const discountAmount = priceWithoutDiscount * discount;</span><br><span class="line">return priceWithoutDiscount - discountAmount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对应实例，调用成员方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const table = new Product();</span><br><span class="line">table.name = &quot;Table&quot;;</span><br><span class="line">table.unitPrice = 500;</span><br><span class="line"></span><br><span class="line">const orderDtail = new OrderDetail();</span><br><span class="line">orderDetail.product = table;</span><br><span class="line">orderDetail.quantity = 2;</span><br><span class="line"></span><br><span class="line">const total = orderDetail.getTotal(0.1);</span><br><span class="line">console.log(total);</span><br></pre></td></tr></table></figure><h3><span id="接口继承">接口继承</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface IOrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line">getTotal(discount: number): number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class OrderDetail implements IOrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line"></span><br><span class="line">getTotal(discount: number): number &#123;</span><br><span class="line">const priceWithoutDiscount = this.product.unitPrice * this.quantity;</span><br><span class="line">const discountAmount = priceWithoutDiscount * discount;</span><br><span class="line">return priceWithoutDiscount - discountAmount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="构造器">构造器</span></h3><p>TS中的构造函数概念和Java一样，形式不一样，TS中需要使用<code>constructor</code>私有成员，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class OrderDetail implements IOrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: number;</span><br><span class="line"></span><br><span class="line">constructor(product: Product, quantity: number) &#123;</span><br><span class="line">this.product = product;</span><br><span class="line">this.quantity = quantity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTotal(discount: number): number = &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实例时，会强制要求传递参数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const orderDetail = new OrderDetail(table, 2);</span><br></pre></td></tr></table></figure><p>某些情况下，可以使用默认值，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">constructor(product: Product, quantity: number = 1) &#123;</span><br><span class="line">this.product = product;</span><br><span class="line">this.quantity = quantitty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明实例时可以不写，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const orderDetail = new OrderDetail(table);</span><br></pre></td></tr></table></figure><p>可以少写点代码，在构造参数前引入<code>public</code>关键字，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class OrderDetail implements IOrderDetail &#123;</span><br><span class="line">constructor(public product: Product, public quantity: number = 1) &#123;</span><br><span class="line">this.product = product;</span><br><span class="line">this.quantity = quantity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getTotal(discount: number): number &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="类继承">类继承</span></h3><p>类之间可以继承，使用关键字<code>extends</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Product &#123;</span><br><span class="line">name: string;</span><br><span class="line">unitPrice: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface DiscountCode &#123;</span><br><span class="line">code: string;</span><br><span class="line">percentage: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ProductWithDiscountCodes etends Product &#123;</span><br><span class="line">discountCodes: DiscountCode[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类型实例的创建如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const table = new ProductWithDiscountCodes();</span><br><span class="line">table.name = &quot;Table&quot;;</span><br><span class="line">table.unitPrice = 500;</span><br><span class="line">table.discountCodes = [</span><br><span class="line">&#123; code: &quot;SUMMER10&quot;, percentage: 0.1 &#125;,</span><br><span class="line">&#123; code: &quot;BFRI&quot;, percentage: 0.2 &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>父类包含构造函数，子类也必须包含构造函数的实现，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Product &#123;</span><br><span class="line">constructor(public: name: string; public unitPrice: number) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface DiscountCode &#123;</span><br><span class="line">code: string;</span><br><span class="line">percentage: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ProductWithDiscountCodes extends Product &#123;</span><br><span class="line">constructor(public name: string, public unitPrice: number) &#123;</span><br><span class="line">super(name, unitPrice);</span><br><span class="line">&#125;</span><br><span class="line">discountCodes: DiscountCode[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="抽象类">抽象类</span></h3><p>抽象类使用<code>abstract</code>关键字声明，表示没有实例化能力的成员</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Product &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">uitPrice: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bread = <span class="keyword">new</span> Procut();<span class="comment">// compile error</span></span><br></pre></td></tr></table></figure><p>抽象方法需要带有<code>abstract</code>关键字，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Product &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">uitPrice: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">delete</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有子类都要实现这个抽象方法，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Fond <span class="keyword">extends</span> Product &#123;</span><br><span class="line">deleted: <span class="built_in">boolean</span>;</span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> bestBefore: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>() &#123;</span><br><span class="line"><span class="keyword">this</span>.deleted = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="访问修改器">访问修改器</span></h3><p>按照访问作用域划分，目前有以下几种，</p><ul><li><code>public</code>:</li><li><code>private</code>:</li><li><code>protected</code>:</li><li><default>:</default></li></ul><h3><span id="setter和getter">Setter和Getter</span></h3><p>和Java不同，TS中有关键字<code>get</code>和<code>set</code>，语法和方法类似，其中<code>get</code>不带参数；<code>set</code>但一个参数，一般用于私有方法的操作处理，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Product &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> _unitPrice: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">get</span> unitPrice(): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>._unitPrice || <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> unitPrice(value: <span class="built_in">number</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">value = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>._unitPrice = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> table = <span class="keyword">new</span> Product();</span><br><span class="line">table.name = <span class="string">"Table"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(table.unitPrice);</span><br><span class="line">table.unitPrice = <span class="number">-10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(table.unitPrice);</span><br></pre></td></tr></table></figure><h3><span id="static">Static</span></h3><p>静态声明的方法或属性，作用域类自身而不是类的对象实例。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">static</span> getTotal(discount: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">const</span> priceWithoutDiscount = <span class="keyword">this</span>.product.unitPrice * <span class="keyword">this</span>.quantity;<span class="comment">// compile error</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态作用域里面的访问成员要求也必须是静态的，因此不能在静态方法中使用<code>this.properties</code>进行访问</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getTotal(unitPrice: <span class="built_in">number</span>, quantity: <span class="built_in">number</span>, discount: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">const</span> priceWithoutDiscount = unitPrice * quantity;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = OrderDetail.getTotal(<span class="number">500</span>, <span class="number">2</span>, <span class="number">0.1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br></pre></td></tr></table></figure><h2><span id="结构化-转变-为模块">结构化 转变 为模块</span></h2><p>由于TypeScript是最终编译成为JavaScript，并且其作用域的是全局的。这样就带来一个问题是，同名的条目会在不同文件中造成冲突，因此需要实现模块化来解决这个问题，使得代码更容易组织，更高的重用性。</p><h3><span id="模块化格式">模块化格式</span></h3><p>模块化是属于ES6的JavaScript的部分特性。简要描述一下TypeScript的不同模块化格式：</p><ul><li><code>AMD(Asynchronous Module Definition)</code>: 最常见，对目标浏览器，用一个<code>define</code>函数来定义模块。</li><li><code>CommonJS</code>: 用于Node.js程式，使用<code>module.exports</code>来定义模块，用<code>require</code>来定义依赖。</li><li><code>UMD(Universal Module Definition)</code>: 可以用于浏览器app和Node.js程式。</li><li><code>ES6</code>: 使用<code>export</code>关键字来定义模块，<code>import</code>来定义依赖。</li></ul><p>笔者这里使用ES6。</p><h3><span id="exporting">Exporting</span></h3><p>从一个module进行export以允许在其它module中被使用。使用<code>export</code>关键字。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Product &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">unitPrice: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者重命名，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Product &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">unitPrice: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; Product <span class="keyword">as</span> Stock &#125;</span><br></pre></td></tr></table></figure><h3><span id="importing">Importing</span></h3><p>有export就需要在其它模块进行import，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Product &#125; <span class="keyword">from</span> <span class="string">"./product"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: <span class="built_in">number</span>;</span><br><span class="line">getTotal(discount: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者重命名，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Product <span class="keyword">as</span> Stock &#125; <span class="keyword">from</span> <span class="string">"./product"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> OrderDetail &#123;</span><br><span class="line">product: Stock;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="default-exports">default exports</span></h3><p>带有<code>default</code> 语句的export不需要花括号，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">unitPrice: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">"./product"</span>;</span><br></pre></td></tr></table></figure><h2><span id="编译配置">编译配置</span></h2><p>TypeScript的编译器是<code>tsc</code>，它会将对应的<code>TS</code>文件编译为<code>JS</code>文件，</p><p>新建文件，<code>orderDetail.ts</code>，内容如下，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Product &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">unitPrice: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> OrderDetail &#123;</span><br><span class="line">product: Product;</span><br><span class="line">quantity: <span class="built_in">number</span>;</span><br><span class="line">getTotal(discount: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">const</span> priceWithoutDiscount = <span class="keyword">this</span>.product.unitPrice * <span class="keyword">this</span>.quantity;</span><br><span class="line"><span class="keyword">const</span> discountAmount = priceWithoutDiscount * discount;</span><br><span class="line"><span class="keyword">return</span> priceWithoutDiscount - discountAmount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开终端，输入如下命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc orderDetail</span><br></pre></td></tr></table></figure><p>不出错的话，在对应目录会生成一个文件<code>orderDetail.js</code>，里面是转换的JavaScript内容，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">exports.__esModule = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> OrderDetail = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OrderDetail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">OrderDetail.prototype.getTotal = <span class="function"><span class="keyword">function</span> (<span class="params">discount</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> priceWithoutDiscount = <span class="keyword">this</span>.product.unitPrice * <span class="keyword">this</span>.quantity;</span><br><span class="line"><span class="keyword">var</span> discountAmount = priceWithoutDiscount * discount;</span><br><span class="line"><span class="keyword">return</span> priceWithoutDiscount - discountAmount;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> OrderDetail;</span><br><span class="line">&#125;());</span><br><span class="line">exports.OrderDetail = OrderDetail;</span><br></pre></td></tr></table></figure><h3><span id="常见编译选项">常见编译选项</span></h3><ul><li><code>--target</code>: 目标，默认是<code>ES3</code>，</li><li><code>--outDir</code>: 输出目录</li><li><code>--module</code>: 指定模块格式，<code>--target</code>是ES3或ES5时，默认是<code>CommonJS</code></li><li><code>--allowJS</code>: 告诉编译器处理JavaScript文件，应对那些TypeScript无法应对时候，需要JavaScript的情况。</li><li><code>--watch</code>: watch mode模式，修改文件后保存后立即编译输出。</li><li><code>--noImplicitAny</code>: 强制显式指定<code>any</code>类型。</li><li><code>--noImplicitReturns</code>: 强制显式返回。即对于不是<code>void</code>返回类型，所有case必须有返回值。</li><li><code>--sourceMap</code>: development模式中，生成<code>*.map</code>文件，以允许调试</li><li><code>--moduleResolution</code>: 告诉编译器如何处理模块，有两个选项<code>classic</code>或<code>node</code>，如果不指定，默认是<code>classic</code>，会要求使用第三方包，所以需要显式设置为<code>node</code>，编译器会查找<code>node_modules</code>模块。</li></ul><h3><span id="tsconfigjson">tsconfig.json</span></h3><p><code>tsconfig.json</code>文件是上面这些开关的几种配置文件，样例如下，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line"><span class="string">"target"</span>: <span class="string">"esnext"</span>,</span><br><span class="line"><span class="string">"outDir"</span>: <span class="string">"dist"</span>,</span><br><span class="line"><span class="string">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line"><span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line"><span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"noImplicitReturns"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"noImplicitAny"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="指定编译文件">指定编译文件</span></h3><p>在<code>tsconfig.json</code>中可以指定编译那些TypeScript文件，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"files"</span>: [<span class="string">"product.ts"</span>, <span class="string">"orderDetail.ts"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者指定目录，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">...</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"include"</span>: [<span class="string">"src/**/*"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="typescript-linting">TypeScript linting</span></h3><p>linting是一种检查规则，用于加强语法或优化编译，参考TSLint官网。</p><h3><span id="code-formatting">Code Formatting</span></h3><p>代码格式化有很多种，常见的是<code>prettier</code>，另外还有less、css等等。</p><h2><span id="本章回归">本章回归</span></h2><ol><li>TS的5中原生类型是那些？// string, number, boolean, undefined, null</li><li>下面变量<code>flag</code>类型推断的类型是什么？// boolean</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flag = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>接口和类型别名的区别是什么？// type alias不能继承</li><li>下面代码有什么错误？如何处理？</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Product &#123;</span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> unitPrice: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> table = <span class="keyword">new</span> Product();</span><br><span class="line">table.name = <span class="string">"Table"</span>;</span><br><span class="line">table.unitPrice = <span class="number">700</span>;</span><br></pre></td></tr></table></figure><p>// 要么编写IProduct接口，继承成员属性；要么在Product中写上成员name，unitPrice；要么带上setter/getter方法；</p><ol start="5"><li>如果想要我们的TS支持IE11，编译选项<code>--target</code>应该带什么？</li><li>如何转换为ES6版本的<code>.js</code>文件？// --target ES6</li><li>如何阻止代码中出现<code>console.log</code>语句？// tslint.yml 带<code>no-console</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;TypeScript 的好处&lt;/li&gt;
&lt;li&gt;基础类型&lt;/li&gt;
&lt;li&gt;接口，类型alias，类&lt;/li&gt;
&lt;li&gt;模块结构&lt;/li&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;li&gt;TypeScript lint&lt;/li&gt;
&lt;li&gt;代码格式化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Jira 快速安装</title>
    <link href="http://galudisu.info/2019/10/21/jira/jira-install/"/>
    <id>http://galudisu.info/2019/10/21/jira/jira-install/</id>
    <published>2019-10-21T09:13:27.000Z</published>
    <updated>2019-11-05T03:31:35.052Z</updated>
    
    <content type="html"><![CDATA[<p>JIRA是一个缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件，开发者是澳大利亚的Atlassian。JIRA这个名字并不是一个缩写，而是截取自“<strong>Gojira</strong>”，日文的哥斯拉发音。</p><p>采用Docker实现破解版的Jira安装。</p><a id="more"></a><ol><li>下载镜像</li></ol><p>一定要安装<code>jira-software</code>(不是jira)，否则没有agile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull dchevell/jira-software:7.13.0</span><br></pre></td></tr></table></figure><ol start="2"><li>运行容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it -p  8080:8080  --privileged  -m 4096M -v /data/jira-data:/var/atlassian/application-data/jira  -v /etc/localtime:/etc/localtime --name jira dchevell/jira-software:7.13.0</span><br></pre></td></tr></table></figure><ol start="3"><li>拷贝文件到容器内</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/hlwojiv/some-software/raw/master/Jira/mysql-connector-java-5.1.25-bin.jar</span><br><span class="line">wget https://github.com/hlwojiv/some-software/raw/master/Jira/atlassian-universal-plugin-manager-plugin-2.22.4.jar</span><br><span class="line">wget https://github.com/hlwojiv/some-software/raw/master/Jira/atlassian-extras-3.2.jar</span><br></pre></td></tr></table></figure><p>拷贝mysql-connector</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp mysql-connector-java-5.1.25-bin.jar jira:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure><p>进入容器修改mysql-connector的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jira bash</span><br><span class="line">chmod 755 /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/mysql-connector-java-5.1.25-bin.jar</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart jira</span><br></pre></td></tr></table></figure><ol start="3"><li>安装MySQL</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -v /data/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --restart=unless-stopped -d mysql:5.7</span><br></pre></td></tr></table></figure><ol start="4"><li>设置</li></ol><p>浏览器访问JiraWeb，语言可以设为中文，选择「我将设置它自己」——「下一步」</p><p>数据库设置，数据库类型选择「MySQL」，接着填入你的MySQL连接信息（需要你在你的MySQL数据库中创建数据库，数据库的字符类型必须是utf8），测试可以连接之后点击「下一步」</p><p>设置应用程序的属性——「下一步」</p><p>申请许可证关键字，点击「生成Jira试用许可证」</p><p>需要注册账号，注册完之后重新回到这个页面，选择相关信息，点击「Generate License」</p><p>点击「Yes」</p><p>页面就会带着你的许可证关键字回到Jira的设置页面，接着点击「下一步」</p><p>等待一会就进入设置管理员页面，填入一些信息即可，接着「下一步」</p><p>点击「完成」即完成设置</p><ol start="5"><li>拷贝文件到容器内</li></ol><p>拷贝atlassian-extras到容器内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp atlassian-extras-3.2.jar jira:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure><p>进入容器设置atlassian-extras的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jira bash</span><br><span class="line">chmod 755 /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/atlassian-extras-3.2.jar</span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart jira</span><br></pre></td></tr></table></figure><p>拷贝插件到容器内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp atlassian-universal-plugin-manager-plugin-2.22.4.jar jira:/opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/</span><br></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it jira bash</span><br><span class="line">chmod 755 /opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/atlassian-universal-plugin-manager-plugin-2.22.4.jar</span><br></pre></td></tr></table></figure><p>删除另一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /opt/atlassian/jira/atlassian-jira/WEB-INF/atlassian-bundled-plugins/atlassian-universal-plugin-manager-plugin-2.22.9.jar</span><br></pre></td></tr></table></figure><p>破解结束，进入jira下载任意插件，申请试用，自动破解</p><ol start="6"><li>下面来下载一个收费软件试试</li></ol><p>安装完了点击「获取许可证」</p><p>接着在「管理应用」中可以看到，该插件已经破解了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JIRA是一个缺陷跟踪管理系统，为针对缺陷管理、任务追踪和项目管理的商业性应用软件，开发者是澳大利亚的Atlassian。JIRA这个名字并不是一个缩写，而是截取自“&lt;strong&gt;Gojira&lt;/strong&gt;”，日文的哥斯拉发音。&lt;/p&gt;
&lt;p&gt;采用Docker实现破解版的Jira安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="jira" scheme="http://galudisu.info/tags/jira/"/>
    
  </entry>
  
  <entry>
    <title>随机算法关于生日悖论的求值</title>
    <link href="http://galudisu.info/2019/02/26/algorithm/probabilistic/birthday-paradox-problem/"/>
    <id>http://galudisu.info/2019/02/26/algorithm/probabilistic/birthday-paradox-problem/</id>
    <published>2019-02-26T12:13:58.000Z</published>
    <updated>2019-08-27T09:05:47.468Z</updated>
    
    <content type="html"><![CDATA[<p>In probability theory, the birthday problem, or birthday paradox This not a paradox in the sense of leading to a logical contradiction, but is called a paradox because the mathematical truth contradicts naive intuition: most people estimate that the chance is much lower than 50%. pertains to the probalility that in a set of randomly chosen people some pair of them will have the same birthday. In a group of at least 23 randomly chosen people, there is more than 50% probalility that some pair of them will both have been born on the same day. For 57 or more people, the probability is more than 99%, and it reachese 100% when the number of people reaches 366 (by the pigeon hole principle, ignoring leap yeas). The mathematics behind this problem lead to a well-known cryptographic attack call the birthday attack.</p><a id="more"></a><p>Using simulation, estimate the number of independent people required in a groups before we can expect a better than even chance that at least 2 independent people in a group share a common birthday. Furthermore: Simulate and thus estimate when we can expect a better than even chance that at least 3, 4 &amp; 5 independent people of the group share a common birthday. For simplicity assume that all of the people are alive…</p><h2><span id="calculating-the-probalility">Calculating the probalility</span></h2><p>数学概率推导方法，</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">probe</span></span>(n: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> probe: <span class="built_in">f64</span> = <span class="number">0</span>.;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> k &lt; n &#123;</span><br><span class="line">        k += <span class="number">1</span>;</span><br><span class="line">        probe = <span class="number">1.0</span> - ((<span class="number">1.0</span> - probe) * ((<span class="number">365</span> - (k - <span class="number">1</span>)) <span class="keyword">as</span> <span class="built_in">f64</span>) / (<span class="number">365</span> <span class="keyword">as</span> <span class="built_in">f64</span>));</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Number of people: &#123;&#125;, \tProb. of same birthday: &#123;&#125;"</span>, k, probe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="birthday-attack">Birthday Attack</span></h2><p>生日悖论可以描述为：在N个人中，想使至少由两个人生日相同的概率大于50%，问N的最小值是多少？答案是23人。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DAYS_IN_YEAR: <span class="built_in">usize</span> = <span class="number">365</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">equal_birthdays</span></span>(n_sharers: <span class="built_in">usize</span>, group_size: <span class="built_in">usize</span>, n_repetitions: <span class="built_in">usize</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = rand::thread_rng();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> eq = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..n_repetitions &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> group = <span class="built_in">vec!</span>[<span class="number">0</span>; DAYS_IN_YEAR];</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..group_size &#123;</span><br><span class="line">            <span class="keyword">let</span> idx = rng.gen_range(<span class="number">0</span>, group.len());</span><br><span class="line">            group[idx] = group[idx] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> group.iter() &#123;</span><br><span class="line">            <span class="keyword">if</span> *k &gt;= n_sharers &#123;</span><br><span class="line">                eq = eq + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (eq <span class="keyword">as</span> <span class="built_in">f64</span> * <span class="number">100.0</span>) / n_repetitions <span class="keyword">as</span> <span class="built_in">f64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> group_est = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> sharers <span class="keyword">in</span> <span class="number">2</span>..<span class="number">6</span> &#123;</span><br><span class="line">        <span class="comment">// Coarse.</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> group_size = group_est + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> equal_birthdays(sharers, group_size, <span class="number">100</span>) &lt; <span class="number">50.0</span> &#123;</span><br><span class="line">            group_size = group_size + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Finer.</span></span><br><span class="line">        <span class="keyword">let</span> inf = ((group_size - (group_size - group_est)) <span class="keyword">as</span> <span class="built_in">f64</span> / <span class="number">4.0</span>) <span class="keyword">as</span> <span class="built_in">usize</span>;</span><br><span class="line">        <span class="keyword">for</span> gs <span class="keyword">in</span> inf..(group_size + <span class="number">999</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> eq = equal_birthdays(sharers, group_size, <span class="number">250</span>);</span><br><span class="line">            <span class="keyword">if</span> eq &gt; <span class="number">50.0</span> &#123;</span><br><span class="line">                group_size = gs;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> gs <span class="keyword">in</span> (group_size - <span class="number">1</span>)..(group_size + <span class="number">999</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> eq = equal_birthdays(sharers, gs, <span class="number">50_000</span>);</span><br><span class="line">            <span class="keyword">if</span> eq &gt; <span class="number">50.0</span> &#123;</span><br><span class="line">                group_est = gs;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"&#123;&#125; independent people in a group of &#123;&#125; share a common birthday. &#123;&#125;"</span>, sharers, gs, eq);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In probability theory, the birthday problem, or birthday paradox This not a paradox in the sense of leading to a logical contradiction, but is called a paradox because the mathematical truth contradicts naive intuition: most people estimate that the chance is much lower than 50%. pertains to the probalility that in a set of randomly chosen people some pair of them will have the same birthday. In a group of at least 23 randomly chosen people, there is more than 50% probalility that some pair of them will both have been born on the same day. For 57 or more people, the probability is more than 99%, and it reachese 100% when the number of people reaches 366 (by the pigeon hole principle, ignoring leap yeas). The mathematics behind this problem lead to a well-known cryptographic attack call the birthday attack.&lt;/p&gt;
    
    </summary>
    
    
      <category term="probabilistic" scheme="http://galudisu.info/tags/probabilistic/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7快速构建Ceph集群</title>
    <link href="http://galudisu.info/2019/02/08/ceph/quickly-build-a-new-ceph-cluster-with-ceph-deploy-on-centos-7/"/>
    <id>http://galudisu.info/2019/02/08/ceph/quickly-build-a-new-ceph-cluster-with-ceph-deploy-on-centos-7/</id>
    <published>2019-02-08T02:34:51.000Z</published>
    <updated>2019-08-27T09:05:47.477Z</updated>
    
    <content type="html"><![CDATA[<p>Ceph是一个分布式、可扩展、高可用、性能优异的存储系统平台，支持块设备、文件系统和REST三种存储接口。它是一个高度可配置的系统，并提供了一个命令行界面用于监视和控制其存储集群。Ceph还包含认证和授权功能，可兼容多种存储网关接口，如OpenStack Swift和Amazon S3。</p><a id="more"></a><h2><span id="ceph-cluster">Ceph cluster</span></h2><p>机器准备，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ceph    10.10.51.200</span><br><span class="line">mon1    10.10.51.201</span><br><span class="line">mon2    10.10.51.202</span><br><span class="line">mon3    10.10.51.203</span><br><span class="line">osd1    10.10.51.211   (10.10.110.211)</span><br><span class="line">osd2    10.10.51.212   (10.10.110.212)</span><br><span class="line">osd3    10.10.51.213   (10.10.110.213)</span><br><span class="line">osd4    10.10.51.214   (10.10.110.214)</span><br></pre></td></tr></table></figure><p>因为ceph-deploy工具是通过主机名与其他节点通信，所以要通过hostnamectl修改主机名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname ceph</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname mon1</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname mon2</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname mon3</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd1</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd2</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd3</span><br><span class="line">hostnamectl --static <span class="built_in">set</span>-hostname osd4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">每个节点执行以下命令，</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">useradd -d /home/cephuser -m cephuser</span><br><span class="line">passwd cephuser</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cephuser ALL = (root) NOPASSWD:ALL"</span> | sudo tee /etc/sudoers.d/cephuser</span><br><span class="line">chmod 0440 /etc/sudoers.d/cephuser</span><br><span class="line">yum install -y ntp ntpdate ntp-doc</span><br><span class="line">ntpdate 0.us.pool.ntp.org</span><br><span class="line">hwclock --systohc</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd.service</span><br><span class="line">systemctl start ntpd.service</span><br><span class="line">yum install -y open-vm-tools <span class="comment">## If you run the nodes as virtual machines, otherwise remove this line</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">sed -i <span class="string">'s/SELINUX=enforcing/SELINUX=disabled/g'</span> /etc/selinux/config</span><br><span class="line">sed -i s<span class="string">'/Defaults requiretty/#Defaults requiretty'</span>/g /etc/sudoers</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure><p>每个节点建立cephuser用户的ssh连接，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id cephuser@osd1</span><br></pre></td></tr></table></figure><p>在每个节点执行下面命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.ssh/config</span><br><span class="line">Host osd1</span><br><span class="line">Hostname osd1</span><br><span class="line">User cephuser</span><br><span class="line">Host osd2</span><br><span class="line">Hostname osd2</span><br><span class="line">User cephuser</span><br><span class="line">Host osd3</span><br><span class="line">Hostname osd3</span><br><span class="line">User cephuser</span><br><span class="line">Host osd4</span><br><span class="line">Hostname osd4</span><br><span class="line">User cephuser</span><br><span class="line">Host mon1</span><br><span class="line">Hostname mon1</span><br><span class="line">User cephuser</span><br><span class="line">Host mon2</span><br><span class="line">Hostname mon2</span><br><span class="line">User cephuser</span><br><span class="line">Host mon3</span><br><span class="line">Hostname mon3</span><br><span class="line">User cephuser</span><br></pre></td></tr></table></figure><p>更改权限，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 440 ~/.ssh/config</span><br></pre></td></tr></table></figure><p>每个OSD节点准备磁盘，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parted -s /dev/sdc mklabel gpt mkpart primary xfs 0% 100%</span><br><span class="line">mkfs.xfs /dev/sdc -f</span><br><span class="line">parted -s /dev/sdd mklabel gpt mkpart primary xfs 0% 100%</span><br><span class="line">mkfs.xfs /dev/sdd -f</span><br><span class="line">parted /dev/sde mklabel gpt mkpart primary xfs 0% 100%</span><br><span class="line">mkfs.xfs /dev/sde -f</span><br><span class="line">parted -s /dev/sdb mklabel gpt mkpart primary 0% 33% mkpart primary 34% 66% mkpart primary 67% 100%</span><br></pre></td></tr></table></figure><p><img src="/img/ceph/osd-disk.png" alt=""></p><p>使用cephuser账号登录管理节点(即ceph node)，创建一个专用目录，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ceph-deploy</span><br><span class="line"><span class="built_in">cd</span> ceph-deploy/</span><br></pre></td></tr></table></figure><p>在监控节点安装和创建新集群，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uhv http://download.ceph.com/rpm-jewel/el7/noarch/ceph-release-1-1.el7.noarch.rpm</span><br><span class="line">sudo yum update -y &amp;&amp; sudo yum install ceph-deploy -y</span><br></pre></td></tr></table></figure><p>初始化配置，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi ceph.conf</span><br><span class="line">public network = 10.10.51.0/24</span><br><span class="line">cluster network = 10.10.110.0/24</span><br><span class="line"><span class="comment">#Choose reasonable numbers for number of replicas and placement groups.</span></span><br><span class="line">osd pool default size = 2 <span class="comment"># Write an object 2 times</span></span><br><span class="line">osd pool default min size = 1 <span class="comment"># Allow writing 1 copy in a degraded state</span></span><br><span class="line">osd pool default pg num = 256</span><br><span class="line">osd pool default pgp num = 256</span><br><span class="line"><span class="comment">#Choose a reasonable crush leaf type</span></span><br><span class="line"><span class="comment">#0 for a 1-node cluster.</span></span><br><span class="line"><span class="comment">#1 for a multi node cluster in a single rack</span></span><br><span class="line"><span class="comment">#2 for a multi node, multi chassis cluster with multiple hosts in a chassis</span></span><br><span class="line"><span class="comment">#3 for a multi node cluster with hosts across racks, etc.</span></span><br><span class="line">osd crush chooseleaf <span class="built_in">type</span> = 1</span><br></pre></td></tr></table></figure><p>然后，在为个节点安装ceph，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy install ceph mon1 mon2 mon3 osd1 osd2 osd3 osd4</span><br><span class="line">ceph-deploy mon create-initial</span><br><span class="line">ceph-deploy gatherkeys mon1</span><br></pre></td></tr></table></figure><p>在每个OSD节点创建OSD磁盘，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy disk zap osd1:sdc osd1:sdd osd1:sde</span><br><span class="line">ceph-deploy osd create osd1:sdc:/dev/sdb1 osd1:sdd:/dev/sdb2 osd1:sde:/dev/sdb3</span><br></pre></td></tr></table></figure><p>集群创建完后，发现OSD没有开启，这时新版ceph-deploy一个issue，执行下面命令解决，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sgdisk -t 1:45b0969e-9b03-4f30-b4c6-b4b80ceff106 /dev/sdb</span><br><span class="line">sgdisk -t 2:45b0969e-9b03-4f30-b4c6-b4b80ceff106 /dev/sdb</span><br><span class="line">sgdisk -t 3:45b0969e-9b03-4f30-b4c6-b4b80ceff106 /dev/sdb</span><br></pre></td></tr></table></figure><p>重启每个节点，给每个monitor加入systemd，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> ceph-mon.target</span><br></pre></td></tr></table></figure><p>最后，给所有节点部署密钥，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy admin ceph mon1 mon2 mon3 osd1 osd2 osd3 osd4</span><br><span class="line">sudo chmod +r /etc/ceph/ceph.client.admin.keyring</span><br></pre></td></tr></table></figure><p>一切如果正常，使用<code>ceph -v</code>和<code>ceph -s</code>会看到，</p><p><img src="/img/ceph/ceph-cluster.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ceph是一个分布式、可扩展、高可用、性能优异的存储系统平台，支持块设备、文件系统和REST三种存储接口。它是一个高度可配置的系统，并提供了一个命令行界面用于监视和控制其存储集群。Ceph还包含认证和授权功能，可兼容多种存储网关接口，如OpenStack Swift和Amazon S3。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ceph" scheme="http://galudisu.info/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 设计理念及主要概念之Volume(四)</title>
    <link href="http://galudisu.info/2019/02/08/kubernetes/kubernetes-04-theory-and-concpetion-md/"/>
    <id>http://galudisu.info/2019/02/08/kubernetes/kubernetes-04-theory-and-concpetion-md/</id>
    <published>2019-02-08T02:16:43.000Z</published>
    <updated>2019-08-27T09:05:47.521Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="kubernetes存储卷">Kubernetes存储卷</span></h2><p>默认情况下容器的数据都是非持久化的，在容器消亡以后数据也跟着丢失，所以Docker提供了Volume机制以便将数据持久化存储。类似的，Kubernetes提供了更强大的Volume机制和丰富的插件，解决了容器数据持久化和容器间共享数据的问题。</p><p>与Docker不同，Kubernetes Volume的生命周期与Pod绑定</p><ul><li>容器挂掉后Kubelet再次重启容器时，Volume的数据依然还在</li><li>而Pod删除时，Volume才会清理。数据是否丢失取决于具体的Volume类型，比如emptyDir的数据会丢失，而PV的数据不会丢失</li></ul><a id="more"></a><ol><li>Volume类型</li></ol><p>目前，Kubernetes支持以下Volume类型：</p><ul><li>emptyDir</li><li>hostPath</li><li>gcePersistentDisk</li><li>awsElasticBlokStore</li><li>nfs</li><li>iscsi</li><li>flocker</li><li>glusterfs</li><li>rbd</li><li>cephfs</li><li>gitRepo</li><li>secret</li><li>persistentVolumeClaim</li><li>downwardAPI</li><li>azureFileVolume</li><li>vsphereVolume</li><li>Quobyte</li><li>PortworxVolume</li><li>ScaleIO</li><li>FlexVolume</li><li>StorageOS</li><li>local</li></ul><p>这些Volume并非全部都是持久化的，emptyDir与hostPath数据节点级别的卷类型，emptyDir的生命周期与Pod资源相同，而使用hostPath卷的Pod一旦被重新调度至其他节点，那么它将无法再使用此前的数据。</p><p>再如，Secret和ConfigMap算得上是两种特殊的卷类型。</p><ul><li><p>Secret用于向Pod传递敏感信息、如密码、私钥、证书文件等，这些信息如果直接定义在镜像中很容易导致泄露，有了Secret资源，用户可以将这些信息存储于集群中而后再由Pod进行挂载，从而实现将敏感数据与系统解耦。</p></li><li><p>ConfigMap资源则用于向Pod注入非敏感数据，使用时，用户将数据直接存储于ConfigMap对象中，而后直接在Pod中使用ConfigMap卷引用它即可，它可以帮助实现容器配置文件集中化定义和管理。</p></li></ul><p>因此，类似于emptyDir、hostPath、secret、gitRepo等，这些Volume会随着Pod的消亡而消失。</p><ol start="2"><li>Volume的使用</li></ol><p>在Pod中定义Volume由两部分组成：一是<code>.spec.valumes</code>，用于支持不同的Volume类型；二是<code>.spec.containers.volumeMounts</code>，用于定义挂载列表。</p><p>在Pod级别定义Volume，<code>.spec.volumes</code>字段可以定义多个Volume，例如下面定义了emptyDir类型和gitRepo类型，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">logdata</span></span><br><span class="line"><span class="attr">  emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">  gitRepo:</span></span><br><span class="line"><span class="attr"> repository:</span> <span class="attr">https://github.com/barudisshu/kubernetes-pratise.git</span></span><br><span class="line"><span class="attr"> revision:</span> <span class="string">master</span></span><br><span class="line"><span class="attr"> directory:</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><p>定义好的Volume可以共享。当Pod中只有一个容器时，使用存储卷通常用于数据持久化。</p><p><code>.spec.containers.volumeMounts</code>字段定义了Volume的挂载列表。它的挂载格式是固定的，如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr"> spec:</span></span><br><span class="line">   <span class="string">...</span></span><br><span class="line"><span class="attr">   containers:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">&lt;String&gt;</span></span><br><span class="line"> <span class="string">...</span></span><br><span class="line"><span class="attr"> volumeMounts:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">name</span> <span class="string">&lt;String&gt;</span> <span class="bullet">-required-</span></span><br><span class="line">   <span class="string">mountPath</span> <span class="string">&lt;string&gt;</span> <span class="bullet">-required-</span></span><br><span class="line"><span class="string">readOnly</span> <span class="string">&lt;boolean&gt;</span></span><br><span class="line"><span class="string">subPath</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"><span class="string">montPropagation</span> <span class="string">&lt;string&gt;</span></span><br></pre></td></tr></table></figure><p>其中，</p><ul><li>name<string>：指定要挂载的存储的名称，必选</string></li><li>mountPath<string>：挂载点路径，容器文件系统上的路径，必选</string></li><li>readOnly<boolean>：是否挂载为只读</boolean></li><li>subPath<string>：子路径，即mountPath指定的路径下的一个字路径</string></li></ul><p>例如，容器myapp将logdata存储卷挂载在/var/log/myapp，将example挂载到/webdata/example目录，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">ikubernetes/myapp:v7</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">logdata</span></span><br><span class="line"><span class="attr">    mountPath:</span> <span class="string">/var/log/myapp/</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">    mountPath:</span> <span class="string">/webdata/example/</span></span><br></pre></td></tr></table></figure><ol start="3"><li>emptyDir</li></ol><p>emptyDir，如果Pod设置了emptyDir类型Volume，Pod被分配到Node上时候，会创建emptyDir，只要Pod运行在Node上，emptyDir都会存在(容器挂掉不会导致emptyDir丢失数据)，但是如果Pod从Node上被删除(Pod被删除，或者Pod发生迁移)，emptyDir也会被删除，并且永久丢失。</p><p><code>.spec.volumes.emptyDir</code>嵌套字段包含有，</p><ul><li>medium：存储介质的类型，默认为default,表示为使用节点默认存储介质；另一种是Memory，表示使用RAM的临时文件系统tmpfs，空间受限于内存，但性能非常好，通常用于作为缓存。</li><li>sizeLimit：当前Volume的空间限额，默认为nil，表示不限制；不过如果medium字段值为Memory时建议定义限额。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-emptydir-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">      emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-emptydir-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">nginx:1.12-alpine</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">pagegen</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">alpine</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/html</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">      command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"/bin/sh"</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"-c"</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">            <span class="string">echo</span> <span class="string">$(hostname)</span> <span class="string">$(date)</span> <span class="string">&gt;&gt;</span> <span class="string">/html/index.html;</span></span><br><span class="line">            <span class="string">sleep</span> <span class="number">10</span><span class="string">;</span></span><br><span class="line">          <span class="string">done</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>容器pagegen每隔10秒向Volume上的index.html文件追加一行信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pods vol-emptydir-pod</span><br></pre></td></tr></table></figure><p>创建Service或直接在集群访问Pod的信息，可看到，</p><p><img src="/img/kubernetes/pagegen-vol.png" alt=""></p><p>边车(sidecar)容器pagegen每隔10秒生成一行信息追加到Volume上的index.html文件。另外emptyDir存储卷可以基于RAM创建tmpfs文件系统的存储卷，常用于缓存，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">cache</span></span><br><span class="line"><span class="attr">  emptyDir:</span></span><br><span class="line"><span class="attr"> medium:</span> <span class="string">Memory</span></span><br></pre></td></tr></table></figure><ol start="4"><li>gitRepo</li></ol><p>gitRepo存储卷是emptyDir的实际应用，它看做是将一份Git仓储中的数据克隆(clone)到创建的空目录(emptyDir)，而后再创建容器并挂载该存储卷。</p><p>gitRepo存储卷自Kubernetes1.12开始已经废弃，所以这里不再陈述。</p><ol start="5"><li>hostPath</li></ol><p>hostPath运行挂载Node上的文件系统到Pod里面去。如果Pod需要使用Node上的文件，可以使用hostPath。因为它独立于Pod资源的生命周期，因而具有持久性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-hostpath-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-hostpath-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-hostpath-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">ikubernetes/filebeat:5.6.7-alpine</span></span><br><span class="line"><span class="attr">      env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">REDIS_HOST</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">redis.kubernetes.io:6379</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">LOG_LEVEL</span></span><br><span class="line"><span class="attr">          value:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">socket</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">  terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlog</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/var/log</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">varlibdockercontainers</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/var/lib/docker/containers</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">socket</span></span><br><span class="line"><span class="attr">      hostPath:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/var/run/docker.sock</span></span><br></pre></td></tr></table></figure><p>这类Pod资源通常受控于daemonset类型的Pod控制器，它运行于集群中的每个工作节点之上，负责收集工作节点上系统级的相关数据，因此使用hostPath存储卷。这里的filebeat应用架构中，通过Redis进行资源收集，这些收集的日志信息会发往ELK进行统计展示。</p><p>hostPath上如果是不受控于Daemonset的无状态应用，重新调度节点运行时，无法确保此前创建的文件或目录是否存在。因此，hostPath虽能持久化数据，但对调度器来说并不适用，这时需要用到独立于集群节点的持久化存储卷，即网络存储卷。</p><blockquote><p>网络存储卷，就是类似于NAS或SAN设备、分布式存储(GlusterFS、RBD)、云端存储(gcePersistentDisk、azureDisk、cinder和awsElasticBlockStore)以及构建在各类存储系统之上的抽象管理层(flocker、portworx Volume和vsphere Volume)等这类网络服务存储。</p></blockquote><ol start="6"><li>NFS</li></ol><p>NFS，即Network File System，网络文件系统。Kubernetes中通过简单配置可以挂在NFS到Pod中，而NFS中的数据是可以永久保存的，同时NFS支持同时写操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-nfs-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-nfs-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-nfs-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:4-alpine</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisport</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">      nfs:</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">/data/redis</span></span><br><span class="line"><span class="attr">        server:</span> <span class="string">nfs.kubernetes.io</span></span><br><span class="line"><span class="attr">        readOnly:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="7"><li>RBD</li></ol><p>Ceph RBD<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>是一个分布式、弹性可扩展的、高可靠的、性能优异的存储系统平台。要配置Pod资源使用RBD存储卷，前提条件要满足：</p><ul><li>Ceph RBD存储集群，</li><li>Ceph RBD集群中创建有满足Pod资源数据用到的存储image</li><li>Kubernetes集群内各个节点需要安装Ceph客户端程序包(ceph-common)</li></ul><p>它的字段信息有，</p><ul><li><code>monitors&lt;[]string&gt;</code>：Ceph存储监视器，逗号分隔的字符串列表；必选字段</li><li><code>image&lt;string&gt;</code>：rados image的名称，必选字段</li><li><code>pool&lt;string&gt;</code>：rados存储池名称，默认为RBD</li><li><code>user&lt;string&gt;</code>：rados用户名，默认为admin</li><li><code>keyring&lt;string&gt;</code>：RBD用户认证时使用的keyring文件路径，默认为<code>/etc/ceph/keyring</code></li><li><code>secretRef&lt;Object&gt;</code>：RBD用户认证时使用的保存有相应认证信息的Secret对象，会覆盖由keyring字段提供的密钥信息</li><li><code>readOnly&lt;boolean&gt;</code>：是否以只读的方式进行访问</li><li><code>fsType</code>：要挂载的存储卷的文件系统类型，至少应该是节点操作系统支持的文件系统，如ext4、xfs、ntf等，默认为ext4</li></ul><p>下面是使用RBD存储卷的Pod资源示例，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ceph-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"kubernetes.io/rbd"</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">QVFENnNsNWMrQm52T2hBQXVYclJVeVNuUzBhOXVUVk00WnpiVFE9PQ==</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ceph-rbd</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/rbd</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  monitors:</span> <span class="number">192.168</span><span class="number">.50</span><span class="number">.32</span><span class="string">,192.168.50.33,192.168.50.34</span></span><br><span class="line"><span class="attr">  adminId:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  adminSecretName:</span> <span class="string">ceph-secret</span></span><br><span class="line"><span class="attr">  pool:</span> <span class="string">kube</span></span><br><span class="line"><span class="attr">  userId:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  userSecretName:</span> <span class="string">ceph-secret</span></span><br><span class="line"><span class="attr">  fsType:</span> <span class="string">xfs</span></span><br><span class="line"><span class="attr">  imageFormat:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">  imageFeatures:</span> <span class="string">"layering"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-rbd-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-rbd-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">vol-rbd-pod</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:4-alpine</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisport</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redis-rbd-vol</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redis-rbd-vol</span></span><br><span class="line"><span class="attr">      persistentVolumeClaim:</span></span><br><span class="line"><span class="attr">        claimName:</span> <span class="string">ceph-claim</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ceph-claim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  accessModes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">ReadWriteOne</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="attr">    requests:</span></span><br><span class="line"><span class="attr">      storage:</span> <span class="number">2</span><span class="string">Gi</span></span><br></pre></td></tr></table></figure><p>该示例依赖于事先存在的一个Ceph存储集群，这里假设其监视器的地址为192.168.50.32、192.168.50.33、192.168.50.34三个主机，并且集群上的存储池kube中存在创建好的映像Redis，此映像拥有xfs文件系统。Ceph客户端访问集群时需要事先完成认证之后才能进行后续访问操作，认证信息保存于名为ceph-secret的Secret资源对象中。</p><p>更多关于reph的配置方式，参考<a href="https://jimmysong.io/kubernetes-handbook/practice/using-ceph-for-persistent-storage.html" target="_blank" rel="noopener">这里</a>。</p><ol start="8"><li>GlusterFS 存储卷</li></ol><p>GlusterFS(Gluster File System)是一个开源的分布式文件系统，是水平扩展存储解决方案Gluster的核心，具有强大的横向扩展能力，GlusterFS通过扩展能够支持数PB存储容量和处理数千客户端。要配置Pod资源使用GlusterFS存储卷，需要事先满足以下前提条件。</p><ul><li>存在某个可用集群，</li><li>在GlusterFS集群创建了Pod需要使用的Volume，</li><li>Kubernetes集群各个节点安装GlusterFS客户端程序包(glusterfs和glusterfs-fuse),</li></ul><p>Pod定义GlusterFS类型Volume，包含的字段有，</p><ul><li><code>endpoint&lt;string&gt;</code>：访问入口，必选字段，</li><li><code>path&lt;string&gt;</code>：用到GlusterFS集群的卷路径，</li><li><code>readOnly&lt;boolean&gt;</code>：是否为只读卷，</li></ul><p>下面是一个定义在vol-glusterfs.yaml配置文件中的Pod资源示例，它使用了GlusterFS存储卷持久保存应用数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">vol-glusterfs-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">vol-glusterfs-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">redis:alpine</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisport</span></span><br><span class="line"><span class="attr">      volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">      imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">redisdata</span></span><br><span class="line"><span class="attr">      glusterfs:</span></span><br><span class="line"><span class="attr">        endpoints:</span> <span class="string">glusterfs-endpoints</span></span><br><span class="line"><span class="attr">        path:</span> <span class="string">kube-redis</span></span><br><span class="line"><span class="attr">        readOnly:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>另外创建Endpoints资源glusterfs-endpoints，以用于Pod资源访问，</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="/2019/02/08/ceph/quickly-build-a-new-ceph-cluster-with-ceph-deploy-on-centos-7/">Ceph集群安装</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;kubernetes存储卷&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#kubernetes存储卷&quot;&gt;¶&lt;/a&gt;Kubernetes存储卷&lt;/h2&gt;
&lt;p&gt;默认情况下容器的数据都是非持久化的，在容器消亡以后数据也跟着丢失，所以Docker提供了Volume机制以便将数据持久化存储。类似的，Kubernetes提供了更强大的Volume机制和丰富的插件，解决了容器数据持久化和容器间共享数据的问题。&lt;/p&gt;
&lt;p&gt;与Docker不同，Kubernetes Volume的生命周期与Pod绑定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器挂掉后Kubelet再次重启容器时，Volume的数据依然还在&lt;/li&gt;
&lt;li&gt;而Pod删除时，Volume才会清理。数据是否丢失取决于具体的Volume类型，比如emptyDir的数据会丢失，而PV的数据不会丢失&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 设计理念及主要概念之Service(三)</title>
    <link href="http://galudisu.info/2019/02/06/kubernetes/kubernetes-03-theory-and-concpetion-md/"/>
    <id>http://galudisu.info/2019/02/06/kubernetes/kubernetes-03-theory-and-concpetion-md/</id>
    <published>2019-02-06T02:16:43.000Z</published>
    <updated>2019-08-27T09:05:47.519Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="服务发现与负载均衡">服务发现与负载均衡</span></h2><p>Kubernetes提供有服务发现和负载均衡机制，提供了Service资源，并通过kube-proxy配合cloud provider来适应不同的应用场景。</p><p>目前，Kubernetes中的负载均衡大致可以分为以下几种机制，每种机制都有其特定的应用场景：</p><ul><li>Service：直接用Service提供cluster内部的负载均衡，并借助cloud provider提供的LB提供外部访问</li><li>Ingress Controller：还是用Service提供cluster内部的负载均衡，但是通过自定义LB提供外部访问</li><li>Service Load Balancer：把load balancer直接跑在容器中，实现Bare Metal的Service Load Balancer</li><li>Custom Load Balancer：自定义负载均衡，并替代kube-proxy，一般在物理部署Kubernetes时使用，方便接入公司已有的外部服务</li></ul><a id="more"></a><h2><span id="service">Service</span></h2><p><img src="/img/kubernetes/service.svg" alt="service"></p><p>Kubernetes设计了Service的抽象：逻辑上的一组Pod，一种可以访问它们的策略。这一组Pod能够被Service访问，并为它们提供一个统一的入口。通常是通过Label Selector实现的。借助Service，应用可以方便的实现服务发现与负载均衡，实现应用的零宕机升级。</p><p>Service通过标签选取服务后端，一般配合Replication Controller或者Deployment来保证后端容器的正常运行。这些匹配标签的Pod IP和端口列表组成endpoints，由kube-proxy负责将服务IP负载均衡到这些endpoints上。</p><p>Service由四种类型：</p><ul><li>ClusterIP：默认类型，自动分配一个仅cluster内部可以访问的虚拟IP</li><li>NodePort：在ClusterIP基础上为Service在每台机器上绑定一个端口，这样就可以通过<code>&lt;NodeIP&gt;:NodePort</code>来访问该服务</li><li>LoadBalancer：在NodePort的基础上，借助cloud provider创建一个外部的负载均衡器，并将请求转发到<code>&lt;NodeIP&gt;:NodePort</code></li><li>ExternalName：将服务通过DNS CNAME记录方式转发到指定的域名(通过<code>spec.externalName</code>设定)。需要kube-dns版本在1.7以上。</li></ul><p>另外，也可以将已有的服务以Service的形式加入到Kubernetes集群中来，只需要在创建Service的时候不指定Label selector，而是在Service创建好后手动为其添加endpoint。</p><ol><li>Service定义</li></ol><p>通过yaml或json定义，比如下面定义一个名为nginx的服务，将服务的80端口转发到default namespace中带有标签<code>run=nginx</code>的Pod的80端口，</p><p>在此之前，首先要部署Pod，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>其次再定义Service，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">None</span></span><br></pre></td></tr></table></figure><p>Service自动分配了Cluster IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> kubectl get service nginx-app       </span><br><span class="line">NAME        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">nginx-app   ClusterIP   10.108.166.254   &lt;none&gt;        80/TCP    22s</span><br></pre></td></tr></table></figure><p>自动创建的endpoint</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get endpoints nginx-app</span><br><span class="line">NAME        ENDPOINTS                       AGE</span><br><span class="line">nginx-app   10.244.1.38:80,10.244.3.28:80   82s</span><br></pre></td></tr></table></figure><p>自动关联endpoint</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe service nginx-app  </span><br><span class="line">Name:              nginx-app</span><br><span class="line">Namespace:         default</span><br><span class="line">Labels:            run=nginx-app</span><br><span class="line">Annotations:       &lt;none&gt;</span><br><span class="line">Selector:          run=nginx-app</span><br><span class="line">Type:              ClusterIP</span><br><span class="line">IP:                10.108.166.254</span><br><span class="line">Port:              &lt;<span class="built_in">unset</span>&gt;  80/TCP</span><br><span class="line">TargetPort:        80/TCP</span><br><span class="line">Endpoints:         10.244.1.38:80,10.244.3.28:80</span><br><span class="line">Session Affinity:  None</span><br><span class="line">Events:            &lt;none&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>不指定Selectors服务</li></ol><p>在创建Service的时候，也可以不指定Selectors，用来将Service转发到Kubernetes集群外部的服务(而不是Pod)。目前有两种方法</p><p>一是， 自定义endpoint，即创建同名的service和endpoint，在endpoint中设置外部服务的IP和端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">targetPort:</span> <span class="number">9376</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line"><span class="attr">  - addresses:</span></span><br><span class="line"><span class="attr">      - ip:</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line"> <span class="attr">ports:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9376</span></span><br></pre></td></tr></table></figure><p>二是，通过DNS转发，在Service定义中指定externalName。此时DNS服务会给<code>&lt;service-name&gt;.&lt;namespace&gt;.svc.cluster.local</code>创建一个CNAME记录，其值为<code>my.database.example.com</code>。并且，该服务不会自动分配Cluster IP，需要通过Service的DNS来访问(这种服务也称为Headless Service)。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">my-service</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ExternalName</span></span><br><span class="line"><span class="attr">  externalName:</span> <span class="string">my.database.example.com</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Headless服务</li></ol><p>Headless服务即不需要Cluster IP的服务，即在创建Service的时候，指定<code>spec.clusterIP=None</code>，包括两种类型，</p><ul><li>不指定Selectors，但设置externalName，通过CNAME记录处理</li><li>指定Selectors，通过DNS A记录设置后端endpoint列表</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">tcp-80-80-3b6tl</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  sessionAffinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  revisionHistoryLimit:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="attr">nginx:latest</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">128</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">200</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">128</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">      dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>查询构建的nginx服务，可以看到Cluster IP是None</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service --all-namespaces=<span class="literal">true</span></span><br><span class="line">NAMESPACE     NAME                   TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">default       kubernetes             ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP         36h</span><br><span class="line">default       nginx-app              ClusterIP   None            &lt;none&gt;        80/TCP          43s</span><br><span class="line">kube-system   kube-dns               ClusterIP   10.96.0.10      &lt;none&gt;        53/UDP,53/TCP   36h</span><br><span class="line">kube-system   kubernetes-dashboard   NodePort    10.96.197.202   &lt;none&gt;        443:31234/TCP   27h</span><br></pre></td></tr></table></figure><p>查询部署的Pod信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> kubectl get pods -n default -o wide</span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE    IP            NODE                   NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-app-7d77b84f86-rsmrp   1/1     Running   0          2m1s   10.244.3.30   node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-app-7d77b84f86-snx4p   1/1     Running   0          2m1s   10.244.2.19   node02.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @10.96.0.10 nginx-app.default.svc.cluster.local</span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/dig-nginx.png" alt="dig-nginx"></p><p>这类Headless Service资源，一般通过Ingress Controller进行负载，</p><ol start="4"><li>服务暴露</li></ol><p>Service的IP地址仅在集群内可达，然而有些服务需要暴露外部网络。此时需要在集群边缘为其添加一层转发机制，以实现将外部请求流量接入到集群Service资源上，</p><p>Kubernetes的Service共有四种类型， ClusterIP、NodePort、LoadBalancer和ExternalName：</p><ul><li>ClusterIP Service：使用iptables模式，集群内部的源IP会保留(不做SNAT)。如果client和server pod在同一个Node上，那源IP就是client pod的IP地址；如果在不同的Node上，源IP则取决于网络插件是如何处理的，比如使用flannel时，源IP是node flannel IP地址。</li><li>NodePort Service：源IP会做SNAT，server pod看到的源IP是Node IP。为了避免这种情况，可以给service加上annotation <code>service.beta.kubernetes.io/external-traffic=OnlyLocal</code>，让service只代理本地endpoint的请求(如果没有本地endpoint则直接丢包)，从而保留源IP。</li><li>LoadBalancer Service：源IP会做SNAT，server pod看到的源IP是Node IP。在GKE/GCE中，添加annotation <code>service.beta.kubernetes.io/external-traffic=OnlyLocal</code>后可以自动从负载均衡器中删除没有本地endpoint的Node。</li><li>ExternalName：主机名被DNS服务解析至CNAME类型的记录。它并不是由Kubernetes集群提供的服务，而是把集群外部的某服务以DNS CNAME记录的方式映射到集群。因此这种类型的Service没有ClusterIP、NodePort、label、也不会有endpoint。</li></ul><blockquote><p>为了减缓IP地址空间枯竭问题，NAT被引入提出，主要有两种方式，</p></blockquote><blockquote><p>SNAT，源地址转换，Source Network Address Translation，在NAT路由中，将ipv4的源地址转换为公网可访问的IP<br>DNAT，目标地址转换，Destination Network Address Translation，在NAT路由中，将ipv4的目标地址转换为私有网络的可访问IP</p></blockquote><ol start="5"><li>Ingress Controller</li></ol><p>Service虽然解决了服务发现和负载均衡的问题，但它在使用上还是有一些限制，比如</p><ul><li>只支持4层负载均衡，没有7层功能</li><li>对外访问的时候，NodePort类型需要在外部搭建额外的负载均衡，而LoadBalancer要求Kubernetes必须跑在支持的cloud provider上面</li></ul><p>Ingress就是为了解决这些限制而引入的新资源，主要用来将服务暴露到cluster外面，并且可以自定义服务的访问策略。比如想要通过负载均衡器实现不同子域名到不同服务的访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo.bar.com --|                |-&gt; foo.bar.com s1:80</span><br><span class="line">              | 178.91.123.132 |</span><br><span class="line">bar.foo.com --|                |-&gt; bar.foo.com s2:80</span><br></pre></td></tr></table></figure><p>可以这样来定义Ingress：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">ingress.kubernetes.io/rewrite-target:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/nginx</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>注意Ingress本身并不会自动创建负载均衡器，cluster中需要运行一个ingress controller来根据Ingress的定义来管理负载均衡器。目前设计提供了nginx和gce的参考实现。</p><p>Kubernetes中，Service资源和Pod资源的IP地址仅能用于集群网络内部的通信，所有的网络流量都无法穿透边界路由器(Edge Router)以实现集群内外通信。即使Service中使用NodePort或LoadBalancer通过节点引入外部流量，它依然是4层流量转发，可用的负载均衡器也为传输层负载均衡机制。</p><p>Ingress是Kubernetes API的标准资源类型之一，Ingress控制器可以由任何具有反向代理(HTTP/HTTPS)功能的服务程序实现，例如Nginx、Envoy、HAProxy、Vulcand和Traefik等。</p><p>Traefik提供了易用的Ingress Controller，使用方法见<a href="https://docs.traefik.io/user-guide/kubernetes/" target="_blank" rel="noopener">https://docs.traefik.io/user-guide/kubernetes/</a>。</p><p>不管怎样，你都需要先安装Ingress Controller，</p><p>首先确保nginx-ingress是否部署，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm list</span><br><span class="line">NAME               REVISIONUPDATED                 STATUS  CHART              APP VERSIONNAMESPACE</span><br><span class="line">rolling-rattlesnake1       Wed Feb  6 05:09:06 2019DEPLOYEDnginx-ingress-0.9.50.10.2     default</span><br></pre></td></tr></table></figure><p>如果没有安装，部署一份，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/mandatory.yaml</span><br></pre></td></tr></table></figure><p>另外还需要手动创建一份Service为其创建相关的NodePort或LoadBalancer，并明确指定端口和IP地址，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress-controller</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30080</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30443</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="number">10.99</span><span class="number">.99</span><span class="number">.99</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>这是因为Ingress规则需要由一个Service资源对象辅助识别相关的所有Pod对象，但ingress-nginx控制器可经由<code>host</code>规则的定义直接将流量调度，</p><p>下面动手实践一下，部署两份Ingress，负载到这个nginx-ingress-controller下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">tomcat-deploy</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">testing</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">tomcat.kubernetes.io</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">tomcat-svc</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx-ingress</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress.class:</span> <span class="string">"nginx"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">    - host:</span> <span class="string">nginx.kubernetes.io</span></span><br><span class="line"><span class="attr">      http:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="attr">          - backend:</span></span><br><span class="line"><span class="attr">              serviceName:</span> <span class="string">nginx-app</span></span><br><span class="line"><span class="attr">              servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/ingress-controller-service.png" alt=""></p><p>通常情况下，servcie和pod仅可在集群内部网络中通过IP地址访问。所有到达边界路由器的流量或被丢弃或被转发到其它地方。从概念上讲，可能是，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">internet</span><br><span class="line">      |</span><br><span class="line">------------</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><p>Ingress是授权入站连接到达集群服务的规则集合，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> internet</span><br><span class="line">     |</span><br><span class="line">[ Ingress ]</span><br><span class="line">--|-----|--</span><br><span class="line">[ Services ]</span><br></pre></td></tr></table></figure><p>Ingress控制器自身也是运行于集群中的Pod资源对象，它与被代理的运行为Pod资源的应用运行在同一网络中，</p><p><img src="/img/kubernetes/ingress-controller.svg" alt=""></p><p>在实际使用中，在集群之外应该存在一个用于调度用户请求至个节点上Ingress控制器相关的NodePort的负载均衡器。如果不具有LBaaS的使用条件，用户也可以基于Nginx、Haproxy、LVS等手动构建，并通过Keepalived等解决方案实现其服务的高可用配置。</p><p><img src="/img/kubernetes/nginx-lb.png" alt="nginx-lb"></p><ol start="6"><li>Service Load Balancer</li></ol><p>在Ingress出现以前，Service Load Blancer是推荐的解决Service局限性的方式。Service Load Balancer将haproxy跑在容器中，并监控service和endpoint的变化，通过容器IP对外提供4层和7层负载均衡服务。</p><p>社区提供的Service Load Balancer支持四种负载均衡协议：TCP、HTTP、HTTPS和SSL TERMINATION，并支持ACL访问控制。</p><ol start="7"><li>Custom Load Balancer</li></ol><p>虽然Kubernetes提供了丰富的负载均衡机制，但在实际使用的时候，还是会碰到一些复杂的场景是它不能支持的，比如</p><ul><li>接入已有的负载均衡设备</li><li>多租户网络情况下，容器网络和主机网络是隔离的，这样<code>kube-proxy</code>就不能正常工作</li></ul><p>这个时候可以自定义组件，并代替kube-proxy来做负载均衡。基本的思路是监控Kubernetes中Service和endpoint的变化，并根据这些变化来配置负载均衡器。比如weave flux、nginx plus、kube2haproxy等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务发现与负载均衡&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#服务发现与负载均衡&quot;&gt;¶&lt;/a&gt;服务发现与负载均衡&lt;/h2&gt;
&lt;p&gt;Kubernetes提供有服务发现和负载均衡机制，提供了Service资源，并通过kube-proxy配合cloud provider来适应不同的应用场景。&lt;/p&gt;
&lt;p&gt;目前，Kubernetes中的负载均衡大致可以分为以下几种机制，每种机制都有其特定的应用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service：直接用Service提供cluster内部的负载均衡，并借助cloud provider提供的LB提供外部访问&lt;/li&gt;
&lt;li&gt;Ingress Controller：还是用Service提供cluster内部的负载均衡，但是通过自定义LB提供外部访问&lt;/li&gt;
&lt;li&gt;Service Load Balancer：把load balancer直接跑在容器中，实现Bare Metal的Service Load Balancer&lt;/li&gt;
&lt;li&gt;Custom Load Balancer：自定义负载均衡，并替代kube-proxy，一般在物理部署Kubernetes时使用，方便接入公司已有的外部服务&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 设计理念及主要概念之Pod(二)</title>
    <link href="http://galudisu.info/2019/02/04/kubernetes/kubernetes-02-theory-and-concpetion-md/"/>
    <id>http://galudisu.info/2019/02/04/kubernetes/kubernetes-02-theory-and-concpetion-md/</id>
    <published>2019-02-04T02:16:43.000Z</published>
    <updated>2019-08-27T09:05:47.517Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes使用共享网络将多个物理机或虚拟机汇集到一个集群中，在各服务器之间进行通信，该集群时配置Kubernetes的所有组件、功能和工作负载的物理平台。集群中一台服务器(或高可用部署中的一组服务器)作为Master，负责管理整个集群，其余作为Worker Node，集群中的主机可以是物理服务器，也可以是虚拟机(包括云VPS)。</p><a id="more"></a><h2><span id="集群概念">集群概念</span></h2><ol><li>Master节点</li></ol><p>Master是集群的网关和中枢，负责为用户和客户端暴露API、状态信息、管理和调度负责，以及编排其它组件之间的通信等任务。单个Master节点可以完成所有功能，实际生产环境由于负载均衡等目的，需要协同部署多个Master节点。</p><ol start="2"><li>Node节点</li></ol><p>Node节点属于Worker节点，由多个主机构建。Worker节点不暴露任何信息，不对外开发接口。</p><h2><span id="主要概念">主要概念</span></h2><p>Kubernetes由很多技术概念，同时对应很多API对象，API对象是k8s集群中的管理操作单元。</p><p>每个API对象都有3大类属性：元数据metadat、规范spec和状态status。元数据是用来表示API对象的，每个对象至少有3个元数据：namespace、name和uid；除此之外还有各种各样的标签label是用来标识和匹配不同的对象。规范spec描述了用户期望k8s集群中的分布式系统达到的理想状态(desired State)，状态status描述了系统实际当前达到的状态(Status)。</p><p>k8s中的API对象设计理念之一，是所有操作都是声明式的(Declarative)。所以你会发现会有很多yaml配置。声明式操作在分布式系统中的好处是稳定，不怕丢失操作或运行多次。</p><p>下面简述一些常见的API对象。</p><h2><span id="pod">Pod</span></h2><p>Pod是k8s的最小调度单元，同一个Pod中的容器共享网络名称空间和存储资源，这些容器可经本地回环节口lo直接通信，但彼此又在Mount、User及PID等名称空间上保持隔离。</p><p>特性：</p><ul><li>包含多个共享IPC、Network和UTC namespace的容器，可直接本地通信</li><li>所有Pod内容器都可以访问共享的Volume，可以访问共享数据</li><li>Pod一旦调度后就跟Node绑定，即使Node挂掉也不会重新调度，推荐使用Deployments、Daemonsets等控制器来容错</li><li>优雅终止：Pod删除的时候先给其内的进程发送SIGTERM，等待一段时间(grace period)后才强制停止运行的进程</li><li>特权容器(通过SecurityContext配置)具有改变系统配置的权限</li></ul><p><img src="/img/kubernetes/module_03_pods.svg" alt="Pod"></p><p>通过yaml或接送描述Pod和其内Container的运行环境以及期望状态，比如一个最简单的nginx pod可以定义为，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">sepc:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>volume可以为容器提供持久化存储，比如，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis-storage</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/data/redis</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">redis-storage</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>重启机制，RestartPolicy</p><p>目前支持三种RestartPolicy</p><ul><li>Always: 只要退出就重启</li><li>OnFailure: 失败退出时重启</li><li>Never: 只要退出就不再重启</li></ul><p>这里的重启指在Pod所在Node本地重启，它不会调度到其它Node上去。</p><p>环境变量为容器提供了一些重要的资源，包括容器和Pod的基本信息以及集群中服务的信息等，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line"><span class="attr">  name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">gcr.io/google_containers/busybox</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">[</span> <span class="string">"sh"</span><span class="string">,</span> <span class="string">"-c"</span><span class="string">]</span></span><br><span class="line"><span class="attr">args:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">env</span></span><br><span class="line"><span class="attr">resource:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"32Mi"</span></span><br><span class="line"><span class="attr">cpu:</span> <span class="string">"125m"</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"64Mi"</span></span><br><span class="line"><span class="attr">cpu:</span> <span class="string">"250m"</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_NODE_NAME</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">fieldRef:</span></span><br><span class="line">    <span class="attr">fieldPath:</span> <span class="string">sepc.nodeName</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAMESPACE</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">fieldRef:</span></span><br><span class="line">    <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_SERVICE_ACCOUNT</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">fieldRef:</span></span><br><span class="line">    <span class="attr">fieldPath:</span> <span class="string">spec.serviceAccountName</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_CPU_REQUEST</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line"><span class="attr">resourceFieldRef:</span></span><br><span class="line">  <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line">  <span class="attr">resource:</span> <span class="string">requests.cpu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_CPU_LIMIT</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">resourceFieldRef:</span></span><br><span class="line">    <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">resource:</span> <span class="string">limits.cpu</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_MEM_REQUEST</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">resourceFieldRef:</span></span><br><span class="line">    <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">resource:</span> <span class="string">requests.memory</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_MEM_LIMIT</span></span><br><span class="line">    <span class="attr">valueFrom:</span></span><br><span class="line">  <span class="attr">resourceFieldRef:</span></span><br><span class="line">    <span class="attr">containerName:</span> <span class="string">test-container</span></span><br><span class="line"><span class="attr">resource:</span> <span class="string">limits.memory</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><p>ImagePullPolicy策略，</p><ul><li>Always: 不管镜像是否存在都会进行一次拉取。</li><li>Never：不管镜像是否存在都不会进行拉取。</li><li>IfNotPresent: 镜像不存在时，才进行拉取。</li></ul><p>注意，</p><ul><li>默认为IfNotPresent，但<code>:latest</code>标签的镜像默认为<code>Always</code>。</li><li>拉取镜像时docker会进行MD5校验，如果镜像中的MD5没变，不会拉取镜像数据。</li><li>生产环境中应该尽量避免使用<code>:latest</code>标签，而开发环境可以借助<code>:latest</code>标签自动拉取最新的镜像。</li></ul><p>访问DNS策略，</p><p>通过设置dnsPolicy参数，设置Pod中容器访问DNS的策略</p><ul><li>ClusterFirst: 优先基于cluster domain后缀，通过kube-dns查询</li><li>Default：首先从kubelet中配置的DNS查询</li></ul><p>默认是ClusterFirst</p><p>通过hostIPC设置参数为Ture，使用主机的IPC明明空间，默认为False。</p><p>通过hostNetwork设置参数为True，使用主机的命名空间，默认为False。</p><p>通过hostPID设置参数为True，使用主机的PID命名空间，默认为False。</p><p>通过subdomain参数设置Pod的子域名，默认为空</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">busybox2</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">busybox-2</span></span><br><span class="line"><span class="attr">subdomain:</span> <span class="string">default-subdomain</span></span><br><span class="line"><span class="attr">containers:</span></span><br><span class="line"><span class="attr">- image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">sleep</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"3600"</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">busybox</span></span><br></pre></td></tr></table></figure><p>kubernetes通过cgroups限制容器的CPU和内存等计算资源，包括requests和limits等：</p><ul><li><code>spec.containers[].resources.limits.cpu</code>：CPU上限，可以短暂超过，容器也不会被停止</li><li><code>spec.containers[].resources.limits.memory</code>：内存上限，不可以超过；如果超过，容器可能会被停止或调度到其它资源充足的机器上</li><li><code>spec.containers[].resources.requests.cpu</code>：CPU请求，可以超过</li><li><code>spec.containers[].resources.requests.memory</code>：内存请求，可以超过；但如果超过，容器可能会在Node内存不足时清理</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiServersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">requests:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">"300m"</span></span><br><span class="line"><span class="attr">memory:</span> <span class="string">"56Mi"</span></span><br><span class="line">  <span class="attr">limits:</span></span><br><span class="line">    <span class="attr">cpu:</span> <span class="string">"500m"</span></span><br><span class="line"><span class="attr">memory:</span> <span class="string">"128Mi"</span></span><br></pre></td></tr></table></figure><p>为了保证容器在部署后确实处在正常运行状态，Kubernetes提供了两种探针(probe，支持exec、tcp和httpGet方式)来探测容器的状态：</p><ul><li>LivenessProbe：探测应用是否处于健康状态，如果不健康则删除重建容器</li><li>ReadinessProbe：探测应用是否启动完成并且处于正常服务状态，如果不正常则更新容器状态</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">readinessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/ping</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>initContainers在容器执行前运行，常用来初始化容器操作，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">init-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line"><span class="attr">  initContainers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">install</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busygox</span></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">wget</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"-O"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"/work-dir/index.html"</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">http://kubernetes.io</span></span><br><span class="line"><span class="attr">volumeMounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">workdir</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">"/work-dir"</span></span><br><span class="line"><span class="attr">  dnsPolicy:</span> <span class="string">Default</span></span><br><span class="line"><span class="attr">  volumes:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">workdir</span></span><br><span class="line"><span class="attr">    emptyDir:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>容器生命周期钩子(Container Lifecycle Hooks)监听容器生命周期的特定事件，并在事件发生时执行已注册的回调函数。支持两种钩子：</p><ul><li>postStart：容器启动后执行，注意由于一步执行，它无法保证一定在ENTRYPOINT之后运行。如果失败，容器会被杀死，并根据RestartPolicy决定是否重启</li><li>preStop：容器停止前执行，常用于资源清理。如果失败，容器同样也会被杀死</li></ul><p>钩子的回调函数支持两种方式：</p><ul><li>exec: 在容器内执行命令</li><li>httpGet：向指定URL发起GET请求</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">lifecycle-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">lifecycle-demo-container</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">lifecycle:</span></span><br><span class="line">  <span class="attr">postStart:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">["/bin/sh"</span> <span class="string">"-c"</span><span class="string">,</span> <span class="string">"echo Hello from the postStart handler &gt; /usr/share/message"</span><span class="string">]</span></span><br><span class="line">  <span class="attr">preStop:</span></span><br><span class="line">    <span class="attr">exec:</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">["/usr/sbin/nginx",</span> <span class="string">"-s"</span><span class="string">,</span> <span class="string">"quit"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>默认情况下，容器都是以非特权容器方式运行。比如，不能再容器中创建虚拟网卡、配置虚拟网络。</p><p>Kubernetes提供了修改Capabilities的机制，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hello-world</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">friendly-container</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"alpine:3.4"</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">["/bin/echo",</span> <span class="string">"hello"</span><span class="string">,</span> <span class="string">"world"</span><span class="string">]</span></span><br><span class="line"><span class="attr">securityContext:</span></span><br><span class="line">  <span class="attr">capabilities:</span></span><br><span class="line">    <span class="attr">add:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line"><span class="attr">drop:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">KILL</span></span><br></pre></td></tr></table></figure><p>可以通过给Pod增加 <code>kubernetes.io/ingressbandwidth</code> 和 <code>kubernetes.io/egress-bandwidth</code> 这两个annotation来限制Pod的网络带宽</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">qos</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">kubernetes.io/ingress-bandwidth:</span> <span class="number">3</span><span class="string">M</span></span><br><span class="line"><span class="string">kubernetes.io/egress-bandwidth:</span> <span class="number">4</span><span class="string">M</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">iperf3</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">networkstatic/iperf3</span></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">iperf3</span></span><br><span class="line"><span class="bullet">-</span> <span class="bullet">-s</span></span><br></pre></td></tr></table></figure><p>可以通过nodeSelector、nodeAffinity、podAffinity以及Taints和tolerations等来讲Pod调度到需要的Node上。</p><p>也可以通过设置nodeName参数，将Pod调度到制定node节点上。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">  spec:</span></span><br><span class="line"><span class="attr">    containers:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">  nodeSelector:</span></span><br><span class="line"><span class="attr">    disktype:</span> <span class="string">ssd</span></span><br></pre></td></tr></table></figure><p>默认情况下，容器的<code>/etc/hosts</code>时kubelet自动生成的，并且仅包含localhost和podName等。不建议直接修改<code>/etc/hosts</code>文件，因为在Pod启动或重启时会被覆盖。</p><p>默认的<code>/etc/hosts</code>文件格式如下，其中<code>nginx-4217019353-fb2c5</code>是podName：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> nginx-app-5dd4f9fd4d-nm4sx -- cat /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/cat-etc-hosts.png" alt="executor"></p><p>从v1.7开始，可以通过<code>pod.Spec.HostAliases</code>来增加hosts内容，如，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hostaliases-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hostAliases:</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"foo.local"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"bar.local"</span></span><br><span class="line"><span class="attr">  - ip:</span> <span class="string">"10.1.2.3"</span></span><br><span class="line"><span class="attr">    hostnames:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"foo.remote"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"bar.remote"</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">cat-hosts</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">command:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"><span class="attr">args:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"/etc/hosts"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs hostaliases-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubernetes-managed hosts file.</span></span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">fe00::0ip6-mcastprefix</span><br><span class="line">fe00::1ip6-allnodes</span><br><span class="line">fe00::2ip6-allrouters</span><br><span class="line">10.244.1.35hostaliases-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Entries added by HostAliases.</span></span><br><span class="line">127.0.0.1foo.localbar.local</span><br><span class="line">10.1.2.3foo.remotebar.remote</span><br></pre></td></tr></table></figure><h2><span id="namespace">Namespace</span></h2><p>Namespace是对一组资源和对象的抽象集合，比如可以用来将系统内部的对象划分为不同的项目组或用户组。常见的pods，services，replication controller和deployments等都是属于某一个namespace的(默认是default)，而node，persistentVolumes等则不属于任何namespace。</p><p>Namespace常用来隔离不同的用户，比如Kubernetes自带的服务一般运行在<code>kube-system namespace</code>中。</p><ol><li>查询</li></ol><p>名称空间的选项可以用<code>--namespace</code>或<code>-n</code>来指定，不指定默认就是<code>default</code>。也可以通过<code>--all-namespace=true</code>来查看所有namespace下的资源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespaces</span><br><span class="line">NAME          STATUS   AGE</span><br><span class="line">default       Active   32h</span><br><span class="line">kube-public   Active   32h</span><br><span class="line">kube-system   Active   32h</span><br></pre></td></tr></table></figure><p>注意：<code>kubectl get namespace</code>等效；namespace包含两种状态“Active”和“Terminating”。在namespace删除过程中，namespace状态被设置成“Terminating”。</p><ol start="2"><li>创建</li></ol><p>命令行直接创建，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace new-namespace</span><br></pre></td></tr></table></figure><p>通过文件创建，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">new-namespace</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ./my-namespace.yaml</span><br></pre></td></tr></table></figure><p>注意：namespace的name满足正则表达式<code>[a-z0-9]([-a-z0-9]*[a-z0-9])?</code>，最大长度为63位，</p><ol start="3"><li>删除</li></ol><ul><li>删除一个namespace会自动删除所有属于该namespace的资源</li><li><code>default</code>和<code>kube-system</code>名称空间不可删除</li><li>PersistentVolumes是不属于任何namespace的，但PersistentVolumeClaim是属于某个特定namespace的</li><li>Events是否属于namespace取决于产生events的对象</li></ul><h2><span id="node">Node</span></h2><p>Node是Pod真正运行的主机，可以是物理机，也可以是虚拟机。为了管理Pod，每个Node节点上至少运行container runtime(比如docker或rkt)、<code>kubelet</code>和<code>kube-proxy</code>服务。</p><p><img src="/img/kubernetes/module_03_nodes.svg" alt="nodes"></p><ol><li>Node管理</li></ol><p>不像其它的资源(如Pod和Namespace)，Node本质上不是Kubernetes来创建的，Kubernetes只是管理Node上的资源。虽然可以通过Manifest创建一个Node对象(如下json)，但Kubernetes也只是去检查是否真的是有这么一个Node，如果检查失败，也不会往上调度Pod。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"kind"</span>: <span class="string">"Node"</span>,</span><br><span class="line">  <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"10.240.79.157"</span>,</span><br><span class="line"><span class="attr">"labels"</span>: &#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-first-k8s-node"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个检查是由Node Controller来完成的。Node Controller负责</p><ul><li>维护Node状态</li><li>与Cloud Provider同步Node</li><li>给Node分配容器CIDR</li><li>删除带有<code>NoExecute</code> taint的Node上的Pods</li></ul><p>默认情况下，kubelet在启动时会向master注册自己，并创建Node资源。</p><ol start="2"><li>Node的状态</li></ol><p>每个Node都包括以下状态信息</p><ul><li>地址：包括hostname、外网IP和内网IP</li><li>条件(Condition)：包括OutOfDisk、Ready、MemoryPressure和DiskPressure</li><li>容量(Capacity)：Node上的可用资源，包括CPU、内存和Pod总数</li><li>基本信息(Info)：包括内核版本、容器引擎版本、OS类型等</li></ul><ol start="3"><li>Taints和tolerations</li></ol><p>Taints和tolerations用于保证Pod不被调度到不合适的Node上，Taint应用于Node上，而toleration则应用于Pod上(Toleration是可选的)。</p><p>比如，可以使用taint命令给node1添加taints：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes node1 key1=value1:NoSchedule</span><br><span class="line">kubectl taint nodes node2 key1=value2:NoExecutte</span><br></pre></td></tr></table></figure><ol start="4"><li>Node维护模式</li></ol><p>标识Node为不可调度，但不影响其上正在运行的Pod，这种维护Node时时非常有用的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cordon <span class="variable">$NODENAME</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes使用共享网络将多个物理机或虚拟机汇集到一个集群中，在各服务器之间进行通信，该集群时配置Kubernetes的所有组件、功能和工作负载的物理平台。集群中一台服务器(或高可用部署中的一组服务器)作为Master，负责管理整个集群，其余作为Worker Node，集群中的主机可以是物理服务器，也可以是虚拟机(包括云VPS)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes 简介以及安装安装高可用v1.13.1集群(一)</title>
    <link href="http://galudisu.info/2019/02/03/kubernetes/kubernetes-01-centos-installation/"/>
    <id>http://galudisu.info/2019/02/03/kubernetes/kubernetes-01-centos-installation/</id>
    <published>2019-02-03T07:34:35.000Z</published>
    <updated>2019-08-27T09:05:47.515Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/kubernetes/kubernetes-kubectl-cheatsheet.png" alt="kubectl-cheatsheet"></p><p>Kubernetes是谷歌开源的容器集群管理系统，是Google多年大规模容器管理技术Borg的开源版本，也是CNCF最重要的项目之一，主要功能包括：</p><ul><li>基于容器的应用部署、维护和滚动升级</li><li>负载均衡和服务发现</li><li>跨机器和跨地区的集群调度</li><li>自动伸缩</li><li>无状态服务和有状态服务</li><li>广泛的Volumn支持</li><li>插件机制保证扩展性</li></ul><a id="more"></a><h2><span id="kubernetes架构">Kubernetes架构</span></h2><p>Kubernetes主要由以下几个核心组件组成：</p><ul><li>etcd保存了整个集群的状态；</li><li>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制；</li><li>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等；</li><li>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上；</li><li>kubelet负责维护容器的生命周期，同时也负责Volume(CVI)和网络(CNI)的管理；</li><li>Container runtime负责镜像管理以及Pod和容器的真正运行(CRI)；</li><li>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡</li></ul><h2><span id="kubeadm-113-安装高可用-kubernetes-v1131-集群">Kubeadm 1.13 安装高可用 kubernetes v1.13.1 集群</span></h2><p><img src="/img/kubernetes/dashboard.png" alt="kubernetes-dashboard"></p><p>先上图给个肯定信心。</p><h2><span id="部署">部署</span></h2><p>以CentOS7为基础，搭建一个Master主机和三个Node主机，各个Node主机的配置方式基本相同。</p><ul><li>OS: CentOS 7.5 x86_64</li><li>Container runtime: Docker 18.06.ce</li><li>Kubernetes: 1.13</li></ul><table><thead><tr><th style="text-align:left">IP 地址</th><th style="text-align:left">主机名</th><th style="text-align:left">角色</th></tr></thead><tbody><tr><td style="text-align:left">192.168.50.71</td><td style="text-align:left">master, <a href="http://master.kubernetes.io" target="_blank" rel="noopener">master.kubernetes.io</a></td><td style="text-align:left">master</td></tr><tr><td style="text-align:left">192.168.50.72</td><td style="text-align:left">node01, <a href="http://node01.kubernetes.io" target="_blank" rel="noopener">node01.kubernetes.io</a></td><td style="text-align:left">node</td></tr><tr><td style="text-align:left">192.168.50.73</td><td style="text-align:left">node02, <a href="http://node02.kubernetes.io" target="_blank" rel="noopener">node02.kubernetes.io</a></td><td style="text-align:left">node</td></tr><tr><td style="text-align:left">192.168.50.74</td><td style="text-align:left">node03, <a href="http://node03.kubernetes.io" target="_blank" rel="noopener">node03.kubernetes.io</a></td><td style="text-align:left">node</td></tr></tbody></table><p>这里需要使用常规的域名格式，因为后面需要为集群配置Kubernetes Dashboard要求有SSL数字签名。</p><h2><span id="系统配置">系统配置</span></h2><p>配置host，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">192.168.50.71mastermaster.kubernetes.io</span><br><span class="line">192.168.50.72node1node01.kubernetes.io</span><br><span class="line">192.168.50.73node2node02.kubernetes.io</span><br><span class="line">192.168.50.74node3node03.kubernetes.io</span><br></pre></td></tr></table></figure><p>关闭防火墙，选择iptable加入端口或禁用防火墙服务两种方式。这里简单起见，禁用防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>禁用SELINUX，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo setenfore 0</span><br><span class="line">sudo vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><p>所有节点关闭交换分区，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br><span class="line">sudo vi /etc/fstab</span><br></pre></td></tr></table></figure><p>将交换区注释掉，使用<code>free -m</code>查看交换分区是否关闭。</p><p>创建<code>/etc/sysctl.d/k8s.conf</code>文件，添加如下内容，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-ip6tables=1</span><br><span class="line">net.bridge.bridge-nf-call-iptables=1</span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>执行命令使修改生效，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe br_netfilter</span><br><span class="line">sudo sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure><p>kube-proxy开启ipvs，Kubernetes 1.11之后的版本默认支持使用ipvs代理模式的Service资源，但它依赖ipvs相关的内核模块，这些模块默认不会自动载入。kube-proxy开启ipvs的前提需要加载以下模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><p>创建<code>/etc/sysconfig/modules/ipvs.modules</code>文件，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">ipvs_mods_dir=<span class="string">"/usr/lib/modules/<span class="variable">$(uname -r)</span>/kernel/net/netfilter/ipvs"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(ls <span class="variable">$ipvs_mods_dir</span> | grep -o <span class="string">"^[^.]*"</span>); <span class="keyword">do</span></span><br><span class="line">/sbin/modinfo -F filename <span class="variable">$i</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">/sbin/modprobe <span class="variable">$i</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>修改文件权限，并加载内核模块，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">sudo /etc/sysconfig/modules/ipvs.modules</span><br></pre></td></tr></table></figure><p>注意该步骤不是必须的，因为ipvs仅负责负载均衡相关任务，它无法完成kube-proxy中的包过滤机SNAT等功能，这些仍需要由iptables实现。也就是说，如果条件不满足，即使kube-proxy开启了ipvs模式，也会回退到iptables模式。</p><h2><span id="安装docker">安装Docker</span></h2><p>Docker的安装可以参考阿里云的docker-ce的安装方法，目前Kubernetes推荐的最新支持的docker版本为18.06，注意不要使用不兼容的版本。</p><p>如果你有阿里云账号，可以参考<a href="https://cr.console.aliyun.com/cn-hangzhou/mirrors" target="_blank" rel="noopener">镜像加速器</a>方法。</p><p>另外，如果想通过外网访问Docker，可以在Systemd加入启动参数配置sock进行访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">...</span><br><span class="line">ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure><p>其它细节可以参考阿里docker相关文档。</p><h2><span id="配置外网访问ss">配置外网访问SS</span></h2><p>首先，你得先有一个SS，<a href="http://xn--k8s-628d2hjq96ozubb9tvvf3u9geh9blx1ac9a.gcr.io" target="_blank" rel="noopener">因为大陆内目前访问不了k8s.gcr.io</a>。虽然有人做了镜像同步，对同步的镜像进行retag也是可行的方式，但我有SS！！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install python-pip epel-release -y</span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line">cat &gt; /etc/shadowsocks.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"xx.xx.xx.xx"</span>,</span><br><span class="line"><span class="string">"server_port"</span>: 443,</span><br><span class="line"><span class="string">"local_port"</span>: 1080,</span><br><span class="line"><span class="string">"password"</span>:<span class="string">"xxx"</span>,</span><br><span class="line"><span class="string">"timeout"</span>:600,</span><br><span class="line"><span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo sslocal -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>SS主要是配给Docker用的，编辑<code>/lib/systemd/system/docker.service</code>文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Environment=<span class="string">"HTTP_PROXY=socks5://127.0.0.1:1080/"</span></span><br><span class="line">Environment=<span class="string">"HTTPS_PROXY=socks5://127.0.0.1:1080/"</span></span><br><span class="line">Environment=<span class="string">"NO_PROXY=localhost,127.0.0.0/8,guqcep47.mirror.aliyuncs.com"</span></span><br></pre></td></tr></table></figure><h2><span id="kubeletkubeadmkubectl安装">kubelet，kubeadm，kubectl安装</span></h2><p>首先要设定组件的仓储，编辑<code>/etc/yum.repos.d/kubernetes.repo</code>，内容如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><p>执行如下命令安装程序包，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>kubernetes自1.8版本开始，强制要求关闭系统swap，编辑kubelet配置文件<code>/etc/sysconfig/kubelet</code>，忽略禁止使用Swap限制，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--fail-swap-on=false"</span></span><br></pre></td></tr></table></figure><p>加入启动服务，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start kubelet</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h2><span id="集群初始化">集群初始化</span></h2><p>集群初始化动作需要在Master进行，然后在其它Node节点使用<code>join</code>加入，所以这里的命令行需要在各个主机单独敲命令了。</p><p>有两种初始化方式，一种是命令带参数方式；另一种是使用配置文件，两种方式是等效的，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --kubernetes-version=v1.13.2 --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure><p>简单说一下这几个重要的参数，</p><ul><li><code>--kubernetes-version</code>：Kubernete的版本</li><li><code>--pod-network-cidr</code>：Pod网络地址范围，其值为CIDR格式的网络地址；使用flannel网络插件是，默认地址为10.244.0.0/16。</li><li><code>--service-cidr</code>：Service的网络地址范围，其值为CIDR格式的网络地址，默认地址为10.96.0.0/12。</li><li><code>--apiserver-advertise-address</code>：API server通告给其他组件的IP地址，一般应该为Master节点的IP地址，0.0.0.0表示节点上的所有可用地址。</li><li><code>--ignore-preflight-errors</code>：忽略哪些运行时的错误信息，其值为Swap时，表示忽略因swap未关闭而导致的错误。</li></ul><p>一般情况下，都是使用配置文件的方式，可以通过下面的命令查看一份完整的kubeadm配置示例，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm config <span class="built_in">print</span> init-defaults --component-configs KubeProxyConfiguration</span><br></pre></td></tr></table></figure><p>存储输出的内容为<code>kubeadm-config.yaml</code>，根据自己需求修改，执行命令初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --config kubeadm-config.yaml --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure><p>初始化如果成功，会打印两个重要信息，一是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOEM</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p>照着写便是，默认情况下kubectl会从当前用户主目录的.kube下的config读取配置信息，包括Kubernetes集群、证书或令牌等。集群初始化时，kubeadm会自动生成一个用于此类功能的配置文件<code>/etc/kubernetes/admin.conf</code>，将它复制为<code>$HOME/.kube/config</code>文件即可直接使用。</p><p>kubectl有非常多的子命令，其中“<code>get compontsstatuses</code>”可显示集群组件当前的状态，简写为<code>get cs</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get cs</span><br><span class="line"></span><br><span class="line">NAME                 STATUS    MESSAGE              ERROR</span><br><span class="line">controller-manager   Healthy   ok                   </span><br><span class="line">scheduler            Healthy   ok                   </span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">"health"</span>: <span class="string">"true"</span>&#125;</span><br></pre></td></tr></table></figure><p>若命令结果的STATUS字段为“Healthy”，表示组件处于健康运行状态，否则需要检查其错误所在，必要时使用“kubeadm reset”命令重置重新进行初始化。</p><p>另外使用<code>kubectl get nodes</code>，获取集群节点的相关状态信息，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                STATUS   ROLES    AGE    VERSION</span><br><span class="line">kubernetes-master   NotReady master   7d5h   v1.13.2</span><br></pre></td></tr></table></figure><p>为Kubernetes提供的Pod网络插件非常多，目前流行的有flannel和Calico。flannel运行为Kubernetes集群的附件，它以Pod的形式部署运行与每个集群节点上以接受Kubernetes集群管理。事实上，flannel也可以以守护进程方式运行在各个节点，即以非托管的方式运行。部署命令使<code>kubectl apply</code>或<code>kubectl crreate</code>，下面是使用在线的方式进行flannel部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>部署成功会出现created字样，配置flannel网络插件时，Master节点上的Docker首先会去获取flannel镜像文件，而后根据镜像文件启动相应的Pod对象。现在再次查看Master已经变为“Ready”状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                STATUS   ROLES    AGE    VERSION</span><br><span class="line">kubernetes-master   Ready    master   7d5h   v1.13.2</span><br></pre></td></tr></table></figure><p>可通过，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system | grep flannel</span><br></pre></td></tr></table></figure><p>显示网络插件flannel的Pod状态情况。</p><p>集群初始化时，另一个信息是产生一段token信息，这段信息用于Node节点加入Master。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm join kubernetes-master:6443 --token 0qpyy8.iv5v2uhhrjy3wsri --discovery-token-ca-cert-hash sha256:c8ad1e333b6e2e1185ea2ab7beb97b90022f8285e79a1cc6a7e71ad772748f42 --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure><p>每个节点加入到Master之后，再次通过<code>kubectl get nodes</code>查看节点信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME                STATUS   ROLES    AGE    VERSION</span><br><span class="line">kubernetes-master   Ready    master   7d5h   v1.13.2</span><br><span class="line">kubernetes-node1    Ready    &lt;none&gt;   7d4h   v1.13.2</span><br><span class="line">kubernetes-node2    Ready    &lt;none&gt;   7d4h   v1.13.2</span><br><span class="line">kubernetes-node3    Ready    &lt;none&gt;   7d4h   v1.13.2</span><br></pre></td></tr></table></figure><p>至此，Kubernetes集群的部署已经完成，后续有更多节点加入时，均可使用此方式。</p><p>Kubernetes的命令非常多，在文章最前面的大图已经描述清楚。由于这里仅介绍集群安装内容，下面简单了解下关于集群方面的命令，</p><p>获取集群信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line">Kubernetes master is running at https://192.168.50.71:6443</span><br><span class="line">KubeDNS is running at https://192.168.50.71:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><p>版本信息，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl version --short=<span class="literal">true</span></span><br><span class="line">Client Version: v1.13.2</span><br><span class="line">Server Version: v1.13.2</span><br></pre></td></tr></table></figure><p>移除节点，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain NODE_ID --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node NODE_ID</span><br></pre></td></tr></table></figure><p>重置节点，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><h2><span id="部署高可用coredns">部署高可用CoreDNS</span></h2><p>默认安装的CoreDNS存在单点问题。在Master节点查看<code>kubectl get pods -n kube-system -owide</code>分布如下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system -owide </span><br><span class="line">NAME                                           READY   STATUS              RESTARTS   AGE   IP              NODE                   NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-86c58d9df4-6j2m6                       0/1     ContainerCreating   0          90m   &lt;none&gt;          master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-86c58d9df4-glvnp                       0/1     ContainerCreating   0          90m   &lt;none&gt;          master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-master.kubernetes.io                      1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-master.kubernetes.io            1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-master.kubernetes.io   1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-czh7z                    1/1     Running             0          80m   192.168.50.73   node02.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-gcqkk                    1/1     Running             0          80m   192.168.50.74   node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-lk5dw                    1/1     Running             0          81m   192.168.50.72   node01.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-flannel-ds-amd64-xp5xf                    0/1     PodInitializing     0          83m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-b82sn                               1/1     Running             0          80m   192.168.50.73   node02.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-ql6hp                               1/1     Running             0          81m   192.168.50.72   node01.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-sh87s                               1/1     Running             0          80m   192.168.50.74   node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-proxy-w2kv4                               0/1     ContainerCreating   0          90m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-scheduler-master.kubernetes.io            1/1     Running             2          89m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>删除原来的单点CoreDNS，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deploy coredns -n kube-system</span><br></pre></td></tr></table></figure><p>创建一份多实例配置coredns-ha.yaml，内容如下，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment">#集群规模可自行配置</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      k8s-app:</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">  strategy:</span></span><br><span class="line"><span class="attr">    rollingUpdate:</span></span><br><span class="line"><span class="attr">      maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line"><span class="attr">      maxUnavailable:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        k8s-app:</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      affinity:</span></span><br><span class="line"><span class="attr">        podAntiAffinity:</span></span><br><span class="line"><span class="attr">          preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"><span class="attr">          - weight:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">            podAffinityTerm:</span></span><br><span class="line"><span class="attr">              labelSelector:</span></span><br><span class="line"><span class="attr">                matchExpressions:</span></span><br><span class="line"><span class="attr">                - key:</span> <span class="string">k8s-app</span></span><br><span class="line"><span class="attr">                  operator:</span> <span class="string">In</span></span><br><span class="line"><span class="attr">                  values:</span></span><br><span class="line"><span class="bullet">                  -</span> <span class="string">kube-dns</span></span><br><span class="line"><span class="attr">              topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-conf</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/coredns/Corefile</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.6</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        livenessProbe:</span></span><br><span class="line"><span class="attr">          failureThreshold:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">          httpGet:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/health</span></span><br><span class="line"><span class="attr">            port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">            scheme:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">          initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line"><span class="attr">          periodSeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">          successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">          timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">53</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">dns</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">UDP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">53</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">dns-tcp</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">9153</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">metrics</span></span><br><span class="line"><span class="attr">          protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">170</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="number">70</span><span class="string">Mi</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">          capabilities:</span></span><br><span class="line"><span class="attr">            add:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line"><span class="attr">            drop:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">all</span></span><br><span class="line"><span class="attr">          readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line"><span class="attr">        terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/etc/coredns</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">config-volume</span></span><br><span class="line"><span class="attr">          readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      dnsPolicy:</span> <span class="string">Default</span></span><br><span class="line"><span class="attr">      restartPolicy:</span> <span class="string">Always</span></span><br><span class="line"><span class="attr">      schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line"><span class="attr">      securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">      serviceAccount:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - key:</span> <span class="string">CriticalAddonsOnly</span></span><br><span class="line"><span class="attr">        operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">      - effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">        key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - configMap:</span></span><br><span class="line"><span class="attr">          defaultMode:</span> <span class="number">420</span></span><br><span class="line"><span class="attr">          items:</span></span><br><span class="line"><span class="attr">          - key:</span> <span class="string">Corefile</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">Corefile</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">coredns</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">config-volume</span></span><br></pre></td></tr></table></figure><p>执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f coredns-ha.yaml</span><br></pre></td></tr></table></figure><p>再次查看分布，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system -owide</span><br><span class="line">NAME                                           READY   STATUS    RESTARTS   AGE    IP              NODE                   NOMINATED NODE   READINESS GATES</span><br><span class="line">coredns-6c67f849c7-jhqhj                       1/1     Running   0          3m6s   10.244.1.3      node01.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">coredns-6c67f849c7-kxtkw                       1/1     Running   0          3m6s   10.244.3.4      node03.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">etcd-master.kubernetes.io                      1/1     Running   2          102m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-apiserver-master.kubernetes.io            1/1     Running   2          102m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-controller-manager-master.kubernetes.io   1/1     Running   2          102m   192.168.50.71   master.kubernetes.io   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p>CoreDNS的Pod落在节点node1和node3上了。</p><h2><span id="安装dashboard">安装dashboard</span></h2><p>Kubernetes dashboard的安装也是在pod上的，所以要在所有节点执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span><br></pre></td></tr></table></figure><p>下载官方推荐的部署文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>因为前面我已经将镜像拉取下来了，所以不必要再拉取，修改这个<code>kubernetes-dashboard.yaml</code>文件，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">  - image:</span> <span class="string">k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1</span></span><br><span class="line"><span class="attr">    imagePullPolicy:</span> <span class="string">Never</span></span><br><span class="line"><span class="string">name</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">  dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line"><span class="attr">  restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>另外，需要暴露端口以给集群外部访问，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ------------------- Dashboard Service ------------------- #</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">31234</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><p>OK，执行命令部署pod，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>查看一下dashboard的pod是否正常启动，如果正常，说明安装成功，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system -owide</span><br></pre></td></tr></table></figure><p><img src="/img/kubernetes/kube-system.png" alt="kube-system"></p><p>查看外网暴露的端口，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services -n kube-system                                                                        </span><br><span class="line">NAME                   TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">kube-dns               ClusterIP   10.96.0.10     &lt;none&gt;        53/UDP,53/TCP   7d5h</span><br><span class="line">kubernetes-dashboard   NodePort    10.104.42.80   &lt;none&gt;        443:31234/TCP   138m</span><br></pre></td></tr></table></figure><p>默认情况下，kubeadm创建集群时已经创建了admin角色，我们直接绑定即可，</p><p>创建一个<code>admin-user-role-binding.yaml</code>文件，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">kubernetes.io/cluster-service:</span> <span class="string">"true"</span></span><br><span class="line">    <span class="string">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br></pre></td></tr></table></figure><p>执行，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f admin-user-role-binding.yaml</span><br></pre></td></tr></table></figure><p>获取token，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><p>把Token复制的登录界面，即可。</p><p>这里登录时有个问题，就是HTTPS访问没有证书，chrome直接不让访问！Firefox还好可以绕过。所以需要自己加一个证书，</p><p>首先生成私钥和证书签名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'client-key-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; dashboard.key</span><br><span class="line">grep <span class="string">'client-certificate-data'</span> ~/.kube/config | head -n 1 | awk <span class="string">'&#123;print $2&#125;'</span> | base64 -d &gt;&gt; dashboard.crt</span><br></pre></td></tr></table></figure><p>生成证书，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -<span class="built_in">export</span> -clcerts -inkey dashboard.key -<span class="keyword">in</span> dashboard.crt -out dashboard.p12 -name <span class="string">"kubernetes-client"</span></span><br></pre></td></tr></table></figure><p>将生成的<code>dashboard.key</code>和<code>dashboard.crt</code>放置在路径<code>/certs</code>下， 重新配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br><span class="line">kubectl create -f admin-user-role-binding.yaml</span><br></pre></td></tr></table></figure><p>虽然添加了证书，但也仅能通过firefox添加例外访问，chrome根本不信任你。所以生产环境上还是要买一个SSL证书，另外Pod内的service最好也不要直接暴露给外网访问，一般用nginx-ingress做个代理。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">你可能需要安装额外的工具用于Kubernetes管理，参考<a href="https://www.digitalocean.com/community/tutorials/how-to-install-software-on-kubernetes-clusters-with-the-helm-package-manager" target="_blank" rel="noopener">这里</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/kubernetes/kubernetes-kubectl-cheatsheet.png&quot; alt=&quot;kubectl-cheatsheet&quot;&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes是谷歌开源的容器集群管理系统，是Google多年大规模容器管理技术Borg的开源版本，也是CNCF最重要的项目之一，主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于容器的应用部署、维护和滚动升级&lt;/li&gt;
&lt;li&gt;负载均衡和服务发现&lt;/li&gt;
&lt;li&gt;跨机器和跨地区的集群调度&lt;/li&gt;
&lt;li&gt;自动伸缩&lt;/li&gt;
&lt;li&gt;无状态服务和有状态服务&lt;/li&gt;
&lt;li&gt;广泛的Volumn支持&lt;/li&gt;
&lt;li&gt;插件机制保证扩展性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://galudisu.info/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装、配置、使用PostgreSQL及PostGIS</title>
    <link href="http://galudisu.info/2019/01/24/postgresql/postgresql-relational-databases-on-centos-7/"/>
    <id>http://galudisu.info/2019/01/24/postgresql/postgresql-relational-databases-on-centos-7/</id>
    <published>2019-01-24T08:16:55.000Z</published>
    <updated>2019-08-27T09:05:47.583Z</updated>
    
    <content type="html"><![CDATA[<p>实际开发过程有两种安装方式，一种是编译安装；一种是包安装方式。编译安装需要cmake，gcc以及编译所需要的各种devel，这里仅介绍包安装方式。</p><a id="more"></a><h2><span id="从centos仓储安装">从CentOS仓储安装</span></h2><p>CentOS 7仓储装载有PostgreSQL版本<code>9.2.15</code>，你可以直接通过仓储安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install postgresql-server postgresql-contrib</span><br></pre></td></tr></table></figure><p>初始化数据库，启动PostgreSQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo postgresql-setup initdb</span><br><span class="line">sudo systemctl start postgresql</span><br></pre></td></tr></table></figure><p>将PostgreSQL加入Systemd中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql</span><br></pre></td></tr></table></figure><h2><span id="指定仓库的版本">指定仓库的版本</span></h2><p>作为替代，你可以从Postgres仓储安装最新版本，目前CentOS7可用的最高PostgresSQL版本是<code>9.6.3</code>，但需要提供RPM-based的安装方式。</p><blockquote><p>注意：Postgres指定版本后，版本信息会包含在配置目录中。例如<code>/var/lib/pgsql</code>会变成<code>/var/lib/pgsql/9.6</code>。这对于system units也一样，<code>systemctl status postgresql</code>会变成<code>systemctl status postgresql-9.6</code>。</p></blockquote><p>首先需要从Postgres的<a href="https://yum.postgresql.org/repopackages.php" target="_blank" rel="noopener">仓储</a>选择希望安装的版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装RPM，以及<a href="https://fedoraproject.org/wiki/EPEL" target="_blank" rel="noopener">EPEL</a>仓储，用于依赖构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install pgdg-centos96-9.6-3.noarch.rpm epel-release</span><br></pre></td></tr></table></figure><p>安装前需要update一下，不然会有conflict：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install postgresql96-server postgresql96-contrib</span><br></pre></td></tr></table></figure><p>初始化数据库，启动PostgreSQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/pgsql-9.6/bin/postgresql96-setup initdb</span><br><span class="line">sudo systemctl start postgresql-9.6</span><br></pre></td></tr></table></figure><p>加入boot自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> postgresql-9.6</span><br></pre></td></tr></table></figure><h2><span id="配置用户信息-数据库">配置用户信息、数据库</span></h2><p>默认地，PostgreSQL为Linux创建了一个无home目录的用户<code>postgres</code>，用于访问数据库软件目录。</p><blockquote><p>小心：<br>这个<code>postgres</code>用户不应该用于其它目的(例如，连接其它网络)。这样会给数据库安全带来风险。</p></blockquote><ol><li>更改<code>postgres</code>密码：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd postgres</span><br></pre></td></tr></table></figure><p>下面方式是更改<code>postgres</code>数据库用户密码。确保使用的<code>newpassword</code>是强类型密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">psql -d template1 -c <span class="string">"ALTER USER postgres WITH PASSWORD 'newpassword';"</span></span><br></pre></td></tr></table></figure><p>注意这里的<code>postgres</code>用户不同于Linux的那个<code>postgres</code>用户。Linux的<code>postgres</code>是用于访问数据库，这个PostgreSQL用户是负责该数据库的管理任务处理。</p><p>上面设置的密码被用于通过网络访问数据库。本机方式使用的<code>peer</code>授权。本章最后介绍如何实现远程访问。</p><h2><span id="postgresql-shell">PostgreSQL Shell</span></h2><p>PostgreSQL client shell允许你在数据库处理SQL命令。首先登录<code>postgres</code>用户，进入shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql postgres</span><br></pre></td></tr></table></figure><p>首先会登录<code>postgres</code>数据库，prompt信息类似于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psql (9.2.15)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>最后一行，<code>postgres=#</code>标示了当前数据库的名称。要查看可用命令，输入<code>\h</code>。退出当前shell，输入<code>\q</code>。</p><h2><span id="数据库工作">数据库工作</span></h2><p>首先，你可以使用<code>createdb</code>命令创建数据库。例如以<code>postgres</code>用户身份创建一个<code>mytestdb</code>数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb mytestdb</span><br></pre></td></tr></table></figure><p>也可以为该数据库指派角色关系。例如，指派一个<code>examplerole</code>角色：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createdb mytestdb -O examplerole</span><br></pre></td></tr></table></figure><p><code>createdb</code>命令有几个操作选项，你可以在<a href="https://www.postgresql.org/docs/9.2/static/app-createdb.html" target="_blank" rel="noopener">PostgreSQL documentation</a>查看更多细节。</p><p>连接数据库，可以使用<code>psql</code>命令指定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql mytestdb</span><br></pre></td></tr></table></figure><p>出现下面prompt说明连接成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">psql (9.2.15)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">mytestdb=<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>默认地，数据库的连接是作为<a href="https://www.linode.com/docs/databases/postgresql/how-to-install-postgresql-relational-databases-on-centos-7/#peer-authentication" target="_blank" rel="noopener">peer-authenticated</a>用户的方式。当然，你也可以指定本地用户的方式访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql mytestdb -U examplerole</span><br></pre></td></tr></table></figure><p>要查看所有的数据库，使用<code>\l</code>或<code>\list</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \l</span></span><br><span class="line">                          List of databases</span><br><span class="line">Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges</span><br><span class="line">-----------+----------+----------+-------------+-------------+-----------------------</span><br><span class="line">mytestdb  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |</span><br><span class="line">postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |</span><br><span class="line">template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">|         |          |          |             | postgres=CTc/postgres</span><br><span class="line">template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">|         |          |          |             | postgres=CTc/postgres</span><br><span class="line">(4 rows)</span><br></pre></td></tr></table></figure><p>通过<code>\c</code>命令可以展示当前数据库和当前用户信息。要展示其它额外信息，可以使用<code>\conninfo</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are connected to database <span class="string">"mytestdb"</span> as user <span class="string">"postgres"</span> via socket <span class="keyword">in</span> <span class="string">"/var/run/postgresql"</span> at port <span class="string">"5432"</span>.</span><br></pre></td></tr></table></figure><p>数据数据库用<code>dropdb</code>命令，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropdb mytestdb</span><br></pre></td></tr></table></figure><p>注意，删除的数据库不能恢复。</p><h2><span id="表">表</span></h2><p>创建一个<code>employees</code>的表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE employees (employee_id int, first_name varchar, last_name varchar);</span><br></pre></td></tr></table></figure><p>插入一条记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employees VALUES (1, <span class="string">'John'</span>, <span class="string">'Doe'</span>);</span><br></pre></td></tr></table></figure><p>查看表内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><p>输出内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">employee_id | first_name | last_name</span><br><span class="line">-------------+------------+-----------</span><br><span class="line">          1 | John       | Doe</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>列举当前数据库的所有表信息，可以通过<code>\dt</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mytestdb-<span class="comment"># \dt</span></span><br><span class="line">          List of relations</span><br><span class="line">Schema |   Name    | Type  |  Owner</span><br><span class="line">--------+-----------+-------+----------</span><br><span class="line">public | employees | table | postgres</span><br></pre></td></tr></table></figure><p>删除表通过<code>DROP TABLE</code>命令，例如删除<code>employees</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE employees;</span><br></pre></td></tr></table></figure><p>可以通过逗号分隔方式删除多个表，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE employees1, employees2;</span><br></pre></td></tr></table></figure><p>更改和添加表column，和标准SQL一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employees ADD start_date date;</span><br></pre></td></tr></table></figure><p>验证先前的更改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><p>你会看到新增的列不包含任何内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">employee_id | first_name | last_name | start_date</span><br><span class="line">-------------+------------+-----------+------------</span><br><span class="line">          1 | John       | Doe       |</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>PostgreSQL支持好几种数据库类型，可以在<a href="https://www.postgresql.org/docs/9.2/static/datatype.html" target="_blank" rel="noopener">这里</a>查看相关信息。</p><p>你可以使用<code>UPDATE</code>更改记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employees SET start_date = <span class="string">'2016-09-28'</span> WHERE employee_id = <span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><p>或插入一条新的记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employees VALUES (2, <span class="string">'Jane'</span>, <span class="string">'Smith'</span>, <span class="string">'2015-03-09'</span>);</span><br></pre></td></tr></table></figure><p>验证一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">employee_id | first_name | last_name | start_date</span><br><span class="line">-------------+------------+-----------+------------</span><br><span class="line">          1 | John       | Doe       | 2016-09-28</span><br><span class="line">          2 | Jane       | Smith     | 2015-03-09</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure><p>要删除行和列，例如删除<code>start_date</code>字段，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employees DROP start_date;</span><br></pre></td></tr></table></figure><p>删除记录使用<code>DELETE</code>，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM employees WHERE employee_id = <span class="string">'2'</span>;</span><br></pre></td></tr></table></figure><p>验证一下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees;</span><br><span class="line"></span><br><span class="line">employee_id | first_name | last_name</span><br><span class="line">-------------+------------+-----------</span><br><span class="line">          1 | John       | Doe</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>查询数据库和标准SQL一样，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id FROM employees;</span><br><span class="line"></span><br><span class="line">last_name | employee_id</span><br><span class="line">-----------+-------------</span><br><span class="line">Doe       |           1</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>更多查询选项，可以点击<a href="https://www.postgresql.org/docs/9.2/static/sql-select.html" target="_blank" rel="noopener">这里</a></p><h2><span id="角色">角色</span></h2><p>PostgreSQL通过<strong>roles</strong>授权数据库访问，表示某种权限。另外，角色可以由其它一系列角色创建，类似于“group”。PostgreSQL的角色是全局的，所以你不需要为同一个角色创建两次以访问不同数据库。</p><p>创建角色通过<code>createuser</code>命令，例如创建一个<code>examplerole</code>的角色，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createuser examplerole --pwprompt</span><br></pre></td></tr></table></figure><p>授权角色访问，默认以<code>postgres</code>数据连接，再进行授权，这里的<code>postgres</code>相当于一个<code>sa</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL ON employees TO examplerole;</span><br></pre></td></tr></table></figure><p>罗列所有用户角色，可以通过<code>\du</code>命令查看，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \du</span></span><br><span class="line">                             List of roles</span><br><span class="line">Role name   |                   Attributes                   | Member of</span><br><span class="line">-------------+------------------------------------------------+-----------</span><br><span class="line">examplerole |                                                | &#123;&#125;</span><br><span class="line">postgres    | Superuser, Create role, Create DB, Replication | &#123;&#125;</span><br></pre></td></tr></table></figure><p>为了便于管理，可以将多个角色添加到一个组，这样可以全局管理它们的权限。下面展示如何实现，所有这些命令应该在<code>postgres</code>用户下进行。</p><p>使用<code>createuser</code>创建一个组角色。其中<code>--no-login</code>选项指定了该组不需要登录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createuser examplegroup --no-login</span><br></pre></td></tr></table></figure><p>登录并添加角色到组中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">psql postgres</span><br><span class="line">GRANT examplegroup TO examplerole;</span><br></pre></td></tr></table></figure><p>验证一下，使用<code>\du</code>命令，可以看到<code>examplerole</code>用户现在在<code>examplegroup</code>组中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \du</span><br><span class="line">                                List of roles</span><br><span class="line">Role name    |                   Attributes                   |   Member of</span><br><span class="line">--------------+------------------------------------------------+----------------</span><br><span class="line">examplegroup | Cannot login                                   | &#123;&#125;</span><br><span class="line">examplerole  |                                                | &#123;examplegroup&#125;</span><br><span class="line">group        |                                                | &#123;&#125;</span><br><span class="line">postgres     | Superuser, Create role, Create DB, Replication | &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>createuser</code>命令有几个选项。点击<a href="https://www.postgresql.org/docs/9.2/static/app-createuser.html" target="_blank" rel="noopener">这里</a>查看相关信息。</p><p>要更改角色属性，有几个选项，例如，授予<code>examplerole</code>属性<code>CREATEDB</code>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER ROLE examplerole CREATEDB;</span><br></pre></td></tr></table></figure><p>使用<code>\du</code>验证一下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \du</span><br><span class="line">                             List of roles</span><br><span class="line">Role name   |                   Attributes                   | Member of</span><br><span class="line">-------------+------------------------------------------------+-----------</span><br><span class="line">examplerole | Create DB                                      | &#123;&#125;</span><br><span class="line">group       |                                                | &#123;&#125;</span><br><span class="line">postgres    | Superuser, Create role, Create DB, Replication | &#123;&#125;</span><br></pre></td></tr></table></figure><p>删除角色，使用<code>dropuser</code>命令，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropuser examplerole</span><br></pre></td></tr></table></figure><h2><span id="peer-authentication">Peer Authentication</span></h2><p>PostgreSQL默认使用对等授权(peer authentication)的方式进行连接。意味着，如何当前授权的本地系统用户和PostgreSQL角色用户名匹配，则授予连接。所以你需要同时创建一个相同的Linux用户和一个对应的PostgreSQL角色。例如，刚刚创建了<code>examplerole</code>角色，Linux中需要创建一个<code>examplerole</code>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser examplerole &amp;&amp; passwd examplerole</span><br></pre></td></tr></table></figure><h2><span id="secure-postgresql">Secure PostgreSQL</span></h2><p>PostgreSQL默认使用的peer authentication方式，限制了仅能通过本地访问，它的配置信息在<code>/var/lib/pgsql/dta/pg_hba.conf</code>中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local    all        all             peer</span><br></pre></td></tr></table></figure><p>将<code>peer</code>替换为<code>md5</code>，以允许通过MD5哈希密码方式访问。</p><p>也可以指定信任任何服务器的连接，修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># IPv4 local connections:</span><br><span class="line">host    all            all      127.0.0.1/32      trust</span><br><span class="line">host    all            all      0.0.0.0/0    trust</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host    all            all      ::/0         trust</span><br></pre></td></tr></table></figure><p>退出，重启服务，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart postgresql</span><br><span class="line">su - postgres</span><br></pre></td></tr></table></figure><p>再次登录，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql mytestdb -U examplerole</span><br></pre></td></tr></table></figure><p>它会提示你输入密码，用于登录<code>examplerole</code>角色以访问数据库。你可以通过<code>\z</code>命令访问表权限。</p><p>另外，要实现远程访问，还需要修改<code>/var/lib/pgsql/data/postgresql.conf</code>配置，去掉前面注释，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses=<span class="string">'*'</span></span><br></pre></td></tr></table></figure><p>某些情况下，还需要关闭系统防火墙，或直接添加到iptalbe，</p><p>CentOS 防火墙中内置了PostgreSQL服务，配置文件位置在/usr/lib/firewalld/services/postgresql.xml，我们只需以服务方式将PostgreSQL服务开放即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=postgresql --permanent  开放postgresql服务</span><br><span class="line">firewall-cmd --reload  重载防火墙</span><br></pre></td></tr></table></figure><p>或干脆关闭防火墙，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop firewalld</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><p>重启postgresql即可。</p><h2><span id="安装postgis">安装PostGIS</span></h2><p>PostGIS可以由CentOS仓储安装，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install postgis.x86_64 postgis-client.x86_64 postgis-debuginfo.x86_64 postgis-devel.x86_64 postgis-docs.x86_64 postgis-utils.x86_64</span><br></pre></td></tr></table></figure><p>查看PostGI相关文件是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/pgsql/share/extension</span><br><span class="line">ls /usr/pgsql/share/contrib/postgis</span><br></pre></td></tr></table></figure><p>加载PostGIS插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">psql -d postgres -U postgres</span><br></pre></td></tr></table></figure><p>在PostgreSQL Shell中，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># create database postgis ;</span></span><br><span class="line">postgres=<span class="comment"># \c postgis</span></span><br><span class="line">postgis=<span class="comment"># select * from pg_extension ;</span></span><br><span class="line">postgis=<span class="comment"># create extension postgis ;</span></span><br><span class="line">postgis=<span class="comment"># \dt</span></span><br><span class="line"></span><br><span class="line">postgis=<span class="comment"># select count(*) from spatial_ref_sys ;</span></span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \dn</span></span><br><span class="line"></span><br><span class="line">postgis=<span class="comment"># create extension postgis_topology ;</span></span><br><span class="line">CREATE EXTENSION</span><br><span class="line">postgis=<span class="comment"># \dn</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实际开发过程有两种安装方式，一种是编译安装；一种是包安装方式。编译安装需要cmake，gcc以及编译所需要的各种devel，这里仅介绍包安装方式。&lt;/p&gt;
    
    </summary>
    
      <category term="sql" scheme="http://galudisu.info/categories/sql/"/>
    
    
      <category term="postgreSQL" scheme="http://galudisu.info/tags/postgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>使用storybook开发自己的React组件库</title>
    <link href="http://galudisu.info/2019/01/16/react/react-storybook-live-editing/"/>
    <id>http://galudisu.info/2019/01/16/react/react-storybook-live-editing/</id>
    <published>2019-01-16T15:14:34.000Z</published>
    <updated>2019-08-27T09:05:47.590Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/cartoon/20190116_225744.925.jpg" alt="ohanahibi"><br>有时候并不希望使用第三方组件库，以及大部分时候需要自己定制一套组件实现，以供公司或项目内部使用。开发自己的组件有如重复造轮子，会花费相当多的精力制造。如果是为了一种长远公司发展，这份努力是值得的，如果不想自己耗费精力，也有许多开源的组件实现，比如<a href="https://material-ui.com/" target="_blank" rel="noopener">material-ui</a>。一般都是拿来改造一下，可以避免很多开发或兼容性上的坑。</p><a id="more"></a><h2><span id="architecture">Architecture</span></h2><p>编写这篇文章时，笔者用的都是最新的包以及依赖，坑比较多，比如<a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack4</a>，改掉以及删除很多功能；又如<a href="https://babeljs.io/docs/en/v7-migration" target="_blank" rel="noopener">babel7</a>弃用了旧的写法，全部带上了<code>scoped packages</code>，即在presets前面带上模块标志：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">"@babel/env"</span>], <span class="comment">// "@babel/preset-env"</span></span><br><span class="line">  plugins: [<span class="string">"@babel/transform-arrow-functions"</span>], <span class="comment">// same as "@babel/plugin-transform-arrow-functions"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要关键技术：</p><ul><li>webpack</li><li>typescript</li><li>react</li><li>state management(redux or mobx)</li><li>react-router-4</li><li>component hot reload</li><li>svg icon</li><li>jest</li><li>UI lib</li><li>less</li><li>eslint</li></ul><p>主要库以及版本：</p><ul><li>webpack4.x.x</li><li>typescript2.9.x</li><li>react16.7.x</li><li>react-router-dom4.2.x</li><li>react-hot-loader4.6.x<br>…</li><li>node10.13.x</li></ul><p>注意：react-router v4为第四代react-router，react-dom为v2或v3的旧版本。新版本的react-router v4可以说是重写了路由，react-router v4 被一分为三：<code>react-router-dom</code>(for web)、<code>react-router-native</code>(for native)、<code>react-router</code>(core)。仅在浏览器中使用的话，一般引入<code>react-router-dom</code>即可。如果从旧版本迁移，可以参考<a href="https://github.com/gmfe/Think/issues/6" target="_blank" rel="noopener">这里</a>。</p><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--.storybook</span><br><span class="line">--public模板目录</span><br><span class="line">--src</span><br><span class="line">  --components 自定义组件</span><br><span class="line">  --docs代码入口&lt;App/&gt;</span><br><span class="line">  --stories文档说明</span><br><span class="line">eslintrc.yml</span><br><span class="line">tsconfig.json</span><br><span class="line">.babelrc</span><br><span class="line">package.json依赖包</span><br><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure><h2><span id="babel">Babel</span></h2><p>Babel用于将浏览器不能识别的ES以及TS转换为JS，首先添加依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @babel/core @babel/cli @babel/preset-env @babel/preset-react @babel/preset-typescript @babel/plugin-proposal-object-rest-spread @babel/plugin-transform-runtime</span><br></pre></td></tr></table></figure><p>然后在根目录添加.babelrc，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;@babel/preset-env&quot;,</span><br><span class="line">    &quot;@babel/preset-react&quot;,</span><br><span class="line">    &quot;@babel/preset-typescript&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;@babel/plugin-proposal-object-rest-spread&quot;,</span><br><span class="line">    &quot;@babel/plugin-transform-runtime&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="unit-test">Unit Test</span></h2><p>添加单元测试，单测默认识别目录<code>__tests__</code>，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--src</span><br><span class="line">  --components</span><br><span class="line">    --Link</span><br><span class="line">  --__tests__</span><br><span class="line">    Link.react.test.js</span><br><span class="line">  Link.react.js</span><br><span class="line">    index.js</span><br></pre></td></tr></table></figure><p>首先，使用TypeScript编写一个组件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> STATUS = &#123;</span><br><span class="line">  HOVERED: <span class="string">'hovered'</span>,</span><br><span class="line">  NORMAL: <span class="string">'normal'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MLink</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._onMouseEnter = <span class="keyword">this</span>._onMouseEnter.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>._onMouseLeave = <span class="keyword">this</span>._onMouseLeave.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      class: STATUS.NORMAL,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseEnter() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">class</span>: STATUS.HOVERED &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseLeave() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">class</span>: STATUS.NORMAL &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;a</span><br><span class="line">        className=&#123;<span class="keyword">this</span>.state.class&#125;</span><br><span class="line">        href=&#123;<span class="keyword">this</span>.props.page || <span class="string">'#'</span>&#125;</span><br><span class="line">        onMouseEnter=&#123;<span class="keyword">this</span>._onMouseEnter&#125;</span><br><span class="line">        onMouseLeave=&#123;<span class="keyword">this</span>._onMouseLeave&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">MLink.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  children: PropTypes.node.isRequired,</span></span><br><span class="line"><span class="regexp">  page: PropTypes.node,</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><p>对应其<code>__tests__</code>目录添加单元测试，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MLink.react.test.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MLink &#125; <span class="keyword">from</span> <span class="string">'../Link.react'</span>;</span><br><span class="line"><span class="keyword">import</span> renderer <span class="keyword">from</span> <span class="string">'react-test-renderer'</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'MLink changes the class when hovered'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> component = renderer.create(</span><br><span class="line">    &lt;MLink page=<span class="string">"http://www.facebook.com"</span>&gt;Facebook&lt;<span class="regexp">/MLink&gt;,</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">  let tree = component.toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ manually trigger the callback</span></span><br><span class="line"><span class="regexp">  tree.props.onMouseEnter();</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ re-rendering</span></span><br><span class="line"><span class="regexp">  tree = component.toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ manually trigger the callback</span></span><br><span class="line"><span class="regexp">  tree.props.onMouseLeave();</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ re-rendering</span></span><br><span class="line"><span class="regexp">  tree = component.toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>把单元测试所需的配置补充上，添加单元测试所需要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev jest @types/jest babel-jest ts-jest</span><br></pre></td></tr></table></figure><p>另外还需要一个Enzyme，它是React的测试工具，还需要enzyme-to-json 转换，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev jest react-test-renderer enzyme enzyme-adapter-react-16 enzyme-to-json</span><br></pre></td></tr></table></figure><p>更新一下package.json，加上对应的脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "jest",</span><br><span class="line">  "test:watch": "jest --watch",</span><br><span class="line">  "test:coverage": "jest --coverage"</span><br><span class="line">&#125;,</span><br><span class="line">"jest": &#123;</span><br><span class="line">  "setupFiles": ["./test/jestsetup.js"],</span><br><span class="line">  "snapshotSerializers": ["enzyme-to-json/serializer"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个test/jestsetup.js文件，自定义测试环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Enzyme, &#123; shallow, render, mount &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span>;</span><br><span class="line"><span class="comment">// React 16 Enzyme adapter</span></span><br><span class="line">Enzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br><span class="line"><span class="comment">// Make Enzyme functions available in all test files without importing</span></span><br><span class="line">global.shallow = shallow;</span><br><span class="line">global.render = render;</span><br><span class="line">global.mount = mount;</span><br></pre></td></tr></table></figure><p>对于CSS模块，添加以下配置到package.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"jest": &#123;</span><br><span class="line">  "moduleNameMapper": &#123;</span><br><span class="line">    "^.+\\.(css|scss)$": "identity-obj-proxy"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行命令进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jest --env=jsdom --coverage --no-cache --detectOpenHandles</span><br></pre></td></tr></table></figure><p>jest可以测试的特性有：</p><ul><li>component render</li><li>props</li><li>events</li><li>event handlers<br>…</li></ul><p>更多例子可以参考<a href="https://jestjs.io/" target="_blank" rel="noopener">这里</a>。</p><h2><span id="eslint">ESLint</span></h2><p>首先加入依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev eslint eslint-config-airbnb-base eslint-loader eslint-plugin-import eslint-plugin-react typescript-eslint-parser</span><br></pre></td></tr></table></figure><p>ESLint用于代码检查用，配置也比较无脑，当你用像WebStorm这些开发工具时，工具会自动检测到ESLint，自动为你格式化和检查代码。下面是我自己的一份配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">  browser:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  commonjs:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  es6:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  jest:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ecmaFeatures:</span></span><br><span class="line"><span class="attr">  modules:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  spread:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  restParams:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">extends:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'eslint:recommended'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'plugin:react/recommended'</span></span><br><span class="line"><span class="attr">parser:</span> <span class="string">'babel-eslint'</span></span><br><span class="line"><span class="attr">parserOptions:</span></span><br><span class="line"><span class="attr">  ecmaFeatures:</span></span><br><span class="line"><span class="attr">    jsx:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  ecmaVersion:</span> <span class="number">2018</span></span><br><span class="line"><span class="attr">  sourceType:</span> <span class="string">module</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">react</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  indent:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  linebreak-style:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">windows</span></span><br><span class="line"><span class="attr">  quotes:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">single</span></span><br><span class="line"><span class="attr">  semi:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">error</span></span><br><span class="line"><span class="attr">  comma-dangle:</span> <span class="string">off</span></span><br><span class="line"><span class="attr">  no-unused-vars:</span> <span class="string">warn</span></span><br><span class="line"><span class="attr">  no-console:</span> <span class="string">error</span></span><br><span class="line"><span class="attr">  no-unexpected-multiline:</span> <span class="string">warn</span></span><br><span class="line">  <span class="string">import/prefer-default-export:</span> <span class="string">off</span></span><br><span class="line"><span class="attr">settings:</span></span><br><span class="line"><span class="attr">  react:</span></span><br><span class="line"><span class="attr">    pragma:</span> <span class="string">React</span></span><br><span class="line"><span class="attr">    version:</span> <span class="string">detect</span></span><br></pre></td></tr></table></figure><p>像VSCode，可以在首选项 -&gt; 设置 中找到eslint.validate，加入typescript与typescriptreact，分别用于监听ts与tsx文件，如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"eslint.validate": [</span><br><span class="line">    "javascript",</span><br><span class="line">    "javascriptreact",</span><br><span class="line">    "typescript",</span><br><span class="line">    <span class="string">"typescriptreact"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>更多配置可以自己定制。</p><h2><span id="storybook">Storybook</span></h2><p>storybook的主要作用是为自己实现的组件编写文档，可以在<a href="https://storybook.js.org/" target="_blank" rel="noopener">这里</a>查看更多细节。</p><p>安装storybook：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @storybook/react</span><br></pre></td></tr></table></figure><p>加入package.json的script</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"storybook"</span>: <span class="string">"start-storybook -p 9001 -c .storybook"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认storybook会在.storybook文件夹作为配置，配置文件为config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/config.js中修改路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'@storybook/react'</span>;</span><br><span class="line"><span class="comment">// src/stories/button.stories.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">'../src/stories'</span>, <span class="literal">true</span>, /\.stories\.js$/);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStories</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  req.keys().forEach(<span class="function">(<span class="params">filename</span>) =&gt;</span> req(filename));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configure(loadStories, <span class="built_in">module</span>);</span><br></pre></td></tr></table></figure><p>上面配置指定了创建stories的位置，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// .storybook/config.js中修改路径</span><br><span class="line">import &#123; configure &#125; from &apos;@storybook/react&apos;;</span><br><span class="line"></span><br><span class="line">function loadStories() &#123;</span><br><span class="line">  require(&apos;../src/stories/button.stories.js&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configure(loadStories, module);</span><br><span class="line"></span><br><span class="line">// src/stories/button.stories.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; storiesOf &#125; from &apos;@storybook/react&apos;;</span><br><span class="line">import &#123;Button&#125; from &apos;../components/Button&apos;;</span><br><span class="line"></span><br><span class="line">storiesOf(&apos;Button&apos;, module)</span><br><span class="line">  .add(&apos;基本用法&apos;,() =&gt; (</span><br><span class="line">    &lt;Button&gt;按钮&lt;/Button&gt;</span><br><span class="line">  ))</span><br><span class="line">  </span><br><span class="line">// src/components/Button.js</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">export class Button extends React.Component&#123;</span><br><span class="line">  constructor (props) &#123;</span><br><span class="line">    super(props)    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;button style=&#123;&#123;backgroundColor: &apos;#fff&apos;, border: &apos;1px solid #ccc&apos;&#125;&#125;&gt;&#123;this.props.children&#125;&lt;/button&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动stroybook服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn storybook</span><br></pre></td></tr></table></figure><p><img src="/img/react/storybook-script.png" alt="storybook"></p><p>默认会自动打开浏览器</p><p><img src="/img/react/storybook.png" alt="storybook"></p><p>出现以上页面说明配置已经成功了。</p><h2><span id="live-editing">Live Editing</span></h2><p>默认地，webpack的development mode在每次更新代码时，会自动刷新页面。但刷新不同于Live Edit，我不希望编写一个CSS还要重新refresh一下，页面直接变化就最好了！有很多工具可以实现这种方式，这里仅介绍react-hot-loader：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev react-hot-loader</span><br></pre></td></tr></table></figure><p>在script里面加入一个<code>--hot</code>选项即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"start"</span>: <span class="string">"./node_modules/.bin/webpack-dev-server --hot --mode development --progress --colors --config ./webpack.config.js"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>出现以下效果，说明Live Editing功能实现了。</p><video src="/img/react/react-hot-loader.mp4" type="video/mp4" controls="controls" width="100%" height="100%"></video><h2><span id="summary">Summary</span></h2><p>由于使用的东西比较多，而且开发的方式也比较灵活，具体技术细节可以具体深入理解。</p><p>完整代码，可以参考我的<a href="https://github.com/barudisshu/galilei-ui" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/cartoon/20190116_225744.925.jpg&quot; alt=&quot;ohanahibi&quot;&gt;&lt;br&gt;
有时候并不希望使用第三方组件库，以及大部分时候需要自己定制一套组件实现，以供公司或项目内部使用。开发自己的组件有如重复造轮子，会花费相当多的精力制造。如果是为了一种长远公司发展，这份努力是值得的，如果不想自己耗费精力，也有许多开源的组件实现，比如&lt;a href=&quot;https://material-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;material-ui&lt;/a&gt;。一般都是拿来改造一下，可以避免很多开发或兼容性上的坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react, redux, webpack, hot" scheme="http://galudisu.info/tags/react-redux-webpack-hot/"/>
    
  </entry>
  
  <entry>
    <title>在IntelliJ创建标签</title>
    <link href="http://galudisu.info/2018/12/23/ideal/using-intellij-bookmarks/"/>
    <id>http://galudisu.info/2018/12/23/ideal/using-intellij-bookmarks/</id>
    <published>2018-12-23T14:43:44.000Z</published>
    <updated>2019-08-27T09:05:47.507Z</updated>
    
    <content type="html"><![CDATA[<p>This is a quick post about IntelliJ’s nice bookmark feature.</p><p>IntelliJ gives you the option to bookmark single lines of code. After a line has been bookmarked, you can use various ways to jump directly back to this line. So it can be a good idea to bookmarks code locations you often work with.</p><a id="more"></a><p>To create a new bookmark you only have to press F11 inside the code editor. Bookmarked lines show a small checkmark next to the line number.</p><p><img src="/img/idea/intellij-bookmark1.png" alt=""></p><p>Bookmarks can be removed by selecting the bookmarked line and pressing F11 again.</p><p>To see all bookmarks you can press Shift - F11. This opens a small popup window which shows a list of all bookmarks you have created.</p><p><img src="/img/idea/intellij-bookmark5.png" alt=""></p><p>Note that this window can completely controlled using the keyboard:</p><ul><li>With Up / Down you can browse the list of bookmarks</li><li>With Enter you jump to the selected bookmark</li><li>Esc closes the window</li><li>A bookmark can be moved up or down using Alt - Up / Alt - Down</li></ul><p>Note that you can also add a mnemonic identifier to a bookmark. You do this by selecting a line and pressing Ctrl - F11. This opens a small menu in which you can choose a mnemonic identifier (which is a character or a number).</p><p><img src="/img/idea/intellij-bookmark3.png" alt=""></p><p>You can choose an identifier by clicking on one of the menu buttons or by simply pressing the corresponding key on your keyboard.</p><p>Bookmark mnemonics are also shown next to the line number. In the following image 1 was choosen as mnemonic.</p><p><img src="/img/idea/intellij-bookmark2.png" alt=""></p><p>Mnemonics give you the option to move even quicker between bookmarks. You can directly jump to a mnemonic bookmark by opening the bookmark popup (Shift - F11) and pressing the mnemonic key (1 in this example).</p><p>For numerical bookmarks even more shortcuts are available. You can toggle a numeric mnemonic on a selected line by pressing <code>Ctrl - Shift - &lt;number&gt;</code>. If you want to jump to a numeric mnemonic you use the <code>Ctrl - &lt;number&gt;</code> shortcut.</p><p>For example: <code>Ctrl - 5</code> brings you directly to the mnemonic bookmark 5.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is a quick post about IntelliJ’s nice bookmark feature.&lt;/p&gt;
&lt;p&gt;IntelliJ gives you the option to bookmark single lines of code. After a line has been bookmarked, you can use various ways to jump directly back to this line. So it can be a good idea to bookmarks code locations you often work with.&lt;/p&gt;
    
    </summary>
    
    
      <category term="idea" scheme="http://galudisu.info/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>关于Akka在事件溯源的若干思考</title>
    <link href="http://galudisu.info/2018/12/21/pattern/ddd/event-sourcing-feedback/"/>
    <id>http://galudisu.info/2018/12/21/pattern/ddd/event-sourcing-feedback/</id>
    <published>2018-12-21T14:43:44.000Z</published>
    <updated>2019-08-27T09:05:47.561Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/cartoon/20181231_213606.453.jpg" alt="shana"></p><p>谈及CQRS，一定离不开Event Sourcing的讨论。首先阐明一个问题，Event Sourcing是否是必须的？主要是两点顾虑：</p><ul><li>引入Event Sourcing会带来一定额外开销，因为要将每次的Event按一定顺序存储下来。这样做是因为在分布式并发较大的情况下，可以保证CAP的最终一致性。因为传统数据库事务的回滚操作，在分布式环境操作显然是不切实际的，你不可能让每个请求处理都交给数据库去处理，这样会给数据库带来压力。</li><li>由于领域驱动设计理念，不可避免要记录Entity的状态。Event会改变Entity的State，一方面持久化Event可以方便对State进行回滚，对应PersistenceActor的snapshot；另一方面，Entity的事件需要进行pub-sub通信模式，实现解耦。但State并不是领域驱动设计阐述的内容，它是一种编程模式或一种架构方法。例如React的Redux设计了State，用于描述事件发生，记录已经改变了组件或模型的State。</li></ul><a id="more"></a><div style="float:right"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=22727327&auto=1&height=66"></iframe></div><div class="clearfix"></div><h2><span id="ddd是什么">DDD是什么？</span></h2><blockquote><p>领域驱动设计是一种处理<strong>高度复杂域</strong>的设计方法，试图分离技术实现的复杂性，围绕<strong>业务概念</strong>构建<strong>领域模型</strong>来控制业务的复杂性，以解决软件难以理解，难以演化等问题。团队应用它可以成功开发<strong>复杂业务</strong>软件系统，使用系统在演进时任然保持敏捷。</p></blockquote><p>首先必须理解，DDD不是框架，不是架构，不是语言，它是一种设计思想。它可以分离业务复杂度和技术复杂度，DDD也并不是一个新的事物，它是面向对象的拔高，最终目标还是</p><blockquote><p>高内聚，低耦合</p></blockquote><h2><span id="ddd主要解决的问题">DDD主要解决的问题？</span></h2><ol><li><p>如何合理划分业务系统？<br>这为微服务的划分提供了方法论（微服务的粒度的问题，多大算大，多小又算小，在微服务刚兴起时，很多企业或者架构师对它都没有统一且明确的定义，这里给些examples，e.g：代码行数？职责的划分？披萨原则？组织结构？）界限上下文很好的回答了这个问题，这也是DDD最近几年借微服务的东风，火起来的原因之一(领域驱动设计的提出距今已经十多年，但真正火热起来大约是在2013年微服务架构被提出来之后)。</p></li><li><p>如何保持业务架构和系统架构的一致性？<br>与传统的系统相比，DDD里面强调领域专家和技术团队的合作，建立统一语言“普通话”， 聚焦在领域，领域逻辑和业务流程上面，使整体团队对同一个业务术语有统一的认识，避免理解的偏差，并将这些“术语”映射到代码中，随着系统的演进变迁。</p></li></ol><h2><span id="战略建模strategic-modeling和战术建模tractical-modeling">战略建模(Strategic Modeling)和战术建模(Tractical Modeling)</span></h2><blockquote><p>战略建模：</p><p>限界上下文(Bounded Context)<br>上下文映射图(Context Mapping)</p></blockquote><blockquote><p>战术建模：</p><p>聚合(Aggregate)<br>实体(Entity)<br>值对象(Value Objects)<br>资源库(Repository)<br>领域服务(Domain Services)<br>领域事件(Domain Events)<br>模块(Modules)</p></blockquote><h2><span id="ddd战略设计">DDD战略设计？</span></h2><p><img src="/img/pattern/ddd/dddes/ddd.png" alt="ddd"></p><p>这张图几乎覆盖了领域驱动设计的所有概念，它划分了两大部分：战略建模和战术建模。两部分没有明显的对比关系，它属于DDD的两个层面，一个是业务设计层面，一个是逻辑编码划分。可以看到，要实现领域驱动设计的程序代码，你必须既是产品经理，又是核心代码开发人员。</p><blockquote><p>想要完整的图例，可以在这里<a href="/img/pattern/ddd/dddes/dddd.png">下载</a>。</p></blockquote><h2><span id="ddd领域划分">DDD领域划分？</span></h2><p>根据问题域，将问题划分为<code>Core domain</code>，<code>Sub domain</code>，<code>Support subdomain</code> 和 <code>generic subdomian</code>，大概标准如下：</p><ul><li>核心域：核心竞争力，核心业务 (需要投入最好的人力和资源)</li><li>支持子域： 没有，很糟糕; 有，也不足以脱颖而出(可以考虑外包)</li><li>通用子域：都有的东西, 比如认证, 发短信, 客服系统等(可以考虑购买商业解决方案或者采用开源方案)</li></ul><h2><span id="ddd领域建模方法">DDD领域建模方法？</span></h2><p>领域建模的方式很多种，比如四色建模、OOAD还有事件风暴，我们这里只简单聊聊如何使用事件风暴梳理业务流程，建立领域模型，划分边界。</p><h2><span id="限界上下文bounded-context">限界上下文(Bounded Context)</span></h2><p>限界上下文的概念很重要，它由<code>通用语言</code>进行表述。它表述的就是子域，它划分了<code>实体</code>、<code>值对象</code>和<code>领域服务</code>等概念。</p><p>以玩家刷怪升级为例，通用语言描述为，“击杀怪物，掉落经验值，玩家获得经验值，玩家消费经验值，玩家经验值增加”。从这段话，就可以构建几个限界上下文：</p><p><img src="/img/pattern/ddd/dddes/bounded-context.png" alt="bounded-context"></p><p>可以看到，上下文的边界是非常清晰的，并且是唯一的，这种唯一性带来的好处就是解耦。例如，有个货物出仓的方法，它既可能在商品上实现方法，也可能在库存上实现方法。在一个业务项目中出现两个做同一件事情的方法，可以说，开发或维护是非常麻烦的事情！不妨将“出仓”划分到子域限界上下文“仓储”中去。由外部通过命令调用，这就是为什么大部分DDD设计，都是基于CQRS实现的原因。</p><h2><span id="ddd事件风暴">DDD事件风暴？</span></h2><p>事件风暴主要是来自 DDD 社区的一个工作坊，用于快速探索复杂的业务领域。在这个过程中，会使用一面大墙作为建模面，并使用贴纸来代表模型。我们将业务人员和开发人员聚集起来，并采用事件的方式查找领域中所发生的事情。当找到事件时，会尝试沿着一个时间线对它们进行排序。随后，我们会添加触发每个事件的命令。Huehnken 在这里没有基于实体看上去的从属关系创建聚合，而是希望能够根据命令流和事件而生成聚合。这会给聚合带来不同的视角，它会对命令和事件一起进行逻辑分组，他相信这种方式能够为我们带来更好的边界划分，并且有助于将聚合分割到不同的服务中。</p><p>在 Huehnken 的经验中，事件风暴是一个强大的工具，在一些较大规模的场景中更是如此，但是它可以用于不同的级别。他发现我们还可以将其用到一个更加技术化的级别，用于建模服务和聚合。这种方式的一个巨大优势就是能够将模型和实现匹配起来，这在 DDD 中是非常重要的。</p><p>响应式系统指的是构建具备即时响应性、弹性、适应性以及消息驱动特征的系统。实现这些特征的方式是异步消息。对于 Huehnken 来说，微服务的关键点在于隔离、快速反应并且能够在部署新版本服务时不影响系统的其他组成部分，所以对他来说，这两个概念非常具有互补性，我们需要响应式的微服务。</p><p>实现响应式系统的教科书式技术是Actor，但是 Huehnken 认为这种模型并不像他想象中的那样被广泛采用，他相信造成这一点的原因在于从单体模型进行转移所需的思想方式转变。在单体模型中，我们可以访问任何的内容，甚至可以跨越已存的逻辑边界。在真正的分布式系统中，会具有网络边界，我们无法以整体的方式访问系统。涉及到多个聚合的业务进程可能会需要像 sagas 这样的模式。现在，我们还要告别全局状态，在分布式系统中，每个服务是本地化的，已经过去的事情要通过事件来表示。</p><p>Huehnken 认为我们已经有了一个非常有趣的采用 Actor 的实现技术。现在有多个可用的框架，包括Erlang和 Akka。Lagom 是一个更新、更具倾向性的微服务框架，它基于 Akka、CQRS和事件溯源（event sourcing）。因为思维方式的挑战，人们在构建复杂异步解耦的系统时还较为困难，但是如果我们想要将建模技术和实现技术结合起来，这将是一个非常好的机会。</p><p>在 DDD 中，非常重要的一点在于代码要表述模型的概念。Huehnken 认为我们在这一点上已经迷失并且在偏离方向。我们已经开发了实现技术，并且又独立开发了新的建模技术，现在我们必须将它们结合起来，这样来自模型的理念能够直接反射到代码中，这样的话，会在构建分布式系统方面取得真正的突破。</p><p>基于响应式设计理念，对于大量复杂业务需要加速设计。所以事件风暴是以结果为导向的。事件风暴有4个步骤：</p><ol><li>识别领域事件</li></ol><p>事件是对结果进行建模，我们在寻找领域事件时，首先需要明白领域事件具备的几个特征：</p><ul><li>具有业务意义</li><li>过去时，e.g: “XX已XX”</li><li>时序性</li></ul><p>事件风暴以过去发生的事件追溯系统的数据和行为，从而进行合适的建模，e.g：</p><p><img src="/img/pattern/ddd/dddes/event-list.png" alt="Event List"></p><ol start="2"><li>识别命令</li></ol><p>命令可以理解为不同角色用户在界面上面的操作，比如“添加商品”，“编辑库存”，“提交订单”等； 有些命令可能产生多个事件，可以将他们用箭头联系起来; 在进行这个过程中，我们也需要将角色，通过不同的颜色标示出来 e.g:</p><p><img src="/img/pattern/ddd/dddes/event-recognize.png" alt="Event Recognize"></p><ol start="3"><li>寻找聚合</li></ol><p>在DDD中，聚合是一组相关的领域对象，其目的是要确保业务规则在边界内的不变性，聚合根具有全局标识，所有对聚合根内对象的修改，都只能通过聚合根进行，聚合帮助我们简化了复杂的对象网络，逐步做到“高内聚，低耦合”。<br>在识别聚合的时候，我们可以通过对命令和事件的划分找到聚合边界，识别出分布在时间轴上面不同位置的相关命令和事件，e.g：</p><p><img src="/img/pattern/ddd/dddes/event-aggregator.png" alt="Event Aggregator"></p><ol start="4"><li>边界划分</li></ol><p>划分服务的边界，它一定程度上面对应的是“界限上下文”，关于它有一个非常形象的定义：</p><blockquote><p>细胞之所以会存在，是因为细胞膜定义了什么在细胞内，什么在细胞外，并且确定了什么物质可以通过细胞膜</p></blockquote><p>一个聚合可能是最小颗粒度的界限上下文，同时，我们常合并业务相关性很高的聚合。e.g:</p><p><img src="/img/pattern/ddd/dddes/event-bound.png" alt="Event Bound"></p><p>最后在领域划分的时候，需要团队一起对业务达成共识，首先建立统一语言，然后识别领域模型，划分子域和界限上下文，在验证界限上下文的时候，如果你发现有过多的角色在同一个子域或者界限上下文时，就需要注意了，这就是典型的坏味道，需要及时调整的讯号。</p><h2><span id="akka的ddd战术设计">Akka的DDD战术设计</span></h2><p>CQRS是一种很好的设计，如果说战略设计是业务上的解耦，那么CQRS就是战术设计的解耦。它把代码层面上的职能进行了划分。这里主要顾虑到是否需要引入PersistenceActor，也就是是否需要在DDD进行事件的持久化的问题讨论。</p><p>一般情况下这样考虑，并发性较高，写入占主要吞吐量的业务，推荐使用Event Sourcing进行事件回溯。比如订单下单、天气预警、紧急消息推送等，这种一次大量写入的业务需要PersistenceActor作一份快照，以便失败时可以恢复(recover)。那么写入数据库的操作应该发生在persist前，还是persist后？</p><p>另外，是否是写入很少，读取很多的操作不推荐使用Event Sourcing？在CQRS设计中，Read的操作被设计为从中间件(Midware)读取，这个中间件可以是Elasticsearch，可以是MongoDB等，所以读操作很多的场景，引入Event Sourcing反而成为性能瓶颈，因为Event需要被保存下来并被序列化。</p><ol><li>PersistenceActor的限界上下文战术</li></ol><p>DDD的Entity被设计为继承了PersistenceActor，Entity实体有唯一标识persistenceId，这样聚合根拥有了全局标识，聚合根的所有操作，都发生在该Entity内。如下：</p><p><img src="/img/pattern/ddd/dddes/aggregate-root.png" alt="aggregate-root"></p><p>实体包含系统的状态(快照)，每次事件的发生都改变Entity的状态。</p><ol start="2"><li>PersistenceActor协作上下文</li></ol><p>DDD中实体拥有自身上下文的所有操作，并且不是共享的，不是RMI形式的。子域间想要调用彼此的操作，有两种方式：</p><ul><li>Pub-Sub事件订阅模式</li><li>领域协作</li></ul><p>事件订阅方式可以由Akka的EventBus处理，这种方式隔离性比较高。子域间的Entity根本不清楚彼此的情况，也不用关心内部的实现。缺点就是额外要维护这个EventBus，并且需要为EventBus配置Supervisor策略。</p><p>领域协作的方式比较直接，即通过上下文，直接获取临域的位置，直接调用。好处是不需要担心消息丢失方面的问题，事件由聚合根处理，实现高聚合、即时反馈。缺点就是要处理好消息的各种情况，在Akka设计方面一般用FSM对消息进行transform。</p><p>本身互联网就是个无状态非阻塞的环境，个人认为第二种方式比较适用这种环境的处理。下面阐述下流程：</p><p><img src="/img/pattern/ddd/dddes/context-associate.png" alt="context-associate"></p><p>根据以往的经验，总结下Actor设计的思想：</p><ul><li>一个Actor只做一件事情，它是无依赖的，原子性的，逻辑上不可再分割的最小单元；</li><li>一个Actor是包含行为的，它是一个对象，也是一个角色，这个行为可能表现为基础属性：邮箱大小，Executor机制，dispather机制；也可能表现为状态、Socket连接、游戏Actor的Exp、消息队列的Size等。</li></ul><p>不妨分析下：</p><blockquote><p>Aggregate Actor只做Aggregate root的角色，其它逻辑跟我无关<br>Pipe Actor只做Pipe的角色，我只担心流量、超时、deadletter，其它逻辑跟我无关<br>Factory Actor是个工厂，它会产生很多factor，至于factor做什么跟我无关</p><p>所以反过来说：凡是“与xxx有关”的Actor，都是设计有问题的，可以再次分割的逻辑，即时TDD也不能覆盖这个缺陷问题。</p></blockquote><p>这种Actor特性和设计思想，与微服务的理念无疑是“天工巧夺”。但同时要明白，微服务的设计，大多是面向容器的，除此之外，还有基于<a href="https://en.wikipedia.org/wiki/Function_as_a_service" target="_blank" rel="noopener">FaaS</a>。有兴趣的可以了解下。</p><h2><span id="ddd与微服务">DDD与微服务</span></h2><p>理想情况下，界限上下文与微服务可以一一对应，在实际项目中，有些调整，比如根据业务的相关度和变化频率，有时候我们会将多个界限上下文进行合并；另外微服务在开发，测试，部署，发布和运维等等时，相比单体应用而言，它面临了所有分布式系统面临的问题，带来了额外的复杂度和开销，所以将微服务粒度拆分过细反而是一种反模式，需要考虑需要解决问题的复杂度，将相对简单的服务合并在一起；在微服务拆分的时候，也要注意：“聚合是服务的最小单元”（一个界限上下文可以包括多个聚合），打破聚合，就很有可能破坏事务一致性和业务约束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/cartoon/20181231_213606.453.jpg&quot; alt=&quot;shana&quot;&gt;&lt;/p&gt;
&lt;p&gt;谈及CQRS，一定离不开Event Sourcing的讨论。首先阐明一个问题，Event Sourcing是否是必须的？主要是两点顾虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入Event Sourcing会带来一定额外开销，因为要将每次的Event按一定顺序存储下来。这样做是因为在分布式并发较大的情况下，可以保证CAP的最终一致性。因为传统数据库事务的回滚操作，在分布式环境操作显然是不切实际的，你不可能让每个请求处理都交给数据库去处理，这样会给数据库带来压力。&lt;/li&gt;
&lt;li&gt;由于领域驱动设计理念，不可避免要记录Entity的状态。Event会改变Entity的State，一方面持久化Event可以方便对State进行回滚，对应PersistenceActor的snapshot；另一方面，Entity的事件需要进行pub-sub通信模式，实现解耦。但State并不是领域驱动设计阐述的内容，它是一种编程模式或一种架构方法。例如React的Redux设计了State，用于描述事件发生，记录已经改变了组件或模型的State。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="akka, ddd, cqrs" scheme="http://galudisu.info/tags/akka-ddd-cqrs/"/>
    
  </entry>
  
  <entry>
    <title>React Redux Tutorial for Beginners - The Definitive Guide(2018)</title>
    <link href="http://galudisu.info/2018/11/19/react/react-redux-tutorial-beginners/"/>
    <id>http://galudisu.info/2018/11/19/react/react-redux-tutorial-beginners/</id>
    <published>2018-11-19T15:14:34.000Z</published>
    <updated>2019-08-27T09:05:47.587Z</updated>
    
    <content type="html"><![CDATA[<p>The Simplest <strong>React Redux tutorial</strong> I wish I had when I started learning <a href="https://www.valentinog.com/blog/react-redux-tutorial-beginners/#React_Redux_tutorial_what_you_will_learn" target="_blank" rel="noopener">here</a></p><p><img src="/img/react/redux-react-tutorial-beginner-2018.png" alt="redux"></p><a id="more"></a><p>When I first started learning <strong>Redux</strong> I wish I could find the simplest tutorial ever.</p><p>Despite the great resource out there I couldn’t wrap my head around some of the Redux concepts.</p><p>I knew what’s the <strong>state</strong>. But <strong>Actions, action creators, and reducers?</strong> They were obscure for me.</p><p>Last but not least I didn’t know how to glue <strong>React and Redux together</strong>.</p><p>During those days I started writing my own React Redux tutorial and since then I learned a lot.</p><p>I taught myself the Redux fundamentals by writting this guide. I hope it’ll be useful for all those learning React and Redux.</p><h2><span id="react-redux-tutorial-who-this-guide-is-for">React Redux tutorial: who this guide is for</span></h2><p>The following React Redux guide is exactly what you’re looking for if:</p><ul><li>you have a good grasp of Javascript: ES6, and React</li><li>you’re looking forward to learn Redux in the most simple way</li></ul><h2><span id="react-redux-tutorial-what-you-will-learn">React Redux tutorial: what you will learn</span></h2><p>In the following guide you will learn:</p><ul><li>what is Redux</li><li>how to use Redux with React</li></ul><h2><span id="react-redux-tutorial-a-minimal-react-development-environment">React Redux tutorial: a minimal React development environment</span></h2><p>Before starting off <strong>make sure you have a React development environment ready to roll.</strong></p><p>To make one you can follow this tutorial of mine: How to set up React, webpack, and Babel or you can also use create-react-app.</p><h2><span id="react-redux-tutorial-what-is-the-state">React Redux tutorial: what is the state?</span></h2><p>To <strong>understand what is Redux</strong> you must first understand what is the <strong>state</strong>.</p><p>If you have ever worked with React the term state should be no surprise to you.</p><p>I guess you already wrote some <strong>stateful React component</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      articles: [</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">"React Redux Tutorial for Beginners"</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">title</span>: <span class="string">"Redux e React: cos'è Redux e come usarlo con React"</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; articles &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;articles.map(el =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;el.id&#125;</span>&gt;</span>&#123;el.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A <strong>stateful React component</strong> is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">Javascript ES6 class</a>.</p><p>Every stateful React component <strong>carries its own state</strong>.</p><p>In a React component the state holds up <strong>data</strong> and the component might render such data to the user.</p><p>The state could also change in response to actions and events: in React you can update the local component’s state with setState.</p><p>But <strong>what is the state</strong> anyway?</p><p>The term state is not tied exclusively to React.</p><p>The <strong>state is all around you</strong>.</p><p>Even <strong>the simplest JavaScript application has a state</strong>.</p><p>Consider the following example:</p><p>the user clicks a button</p><p>a modal appers afterwards</p><p>Guess what, <strong>in this trivial interaction there is a state</strong> we must deal with.</p><p>We could describe the initial state as a plain JavaScript object:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> state = &#123;</span><br><span class="line">  buttonClicked: <span class="string">'no'</span>,</span><br><span class="line">  modalOpen: <span class="string">'no'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And when the user clicks the button we have:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> state = &#123;</span><br><span class="line">  buttonClicked: <span class="string">'yes'</span>,</span><br><span class="line">  modalOpen: <span class="string">'yes'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>How do you <strong>keep track of those things in JavaScript</strong> besides storing the state in an object?</p><p>Is there <strong>a library that can help use tracking the state</strong>?</p><h2><span id="react-redux-tutorial-what-problem-does-redux-solve">React Redux tutorial: what problem does Redux solve?</span></h2><p>A typical JavaScript application is full of states. And you didn’t even know.</p><p>Here are some examples of state:</p><ul><li>what the user sees (data)</li><li>what data are we fetching</li><li>what URL are we showing to the user</li><li>what items are selected inside the page</li><li>are there errors in the applications? That’s state too</li></ul><p>State is everywhere in JavaScript.</p><p>As you can see even the simplest JavaScript application has a state.</p><p>But can you imagine <strong>how much state a React application has</strong>?</p><p>Yeah, you can get by with keeping the state within a parent React component.</p><p>As long as the application remains <strong>small</strong>.</p><p>Then things will become tricky.</p><p>Even a silly to-do list could become unmanageable if you starting passing the state up and down.</p><p>Who wants a bloated React component?</p><p>Not only, I’d say that the <strong>frontend shouldn’t know about the business logic</strong>. Ever.</p><p>So what are the alternatives for managing the state of a React component?</p><p><strong>Redux</strong> is one of them.</p><p><strong>Redux solves a problem that might not be clear in the beginning</strong>: it helps giving <strong>each React component</strong> the <strong>exact piece of state</strong> it needs.</p><p>Redux holds up the <strong>state</strong> within a <strong>single location</strong>.</p><p>Also with Redux the <strong>logic for fetching and managing the state</strong> <strong>lives outside React</strong>.</p><p>The benefits of this approach might be not so evident. Things will look clear as soon as you’ll get your feet wet with Redux.</p><p>In the next section we’ll see why you should learn Redux and when to use Redux within your applications.</p><h2><span id="react-redux-tutorial-should-i-learn-redux">React Redux tutorial: should I learn Redux?</span></h2><p>Are you trying to learn Redux but you’re going nowhere?</p><p>Redux literally scares most beginners. But that shouldn’t be your case.</p><p><strong>Redux is not that hard</strong>. The key is: don’t rush learning Redux just because.</p><p>You should <strong>start learning Redux</strong> if you’re <strong>motivated and passionate</strong> about it.</p><p>Take your time.</p><p>I started to learn Redux because:</p><ul><li>I was 100% interested in learning how Redux works</li><li>I was eager to improve my React skills</li><li>the combination React/Redux is ubiquitous</li><li>Redux is <strong>framework agnostic</strong>. Learn it once, use it everywhere (Vue JS, Angular)</li></ul><p>Learning Redux or an equivalent state management library is a must.</p><p>Another truth is: real world JavaScript applications make always use of a state management library.</p><p>State is <strong>so pervasive and hard that state management in JS is still an unsolved problem</strong>.</p><p>The amount of libraries that come out almost daily is a proof.</p><p>Redux is just a library among the others, yet it is one of the most important.</p><p>Will Redux disappear in the future? Maybe.</p><p>But the <strong>patterns will stick forever</strong>.</p><p>Would you neglet learning OOP with PHP just because PHP is not “trendy” anymore?</p><p>I advise not doing so.</p><p>The same with Redux.</p><p>You should <strong>learn the patterns for managing UI state because they will be invaluable in your career</strong>.</p><h2><span id="react-redux-tutorial-should-i-use-redux">React Redux tutorial: should I use Redux?</span></h2><p>Using Redux or Flux (or Mobx) for state management is up to you.</p><p>Maybe you need none of these libraries. They have a cost: they add another layer of abstraction to your application.</p><p>But I prefer thinking about <strong>Redux as an investment</strong>, not as a cost.</p><p>Another common question for Redux beginners is: how do you know <strong>when you’re ready to use Redux in your application</strong>?</p><p>If you think about it there is no rule of thumb for determining when you do need <strong>Redux for managing the state</strong>.</p><p>Redux also offers a lot of convenience for a JavaScript developer. Debugging, action replaying. And much more.</p><p>When I start a new React project I’m always tempted to add Redux straight away. But …</p><p>As developers <strong>we overengineer our code automatically</strong>.</p><p>So, when should you add Redux to a project?</p><p><strong>Before picking Redux take your time to explore alternative patterns</strong>. In particular try to get the most out of React’s state and props.</p><p>Dave Ceddia has a nice writeup with a lot of great insights for using <a href="https://daveceddia.com/context-api-vs-redux/" target="_blank" rel="noopener">children props as an alternative before reaching for Redux</a>.</p><p>And don’t forget that a React project can be easily refactored to include Redux later.</p><p>What I found is that you should <strong>consider using Redux</strong> when:</p><ul><li>multiple React components needs to access the same state but do not have any parent/child relationship</li><li>you start to feel awkward passing down the state to multiple components with props</li></ul><p>If that makes still no sense for you do not worry, I felt the same.</p><p>Dan Abramov says “Flux libraries are like glasses: you’ll know when you need them.”</p><p>And in fact it worked like that for me.</p><p>Before going further take your time to understand what problem does Redux solve and whether you’re motivated or not to learn it.</p><p>Be aware that Redux is not useful for smaller apps. It really shines in bigger ones. Anyway, learning Redux even if you’re not involved in something big wouldn’t harm anyone.</p><p>In the next section we’ll start building a proof of concept to introduce:</p><ul><li>the Redux fundamental principles</li><li>Redux alongside with React</li></ul><h2><span id="react-redux-tutorial-getting-to-know-the-redux-store">React Redux tutorial: getting to know the Redux store</span></h2><p>Actions. Reducers. I kind of knew about them. But one thing wasn’t clear to me: <strong>how were all the moving parts glued together</strong>?</p><p>Were there some minions or what?</p><p>In Redux there are no minions (unfortunately).</p><p>The <strong>store orchestrates all the moving parts in Redux</strong>. Repeat with me: the <strong>store</strong>.</p><p>The store in Redux is like the human brain: it’s kind of magic.</p><p>The <strong>Redux store is fundamental</strong>: the <strong>state of the whole application</strong> lives <strong>inside the store</strong>.</p><p>So to start playing with Redux we should <strong>create a store for wrapping up the state</strong>.</p><p>Move into your React development environment and install Redux:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i redux --save-dev</span><br></pre></td></tr></table></figure><p>Create a directory for the store:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/store</span><br></pre></td></tr></table></figure><p>Create a new file named <code>index.js</code> in <code>src/js/store</code> and finally initialize the store:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">"../reducers/index"</span>;</span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>createStore is the function for creating the Redux store.</p><p>createStore takes a reducer as the first argument, rootReducer in our case.</p><p>You may also pass an initial state to createStore. But most of the times you don’t have to. Passing an initial state is useful for server side rendering. Anyway, <strong>the state comes from reducers</strong>.</p><blockquote><p>NOTE: see <a href="https://stackoverflow.com/questions/36619093/why-do-i-get-reducer-returned-undefined-during-initialization-despite-pr" target="_blank" rel="noopener">Reducer returned undefined during initialization</a></p></blockquote><p>So what does exactly a reducer do?</p><p>In Redux <strong>reducers produce the state</strong>. The state is not something you create by hand.</p><p>Armed with that knowledge let’s move on to our first Redux reducer.</p><h2><span id="react-redux-tutorial-getting-to-know-redux-reducers">React Redux tutorial: getting to know Redux reducers</span></h2><p>While an initial state is useful for <a href="https://redux.js.org/docs/recipes/ServerRendering.html" target="_blank" rel="noopener">SSR</a>, in Redux <strong>the state must return entirely from reducers</strong>.</p><p>Cool but what’s a reducer?</p><p><strong>A reducer is just a Javascript function</strong>. A reducer <strong>takes two parameters: the current state</strong> and an <strong>action</strong> (more about actions soon).</p><p>The third principle of Redux says that the state is immutable and cannot change in place.</p><p>This is why the reducer must be pure. A pure function is one that returns the exact same output for the given input.</p><p>In plain React the local state changes in place with setState. In Redux you cannot do that.</p><p>Creating a reducer is not that hard. It’s a plain Javascript function with two parameters.</p><p>In our example we’ll be creating a <strong>simple reducer taking the initial state</strong> as the first parameter. As a <strong>second parameter</strong> we’ll provide <strong>action</strong>. As of now the reducer will do nothing than returning the initial state.</p><p>Create a directory for the root reducer:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/reducers</span><br></pre></td></tr></table></figure><p>Then create a new file named <code>index.js</code> in the <code>src/js/reducers</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/reducers/index.js</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> state;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><p>I promised to keep this guide as simple as possibile. That’s why our first reducer is a silly one: it returns the initial state without doing anything else.</p><p>Notice how the initial state is passed as a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" target="_blank" rel="noopener">default parameter</a>.</p><p>In the next section we’ll add an action to the mix. That’s where things will become interesting.</p><h2><span id="react-redux-tutorial-getting-to-know-redux-actions">React Redux tutorial: getting to know Redux actions</span></h2><p>Redux reducers are without doubt the most important concept in Redux. <strong>Reducers produce the state of the application</strong>.</p><p>But <strong>how does a reducer know when to produce the next state</strong>?</p><p>The second principle of Redux says the <strong>only way to change the state is by sending a signal to the store</strong>.This signal is an <strong>action. “Dispatching an action”</strong> is the process of sending out a signal.</p><p>Now, how do you change an immutable state? You won’t. The resulting state is a copy of the current state plus the new data.</p><p>That’s a lot to know.</p><p>The reassuring thing is that <strong>Redux actions are nothing more than Javascript objects</strong>. This is what an action looks like:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: 'ADD_ARTICLE',</span><br><span class="line">  payload: &#123; name: 'React Redux Tutorial', id: 1 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Every action needs a type property for describing how the state should change.</p><p>You can specify a payload as well. In the above example the payload is a new article. A reducer will add the article to the current state later.</p><p>It is a best pratice to <strong>wrap every action within a function</strong>. Such function is an <strong>action creator</strong>.</p><p>Let’s put everything together by creating a simple Redux action.</p><p>Create a directory for the actions:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/actions</span><br></pre></td></tr></table></figure><p>Then create a new file named <code>index.js</code> in <code>src/js/actions</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/actions/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addArticle = <span class="function"><span class="params">article</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">"ADD_ARTICLE"</span>, <span class="attr">payload</span>: article &#125;);</span><br></pre></td></tr></table></figure><p>So, the <strong>type property</strong> is nothing more than a string.</p><p>The reducer will use that string to determine how to calculate the next state.</p><p>Since strings are prone to typos and duplicates it’s <strong>better to have action types declared as constants</strong>.</p><p>This approach helps <strong>avoiding errors that will be difficult to debug</strong>.</p><p>Create a new directory:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/constants</span><br></pre></td></tr></table></figure><p>Then create a new file named <code>action-types.js</code> into the <code>src/js/constants</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/constants/action-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_ARTICLE = <span class="string">"ADD_ARTICLE"</span>;</span><br></pre></td></tr></table></figure><p>Now open up again <code>src/js/actions/index.js</code> and update the action to use action types:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/actions/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ADD_ARTICLE &#125; <span class="keyword">from</span> <span class="string">"../constants/action-types"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addArticle = <span class="function"><span class="params">article</span> =&gt;</span> (&#123; <span class="attr">type</span>: ADD_ARTICLE, <span class="attr">payload</span>: article &#125;);</span><br></pre></td></tr></table></figure><p>We’re one step closer to have a working Redux application. Let’s refactor our reducer!</p><h2><span id="react-redux-tutorial-refactoring-the-reducer">React Redux tutorial: refactoring the reducer</span></h2><p>Before moving forward let’s recap the main Redux concepts:</p><ul><li>the <strong>Redux store</strong> is like a brain: it’s in charge for <strong>orchestrating all the moving parts</strong> in Redux</li><li>the <strong>state of the application lives as a single, immutable object</strong> within the store</li><li>as soon as <strong>the store receives an action it triggers a reducer</strong></li><li>the <strong>reducer returns the next state</strong></li></ul><p>What’s a <strong>Redux reducer</strong> made of?</p><p>A reducer is a Javascript function taking <strong>two parameters</strong>: the <strong>state</strong> and the <strong>action</strong>.</p><p>A reducer function may have a <strong>switch statement</strong> (but I prefer using if).</p><p>The <strong>reducer calculates the next state depending on the action type</strong>. Moreover, <strong>it should return at least the initial state when no action type matches</strong>.</p><p>When the action type matches a case clause the <strong>reducer calculates the next state</strong> and <strong>returns a new object</strong>. Here’s an excerpt of the code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">articles</span>: [...state.articles, action.payload] &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>The reducer we created in the previous section does nothing than returning the initial state. Let’s fix that.</p><p>Open up <code>src/js/reducers/index.js</code> and update the reducer as follow:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_ARTICLE &#125; <span class="keyword">from</span> <span class="string">"../constants/action-types"</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      state.articles.push(action.payload);</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><p>We’re not done yet! With the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator" target="_blank" rel="noopener">spread operator</a> we can make our reducer even better:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ADD_ARTICLE &#125; <span class="keyword">from</span> <span class="string">"../constants/action-types"</span>;</span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">articles</span>: [...state.articles, action.payload] &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><p>In the example above the initial state is left utterly untouched.</p><p>The initial articles array doesn’t change in place.</p><p>The initial state object doesn’t change as well. The resulting state is a copy of the initial state.</p><p>There are two key points for <strong>avoiding mutations in Redux</strong>:</p><ul><li><a href="https://egghead.io/lessons/react-redux-avoiding-array-mutations-with-concat-slice-and-spread" target="_blank" rel="noopener">Using concat(), slice(), and …spread</a> for arrays</li><li><a href="https://egghead.io/lessons/react-redux-avoiding-object-mutations-with-object-assign-and-spread" target="_blank" rel="noopener">Using Object.assign() and …spread</a> for objects</li></ul><p>The <strong>object spread operator</strong> is still in stage 3. Install <a href="https://babeljs.io/docs/plugins/transform-object-rest-spread/" target="_blank" rel="noopener">Object rest spread transform</a> to <strong>avoid a SyntaxError Unexpected token</strong> when using the object spread operator in Babel:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev babel-plugin-transform-object-rest-spread</span><br></pre></td></tr></table></figure><p>Open up <code>.babelrc</code> and update the configuration:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"react"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"transform-object-rest-spread"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Redux protip</strong>: the reducer will grow as your app will become bigger. You can split a big reducer into separate functions and combine them with <a href="https://redux.js.org/docs/api/combineReducers.html" target="_blank" rel="noopener">combineReducers</a></p><p>In the next section we’ll play with Redux from the console. Hold tight!</p><h2><span id="react-redux-tutorial-redux-store-methods">React Redux tutorial: Redux store methods</span></h2><p>This will be super quick, I promise.</p><p>I want you to play with the brower’s console for gaining a quick understanding of how Redux works.</p><p>Redux itself is a small library (2KB). The <a href="https://redux.js.org/docs/api/Store.html" target="_blank" rel="noopener">Redux store exposes a simple API</a> for managing the state. The most important methods are:</p><ul><li><a href="https://redux.js.org/docs/api/Store.html#getState" target="_blank" rel="noopener">getState</a> for accessing the current state of the application</li><li><a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a> for dispatching an action</li><li><a href="https://redux.js.org/docs/api/Store.html#subscribe" target="_blank" rel="noopener">subscribe</a> for listening on state changes</li></ul><p>We will play in the brower’s console with the above methods.</p><p>To do so we have to export as global variables the store and the action we created earlier.</p><p>Create <code>src/js/index.js</code> and update the file with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"../js/store/index"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addArticle &#125; <span class="keyword">from</span> <span class="string">"../js/actions/index"</span>;</span><br><span class="line"><span class="built_in">window</span>.store = store;</span><br><span class="line"><span class="built_in">window</span>.addArticle = addArticle;</span><br></pre></td></tr></table></figure><p>Open up <code>src/index.js</code> as well, clean up its content and update it as follows:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">"./js/index"</span></span><br></pre></td></tr></table></figure><p>Now run webpack dev server (or Parcel) with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>head over <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> and open up the console with F12.</p><p>Since we’ve exported the store as a global variable we can access its methods. Give it a try!</p><p>Start off by <strong>accessing the current state</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getState()</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">articles</span>: <span class="built_in">Array</span>(<span class="number">0</span>)&#125;</span><br></pre></td></tr></table></figure><p>Zero articles. In fact we haven’t update the initial state yet.</p><p>To make things interesting we can listen for state updates with subscribe.</p><p>The <strong>subscribe method accepts a callback that will fire whenever an action is dispatched</strong>. Dispatching an action means notifying the store that we want to change the state.</p><p>Register the callback with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.subscribe(() =&gt; console.log('Look ma, Redux!!'))</span><br></pre></td></tr></table></figure><p>To <strong>change the state in Redux we need to dispatch an action</strong>. To dispatch an action you have to call the <a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a> method.</p><p>We have one action at our disposal: addArticle for adding a new item to the state.</p><p>Let’s dispatch the action with:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch( addArticle(&#123; <span class="attr">name</span>: <span class="string">'React Redux Tutorial for Beginners'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;) )</span><br></pre></td></tr></table></figure><p>Right after running the above code you should see:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Look ma, Redux!!</span><br></pre></td></tr></table></figure><p>To verify that the state changed run again:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.getState()</span><br></pre></td></tr></table></figure><p>The output should be:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">articles</span>: <span class="built_in">Array</span>(<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure><p>And that’s it. This is Redux in its simplest form.</p><p>Was that difficult?</p><p>Take your time to explore these three Redux methods as an exercise. Play with them from the console:</p><ul><li><a href="https://redux.js.org/docs/api/Store.html#getState" target="_blank" rel="noopener">getState</a> for <strong>accessing the current state</strong> of the application</li><li><a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a> for <strong>dispatching an action</strong></li><li><a href="https://redux.js.org/docs/api/Store.html#subscribe" target="_blank" rel="noopener">subscribe</a> for <strong>listening on state changes</strong></li></ul><p>That’s everything you need to know for getting started with Redux.</p><p>Once you feel confident head over the next section. We’ll go straight to connecting React with Redux!</p><h2><span id="react-redux-tutorial-connecting-react-with-redux">React Redux tutorial: connecting React with Redux</span></h2><p>After learning Redux I realized it wasn’t so complex.</p><p>I knew how to access the current state with <a href="https://redux.js.org/docs/api/Store.html#getState" target="_blank" rel="noopener">getState</a>.</p><p>I knew how to dispatch an action with <a href="https://redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="noopener">dispatch</a></p><p>I knew how to listen for state changes with <a href="https://redux.js.org/docs/api/Store.html#subscribe" target="_blank" rel="noopener">subscribe</a></p><p>Yet I didn’t know how to couple React and Redux together.</p><p>I was asking myself: should I call getState within a React component? How do I dispatch an action from a React component? And so on.</p><p>Redux on its own is framework agnostic. You can use it with vanilla Javascript. Or with Angular. Or with React. There are bindings for joining together Redux with your favorite framework/library.</p><p>For React there is <a href="https://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="noopener">react-redux</a>.</p><p>Before moving forward install <a href="https://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="noopener">react-redux</a> by running:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react-redux --save-dev</span><br></pre></td></tr></table></figure><p>To demonstrate how React and Redux work together we’ll build a super simple application. The application is made of the following components:</p><ul><li>an App component</li><li>a List component for displaying articles</li><li>a Form component for adding new articles</li></ul><p>(The application is a toy and it does nothing serious other than displaying a list and a form for adding new items. Nonetheless it’s still a good starting point for learning Redux)</p><h2><span id="react-redux-tutorial-react-redux">React Redux tutorial: react-redux</span></h2><p><a href="https://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="noopener">react-redux</a> is a Redux binding for React. It’s a small library for connecting Redux and React in an efficient way.</p><p>The most important method you’ll work with is connect</p><p>What does react-redux’s connect do? Unsurprisingly it <a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options" target="_blank" rel="noopener">connects</a> a React component with the Redux store.</p><p>You will use <strong>connect</strong> with two or three arguments depending on the use case. The fundamental things to know are:</p><ul><li>the mapStateToProps function</li><li>the mapDispatchToProps function</li></ul><p><strong>What does mapStateToProps do</strong> in react-redux? mapStateToProps does exactly what its name suggests: it <strong>connects a part of the Redux state</strong> to the <a href="https://reactjs.org/docs/components-and-props.html" target="_blank" rel="noopener">props of a React component</a>. By doing so a connected React component will have access to the exact part of the store it needs.</p><p><strong>What does mapDispatchToProps</strong> do in react-redux? mapDispatchToProps does something similar, but for actions. <strong>mapDispatchToProps connects Redux actions to React props</strong>. This way a connected React component will be able to dispatch actions.</p><p>Is everything clear? If not, stop and take your time to re-read the guide. I know it’s a lot to learn and it requires time. Don’t worry if you don’t get Redux right know. It will click sooner or later.</p><p>In the next section we’ll finally get our hands dirty!</p><h2><span id="react-redux-tutorial-app-component-and-redux-store">React Redux tutorial: App component and Redux store</span></h2><p>We saw that mapStateToProps connects a portion of the Redux state to the props of a React component. You may wonder: is this enough for connecting Redux with React? No, it’s not.</p><p>To start off <strong>connecting Redux with React we’re going to use [Provider[(<a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store" target="_blank" rel="noopener">https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store</a>)</strong>.</p><p><a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#provider-store" target="_blank" rel="noopener">Provider</a> is an high order component coming from react-redux.</p><p>Using layman’s terms, Provider wraps up your React application and makes it aware of the entire Redux’s store.</p><p>Why so? We saw that in Redux the store manages everything. React must talk to the store for accessing the state and dispatching actions.</p><p>Enough theory.</p><p>Open up <code>src/js/index.js</code>, wipe out everything and update the file with the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store/index"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./components/App"</span>;</span><br><span class="line">render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("app")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>You see? Provider wraps up your entire React application. Moreover it gets the store as a prop.</p><p>Now let’s create the <strong>App</strong> component since we’re requiring it. It’s nothing special: App should import a List component and render itself.</p><p>Create a directory for holding the components:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p src/js/components</span><br></pre></td></tr></table></figure><p>and a new file named <code>App.js</code> inside <code>src/js/components</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/components/App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./List"</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"row mt-5"</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">"col-md-4 offset-md-1"</span>&gt;</span><br><span class="line">    &lt;h2&gt;Articles&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;List /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>Take moment and look at the component without the markup:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./List"</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">      &lt;List /&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>then move on to createing <strong>List</strong>.</p><h2><span id="react-redux-tutorial-list-component-and-redux-state">React Redux tutorial: List component and Redux state</span></h2><p>We have done nothing special so far.</p><p>But our new component, List, will interact with the Redux store.</p><p>A brief recap: the key for connecting a React component with Redux is <a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options" target="_blank" rel="noopener">connect</a>.</p><p>Connect takes at least one argument.</p><p>Since we want List to get a list of articles it’s a matter of connecting state.articleswith the component. How? With <strong>mapStateToProps</strong>.</p><p>Create a new file named <code>List.js</code> inside <code>src/js/components</code>. It should look like the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/components/List.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">articles</span>: state.articles &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> ConnectedList = <span class="function">(<span class="params">&#123; articles &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;ul className=<span class="string">"list-group list-group-flush"</span>&gt;</span><br><span class="line">    &#123;articles.map(<span class="function"><span class="params">el</span> =&gt;</span> (</span><br><span class="line">      &lt;li className=<span class="string">"list-group-item"</span> key=&#123;el.id&#125;&gt;</span><br><span class="line">        &#123;el.title&#125;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    ))&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> List = connect(mapStateToProps)(ConnectedList);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br></pre></td></tr></table></figure><p>The List component receives the prop <code>articles</code> which is a copy of the <code>articles</code> array. Such array lives inside the Redux state we created earlier. It comes from the reducer:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  articles: []</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> rootReducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_ARTICLE:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, <span class="attr">articles</span>: [...state.articles, action.payload] &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Then it’s a matter of using the prop inside JSX for generating a list of articles:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;articles.map(<span class="function"><span class="params">el</span> =&gt;</span> (</span><br><span class="line">  &lt;li className=<span class="string">"list-group-item"</span> key=&#123;el.id&#125;&gt;</span><br><span class="line">    &#123;el.title&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">))&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>React protip</strong>: take the habit of validating props with <a href="https://reactjs.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">PropTypes</a></p></blockquote><p>Finally the component gets exported as List. List is the result of connecting the stateless component ConnectedList with the Redux store.</p><p>A stateless component does not have its own local state. Data gets passed to it as props</p><p>Still confused? I was too. Understanding how connect works will take some time. Fear not, the road to learn Redux is paved with “ah-ha” moments.</p><p>I suggest taking a break for exploring both connect and mapStateToProps.</p><p>Once you’re confident about them head over the next section!</p><h2><span id="react-redux-tutorial-form-component-and-redux-actions">React Redux tutorial: Form component and Redux actions</span></h2><p>The Form component we’re going to create is a bit more complex than List. It’s a form for adding new items to our application.</p><p>Plus it is a <strong>stateful component</strong>.</p><p>A stateful component in React is a component carrying its own local state</p><p>A stateful component? “Valentino, we’re talking about Redux for managing the state! Why on earth would you give Form its own local state??”</p><p><strong>Even when using Redux it is totally fine to have stateful components</strong>.</p><p>Not every piece of the application’s state should go inside Redux.</p><p>In this example I don’t want any other component to be aware of the Form local state.</p><p>And that’s perfectly fine.</p><p>What does the component do?</p><p>The component contains some logic for updating the local state upon a form submission.</p><p>Plus it receives a Redux action as prop. This way it can update the global state by dispatching the addArticle action.</p><p>Create a new file named <code>Form.js</code> inside <code>src/js/components</code>. It should look like the following:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/js/components/Form.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> uuidv1 <span class="keyword">from</span> <span class="string">"uuid"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addArticle &#125; <span class="keyword">from</span> <span class="string">"../actions/index"</span>;</span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    addArticle: <span class="function"><span class="params">article</span> =&gt;</span> dispatch(addArticle(article))</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectedForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      title: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; [event.target.id]: event.target.value &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> id = uuidv1();</span><br><span class="line">    <span class="keyword">this</span>.props.addArticle(&#123; title, id &#125;);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">title</span>: <span class="string">""</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;div className=<span class="string">"form-group"</span>&gt;</span><br><span class="line">          &lt;label htmlFor=<span class="string">"title"</span>&gt;Title&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input</span></span><br><span class="line"><span class="regexp">            type="text"</span></span><br><span class="line"><span class="regexp">            className="form-control"</span></span><br><span class="line"><span class="regexp">            id="title"</span></span><br><span class="line"><span class="regexp">            value=&#123;title&#125;</span></span><br><span class="line"><span class="regexp">            onChange=&#123;this.handleChange&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button type="submit" className="btn btn-success btn-lg"&gt;</span></span><br><span class="line"><span class="regexp">          SAVE</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const Form = connect(null, mapDispatchToProps)(ConnectedForm);</span></span><br><span class="line"><span class="regexp">export default Form;</span></span><br></pre></td></tr></table></figure><p>What can I say about the component? Besides <strong>mapDispatchToProps</strong> and <strong>connect</strong> it’s standard React stuff.</p><p><strong>mapDispatchToProps connects Redux actions to React props</strong>. This way a connected component is able to dispatch actions.</p><p>You can see how the action gets dispatched in the handleSubmit method:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> &#123; title &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> id = uuidv1();</span><br><span class="line">    <span class="keyword">this</span>.props.addArticle(&#123; title, id &#125;); <span class="comment">// Relevant Redux part!!</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Finally the component gets exported as Form. Form is the result of connecting ConnectedForm with the Redux store.</p><p>Side note: the first argument for connect must be <code>null</code> when mapStateToProps is absent like in the Form example. Otherwise you’ll get <code>TypeError: dispatch is not a function</code>.</p><p>Our components are all set!</p><p>Update App to include the Form component:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./List"</span>;</span><br><span class="line"><span class="keyword">import</span> Form <span class="keyword">from</span> <span class="string">"./Form"</span>;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div className=<span class="string">"row mt-5"</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">"col-md-4 offset-md-1"</span>&gt;</span><br><span class="line">      &lt;h2&gt;Articles&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;List /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div className="col-md-4 offset-md-1"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;h2&gt;Add a new article&lt;/</span>h2&gt;</span><br><span class="line">      &lt;Form /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>Install uuid with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i uuid --save-dev</span><br></pre></td></tr></table></figure><p>Now run webpack(or Parcel) with:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>and head over to <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>You should see the following working POC:</p><p><img src="/img/react/react-redux-demo.png" alt="article"></p><p>Nothing fancy but still useful for showing React and Redux at work!</p><p>The <strong>List component on the left is connected to the Redux store</strong>. It will re-render whenever you add a new item.</p><p><img src="/img/react/react-redux-tutorial-demo-gif.gif" alt="redux-action"></p><p>Whoaaa!</p><h2><span id="react-redux-tutorial-wrapping-up">React Redux tutorial: wrapping up</span></h2><p>I hope you’ll learn something from this guide. I tried my best to keep things as simple as possibile. I would love to hear your feedback in the comments below!</p><p>Redux has a lot of boilerplate and moving parts. Don’t get discouraged. Pick Redux, play with it and take your time to absorb all the concepts.</p><p>I went from zero to understanding Redux by small steps. You can do it too!</p><p>Also, take your time to investigate why and if you should use Redux in your application.</p><p>Either way think of Redux as an investment: learning it is 100% worthwile.</p><h2><span id="react-redux-tutorial-redux-devtools">React Redux tutorial: Redux DevTools</span></h2><p>You will find the interesting tool from <a href="https://cloud.githubusercontent.com/assets/7957859/18002950/aacb82fc-6b93-11e6-9ae9-609862c18302.png" target="_blank" rel="noopener">here</a>.</p><p>It’s very useful for inspect redux concept like <strong>Action</strong>, <strong>State</strong>, and can always replay the actions!</p><p><img src="/img/react/redux-devTools.png" alt="redux-devtool"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Simplest &lt;strong&gt;React Redux tutorial&lt;/strong&gt; I wish I had when I started learning &lt;a href=&quot;https://www.valentinog.com/blog/react-redux-tutorial-beginners/#React_Redux_tutorial_what_you_will_learn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/react/redux-react-tutorial-beginner-2018.png&quot; alt=&quot;redux&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react, redux" scheme="http://galudisu.info/tags/react-redux/"/>
    
  </entry>
  
</feed>
