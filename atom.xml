<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>简单易懂の现代魔法</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://galudisu.info/"/>
  <updated>2020-08-26T12:43:17.997Z</updated>
  <id>http://galudisu.info/</id>
  
  <author>
    <name>barudisshu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gentoo+Enlightenment+Systemd 安装记录</title>
    <link href="http://galudisu.info/2020/08/26/gentoo/Gentoo-Enlightenment-Systemd/"/>
    <id>http://galudisu.info/2020/08/26/gentoo/Gentoo-Enlightenment-Systemd/</id>
    <published>2020-08-26T01:30:07.000Z</published>
    <updated>2020-08-26T12:43:17.997Z</updated>
    
    <content type="html"><![CDATA[<p>Enlightenment 是一款重新思考设计的linux桌面系统。</p><a id="more"></a><p>不多废话，首先上图。</p><p><img src="/img/gentoo/Gentoo_Env_1.png" alt="gentoo env"></p><p>自由切换主题后。</p><p><img src="/img/gentoo/Gentoo_Env_2.png" alt="gentoo env"></p><p>在安装桌面之前，首先要安装好Gentoo系统环境。</p><p><code>make.conf</code> 配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># These settings were set by the catalyst build script that automatically</span><br><span class="line"># built this stage.</span><br><span class="line"># Please consult /usr/share/portage/config/make.conf.example for a more</span><br><span class="line"># detailed example.</span><br><span class="line">COMMON_FLAGS=&quot;-march=native -O2 -pipe&quot;</span><br><span class="line">MAKEOPTS=&quot;-j2&quot;</span><br><span class="line">CFLAGS=&quot;$&#123;COMMON_FLAGS&#125;&quot;</span><br><span class="line">CXXFLAGS=&quot;$&#123;COMMON_FLAGS&#125;&quot;</span><br><span class="line">FCFLAGS=&quot;$&#123;COMMON_FLAGS&#125;&quot;</span><br><span class="line">FFLAGS=&quot;$&#123;COMMON_FLAGS&#125;&quot;</span><br><span class="line"></span><br><span class="line"># NOTE: This stage was built with the bindist Use flag enabled</span><br><span class="line">PORTDIR=&quot;/var/db/repos/gentoo&quot;</span><br><span class="line">DISTDIR=&quot;/var/cache/distfiles&quot;</span><br><span class="line">PKGDIR=&quot;/var/cache/binpkgs&quot;</span><br><span class="line"></span><br><span class="line">DARKELF_FEATURES=&quot;postmerge_distclean&quot;</span><br><span class="line"></span><br><span class="line"># This sets the language of build output to English.</span><br><span class="line"># Please keep this setting intact when reporting bugs.</span><br><span class="line">LC_MESSAGES=C</span><br><span class="line"></span><br><span class="line">INPUT_DEVICES=&quot;libinput synaptics&quot;</span><br><span class="line"></span><br><span class="line">VIDEO_CARDS=&quot;vmware&quot;</span><br><span class="line"></span><br><span class="line">ACCEPT_LICENSE=&quot;*&quot;</span><br><span class="line"></span><br><span class="line">PYTHON_TARGETS=&quot;python3_6 python3_7 python3_8 python3_9&quot;</span><br><span class="line"></span><br><span class="line">USE=&quot;icu bindist mmx sse sse2 systemd llvm wayland xwayland X drm eet fontconfig infinality xml egl gles gles2 gles2-only alas glib gstreamer harfbuzz ico jpeg2k pulseaudio sound svg system-lz4 gif png raw openjpeg udev alsa meson freetype -harfbuzz&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GENTOO_MIRRORS=&quot;https://mirrors.tuna.tsinghua.edu.cn/gentoo&quot;</span><br></pre></td></tr></table></figure><p>自动unmask 生成文件 <code>/etc/portage/packase.use/zz-autounmask</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># package.use# required by app-misc/neofetch-6.0.0::gentoo[X]</span><br><span class="line"># required by neofetch (argument)</span><br><span class="line">&gt;=www-client/w3m-0.5.3_p20180125 imlib</span><br><span class="line"># required by x11-drivers/xf86-video-vmware-13.3.0::gentoo</span><br><span class="line"># required by x11-base/xorg-drivers-1.20-r2::gentoo[video_cards_vmware]</span><br><span class="line"># required by x11-base/xorg-server-1.20.8-r1::gentoo[xorg]</span><br><span class="line"># required by x11-drivers/xf86-input-libinput-0.30.0::gentoo</span><br><span class="line">&gt;=x11-libs/libdrm-2.4.102 libkms</span><br><span class="line"># required by x11-drivers/xf86-video-vmware-13.3.0::gentoo</span><br><span class="line"># required by x11-base/xorg-drivers-1.20-r2::gentoo[video_cards_vmware]</span><br><span class="line"># required by x11-base/xorg-server-1.20.8-r1::gentoo[xorg]</span><br><span class="line"># required by x11-drivers/xf86-input-libinput-0.30.0::gentoo</span><br><span class="line">&gt;=media-libs/mesa-20.0.8 xa</span><br><span class="line"># required by net-p2p/epour-9999::enlightenment-live</span><br><span class="line"># required by @enlightenment-apps-9999 (argument)</span><br><span class="line">&gt;=net-libs/libtorrent-rasterbar-1.2.6 python</span><br><span class="line"># required by x11-misc/xdg-utils-1.1.3_p20200220::gentoo</span><br><span class="line"># required by net-p2p/epour-9999::enlightenment-live</span><br><span class="line"># required by @enlightenment-apps-9999 (argument)</span><br><span class="line">&gt;=app-text/xmlto-0.0.28-r3 text</span><br><span class="line"># required by net-libs/libtorrent-rasterbar-1.2.6::gentoo[python]</span><br><span class="line"># required by net-p2p/epour-9999::enlightenment-live</span><br><span class="line"># required by @enlightenment-apps-9999 (argument)</span><br><span class="line">&gt;=dev-libs/boost-1.72.0-r1 python</span><br></pre></td></tr></table></figure><p>因为使用的是live版。就是未稳定的测试版。添加overlay.</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root #layman -a enlightenment-live</span><br></pre></td></tr></table></figure><p>如果你仅需要基本功能。则安装如下：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root #emerge --ask --autounmask-write @enlightenment-core-9999</span><br></pre></td></tr></table></figure><p>然后在<code>/etc/portage/package.accept_keywords</code>添加mask的包信息。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> required by =x11-wm/enlightenment-9999 (argument)</span></span><br><span class="line">=x11-wm/enlightenment-9999 **</span><br><span class="line">=x11-terms/terminology-9999 **</span><br><span class="line">=dev-libs/efl-9999 **</span><br></pre></td></tr></table></figure><p>因为是在虚拟机中安装，需要添加vmware工具。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> required by vmware</span></span><br><span class="line">=app-emulation/open-vm-tools-11.1.0 **</span><br></pre></td></tr></table></figure><p>如果你还想体验enlightenment自带的丰富app。则安装如下：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root #emerge --ask --autounmask-write @enlightenment-apps-9999</span><br></pre></td></tr></table></figure><p>安装过程中会发现问题比较多，添加mask包信息。</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Needed <span class="keyword">for</span> the apps</span></span><br><span class="line">=dev-python/python-efl-9999 **</span><br><span class="line"><span class="meta">#</span><span class="bash"> Various apps</span></span><br><span class="line">=net-irc/express-9999 **</span><br><span class="line">=dev-util/enventor-9999 **</span><br><span class="line">=app-editors/ecrire-9999 **</span><br><span class="line">=media-gfx/ephoto-9999 **</span><br><span class="line">=app-misc/equate-9999 **</span><br><span class="line">=dev-vcs/egitu-9999 **</span><br><span class="line">=media-gfx/eluminance-9999 **</span><br><span class="line">=x11-misc/entrance-9999 **</span><br><span class="line"><span class="meta">#</span><span class="bash"> required by epour (argument)</span></span><br><span class="line">=net-p2p/epour-9999 **</span><br><span class="line"><span class="meta">#</span><span class="bash"> required by net-p2p/epour-9999::enlightenment-live</span></span><br><span class="line">=net-libs/rb_libtorrent-1.0.10 **</span><br><span class="line">=net-misc/econnman-9999 **</span><br><span class="line">=dev-util/espionage-9999 **</span><br><span class="line">=media-video/rage-9999 **</span><br><span class="line">=sys-process/evisum-9999 **</span><br><span class="line">media-libs/gstreamer:1.0 **</span><br></pre></td></tr></table></figure><p>再重新执行一次安装即可。</p><p>需要注意的是，内存一定要足够。！！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Enlightenment 是一款重新思考设计的linux桌面系统。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gentoo,linux" scheme="http://galudisu.info/tags/gentoo-linux/"/>
    
  </entry>
  
  <entry>
    <title>基于scala-swing构建的推箱子游戏</title>
    <link href="http://galudisu.info/2020/06/24/game/sokoban/"/>
    <id>http://galudisu.info/2020/06/24/game/sokoban/</id>
    <published>2020-06-24T07:50:03.000Z</published>
    <updated>2020-06-24T11:35:23.681Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/game/sokoban/sokoban-screenshot.png" alt="game"></p><a id="more"></a><p>推箱子游戏属于一种解谜问题。开发思路比较简单，并且有比较正规定义。</p><h2><span id="首先定义地图">首先定义地图</span></h2><p>地图格式可以参考<a href="http://www.sokobano.de/wiki/index.php?title=Level_format" target="_blank" rel="noopener">这里</a></p><h2><span id="建立地图文件">建立地图文件</span></h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    #####</span><br><span class="line">    #   #</span><br><span class="line">    #$  #</span><br><span class="line">  ###  $##</span><br><span class="line">  #  $ $ #</span><br><span class="line">### # ## #   ######</span><br><span class="line">#   # ## #####  ..#</span><br><span class="line"># $  $          ..#</span><br><span class="line">##### ### #@##  ..#</span><br><span class="line">    #     #########</span><br><span class="line">    #######</span><br><span class="line"></span><br><span class="line">############</span><br><span class="line">#..  #     ###</span><br><span class="line">#..  # $  $  #</span><br><span class="line">#..  #$####  #</span><br><span class="line">#..    @ ##  #</span><br><span class="line">#..  # #  $ ##</span><br><span class="line">###### ##$ $ #</span><br><span class="line">  # $  $ $ $ #</span><br><span class="line">  #    #     #</span><br><span class="line">  ############</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>更多内容可以参考<a href="https://github.com/barudisshu/alg-fpp/tree/master/game/sokobanvl" target="_blank" rel="noopener">源码</a>实现。</p><h2><span id="引入依赖">引入依赖</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val scalaSwing = &quot;org.scala-lang.modules&quot; %% &quot;scala-swing&quot; % scalaSwingV</span><br></pre></td></tr></table></figure><h2><span id="构建元素">构建元素</span></h2><p>包括墙壁、玩家、箱子等。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">WorldElement</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Box</span>(<span class="params"></span>)                <span class="keyword">extends</span> <span class="title">WorldElement</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">BoxOnGoalSquare</span>(<span class="params"></span>)    <span class="keyword">extends</span> <span class="title">WorldElement</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Player</span>(<span class="params"></span>)             <span class="keyword">extends</span> <span class="title">WorldElement</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">PlayerOnGoalSquare</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">WorldElement</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Floor</span>(<span class="params"></span>)              <span class="keyword">extends</span> <span class="title">WorldElement</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">GoalSquare</span>(<span class="params"></span>)         <span class="keyword">extends</span> <span class="title">WorldElement</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Wall</span>(<span class="params"></span>)               <span class="keyword">extends</span> <span class="title">WorldElement</span></span></span><br></pre></td></tr></table></figure><h2><span id="构建世界">构建世界</span></h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable.<span class="type">ListBuffer</span></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"><span class="keyword">import</span> scala.swing.<span class="type">Publisher</span></span><br><span class="line"><span class="keyword">import</span> scala.swing.event.<span class="type">Event</span></span><br><span class="line"><span class="keyword">import</span> scala.swing.event.<span class="type">Key</span>._</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayerMove</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">PlayerHint</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">World</span> <span class="keyword">extends</span> <span class="title">Publisher</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">type</span> <span class="title">Level</span> </span>= <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">WorldElement</span>]]</span><br><span class="line">  <span class="keyword">val</span> levels: <span class="type">ListBuffer</span>[<span class="type">Level</span>] = <span class="type">ListBuffer</span>[<span class="type">Level</span>]()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MAX_WIDTH</span>  = <span class="number">19</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">MAX_HEIGHT</span> = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentLevel: <span class="type">Level</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> manX = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> manY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> toGoX = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> toGoY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nb_move = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">loadLevel</span></span>(num: <span class="type">Int</span>) &#123;</span><br><span class="line">    currentLevel = copyMap(levels(num))</span><br><span class="line">    nb_move = <span class="number">0</span></span><br><span class="line">    publish(<span class="type">PlayerMove</span>())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">onKeyPress</span></span>(keyCode: <span class="type">Value</span>) &#123;</span><br><span class="line">    keyCode <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Left</span>  =&gt; move(<span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Right</span> =&gt; move(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Up</span>    =&gt; move(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Down</span>  =&gt; move(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">case</span> _     =&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fromString</span></span>(stringWorld: <span class="type">String</span>): <span class="type">Level</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> level             = <span class="type">Array</span>.ofDim[<span class="type">WorldElement</span>](<span class="type">MAX_WIDTH</span>, <span class="type">MAX_HEIGHT</span>)</span><br><span class="line">    <span class="keyword">val</span> listStringMap     = stringWorld.toList</span><br><span class="line">    <span class="keyword">var</span> wEl: <span class="type">WorldElement</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> x, y              = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- listStringMap.indices) &#123;</span><br><span class="line">      listStringMap(i) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> '#' =&gt; wEl = <span class="type">Wall</span>()</span><br><span class="line">        <span class="keyword">case</span> '.' =&gt; wEl = <span class="type">GoalSquare</span>()</span><br><span class="line">        <span class="keyword">case</span> '$' =&gt; wEl = <span class="type">Box</span>()</span><br><span class="line">        <span class="keyword">case</span> '@' =&gt; wEl = <span class="type">Player</span>()</span><br><span class="line">        <span class="keyword">case</span> '+' =&gt; wEl = <span class="type">PlayerOnGoalSquare</span>()</span><br><span class="line">        <span class="keyword">case</span> '*' =&gt; wEl = <span class="type">BoxOnGoalSquare</span>()</span><br><span class="line">        <span class="keyword">case</span> ' ' =&gt; wEl = <span class="type">Floor</span>()</span><br><span class="line">        <span class="keyword">case</span> '\n' =&gt;</span><br><span class="line">          y += <span class="number">1</span></span><br><span class="line">          x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">case</span> _ =&gt;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (wEl != <span class="literal">null</span>) &#123;</span><br><span class="line">        level(x)(y) = wEl</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        wEl = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    level</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">fromFile</span></span>(filePath: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> lines: <span class="type">ListBuffer</span>[<span class="type">String</span>] = <span class="type">ListBuffer</span>()</span><br><span class="line">    <span class="keyword">val</span> stream                    = <span class="type">Source</span>.fromResource(filePath)</span><br><span class="line">    <span class="keyword">for</span> (line &lt;- stream.getLines()) &#123;</span><br><span class="line">      line <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">""</span> =&gt;</span><br><span class="line">          levels += fromString(lines.mkString(<span class="string">"\n"</span>))</span><br><span class="line">          lines = <span class="type">ListBuffer</span>()</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; lines += line</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">locateMan</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">      i &lt;- currentLevel.indices</span><br><span class="line">      j &lt;- currentLevel(i).indices</span><br><span class="line">    &#125; &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentLevel(i)(j).isInstanceOf[<span class="type">Player</span>]) &#123;</span><br><span class="line">        manX = i</span><br><span class="line">        manY = j</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">move</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) &#123;</span><br><span class="line">    locateMan()</span><br><span class="line">    toGoX = x</span><br><span class="line">    toGoY = y</span><br><span class="line">    nb_move += <span class="number">1</span></span><br><span class="line">    currentLevel(manX + toGoX)(manY - toGoY) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Box</span>             =&gt; moveBox()</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Floor</span>           =&gt; movePlayerToFloor()</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">GoalSquare</span>      =&gt; movePlayerToGoalSquare()</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">BoxOnGoalSquare</span> =&gt; moveBox()</span><br><span class="line">      <span class="keyword">case</span> _                  =&gt; nb_move -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    publish(<span class="type">PlayerMove</span>())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">moveBox</span></span>() &#123;</span><br><span class="line">    <span class="keyword">val</span> (x, y)               = nextCase(manX, manY)</span><br><span class="line">    <span class="keyword">val</span> (bhCrateX, bhCrateY) = nextCase(x, y)</span><br><span class="line">    currentLevel(bhCrateX)(bhCrateY) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Floor</span> =&gt;</span><br><span class="line">        currentLevel(bhCrateX)(bhCrateY) = <span class="type">Box</span>()</span><br><span class="line">        moveManToSpaceOrStorage(x, y)</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">GoalSquare</span> =&gt;</span><br><span class="line">        currentLevel(bhCrateX)(bhCrateY) = <span class="type">BoxOnGoalSquare</span>()</span><br><span class="line">        moveManToSpaceOrStorage(x, y)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">movePlayerToFloor</span></span>() &#123;</span><br><span class="line">    letSpaceOrStorage()</span><br><span class="line">    manX = manX + toGoX</span><br><span class="line">    manY = manY - toGoY</span><br><span class="line">    currentLevel(manX)(manY) = <span class="type">Player</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">movePlayerToGoalSquare</span></span>() &#123;</span><br><span class="line">    letSpaceOrStorage()</span><br><span class="line">    manX = manX + toGoX</span><br><span class="line">    manY = manY - toGoY</span><br><span class="line">    currentLevel(manX)(manY) = <span class="type">PlayerOnGoalSquare</span>()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">letSpaceOrStorage</span></span>() &#123;</span><br><span class="line">    currentLevel(manX)(manY) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Player</span> =&gt;</span><br><span class="line">        currentLevel(manX)(manY) = element.<span class="type">Floor</span>()</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">PlayerOnGoalSquare</span> =&gt;</span><br><span class="line">        currentLevel(manX)(manY) = <span class="type">GoalSquare</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">moveManToSpaceOrStorage</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) &#123;</span><br><span class="line">    currentLevel(x)(y) <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">Box</span> =&gt;</span><br><span class="line">        movePlayerToFloor()</span><br><span class="line">      <span class="keyword">case</span> _: <span class="type">BoxOnGoalSquare</span> =&gt;</span><br><span class="line">        movePlayerToGoalSquare()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">nextCase</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = &#123;</span><br><span class="line">    (x + toGoX, y - toGoY)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">copyMap</span></span>(originMap: <span class="type">Level</span>): <span class="type">Level</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> copyMap = <span class="type">Array</span>.ofDim[<span class="type">WorldElement</span>](<span class="type">MAX_WIDTH</span>, <span class="type">MAX_HEIGHT</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">      x &lt;- originMap.indices</span><br><span class="line">      y &lt;- originMap(x).indices</span><br><span class="line">    &#125; copyMap(x)(y) = originMap(x)(y)</span><br><span class="line">    copyMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="设计ui">设计UI</span></h2><p>比较简单，加载到地图元素后，匹配到元素直接画即可。我这里使用了Graphics2D直接画，如果有合适的图片元素，可以直接转BufferedImage。然后调用<code>g.drawImage</code>相对会更好看一些。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.&#123;<span class="type">Color</span>, <span class="type">Graphics2D</span>, <span class="type">RenderingHints</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.galudisu.game.<span class="type">World</span></span><br><span class="line"><span class="keyword">import</span> cn.galudisu.game.element._</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.swing.<span class="type">Panel</span></span><br><span class="line"><span class="keyword">import</span> scala.swing.<span class="type">Swing</span>._</span><br><span class="line"><span class="keyword">import</span> scala.swing.event._</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">LevelFinish</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Event</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">UIWorld</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Panel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> currentLevelNum: <span class="type">Int</span> = _</span><br><span class="line"></span><br><span class="line">  background = <span class="type">Color</span>.white</span><br><span class="line">  preferredSize = (<span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">  focusable = <span class="literal">true</span></span><br><span class="line">  listenTo(keys)</span><br><span class="line">  reactions += &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">KeyTyped</span>(_, 't', _, _) =&gt;</span><br><span class="line">      publish(<span class="type">LevelFinish</span>())</span><br><span class="line">    <span class="keyword">case</span> <span class="type">KeyTyped</span>(_, 'r', _, _) =&gt;</span><br><span class="line">      restart()</span><br><span class="line">    <span class="keyword">case</span> <span class="type">KeyPressed</span>(_, key, _, _) =&gt;</span><br><span class="line">      <span class="type">World</span>.onKeyPress(key)</span><br><span class="line">      repaint()</span><br><span class="line">    <span class="keyword">case</span> _: <span class="type">FocusLost</span> =&gt; repaint()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> success = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">loadWorld</span></span>(levelNum: <span class="type">Int</span>) &#123;</span><br><span class="line">    currentLevelNum = levelNum</span><br><span class="line">    <span class="type">World</span>.loadLevel(levelNum)</span><br><span class="line">    repaint()</span><br><span class="line">    requestFocus()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">nextLevel</span></span>() &#123;</span><br><span class="line">    loadWorld(currentLevelNum + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">restart</span></span>() &#123;</span><br><span class="line">    <span class="type">World</span>.loadLevel(currentLevelNum)</span><br><span class="line">    repaint()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">paintComponent</span></span>(g: <span class="type">Graphics2D</span>) &#123;</span><br><span class="line">    g.clearRect(<span class="number">0</span>, <span class="number">0</span>, size.width, size.height)</span><br><span class="line">    <span class="keyword">val</span> level = <span class="type">World</span>.currentLevel</span><br><span class="line">    <span class="keyword">for</span> (x &lt;- level.indices) &#123;</span><br><span class="line">      <span class="keyword">for</span> (y &lt;- level(x).indices <span class="keyword">if</span> level(x)(y) != <span class="literal">null</span>) &#123;</span><br><span class="line">        level(x)(y) <span class="keyword">match</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="type">Box</span>() =&gt;</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">165</span>, <span class="number">130</span>, <span class="number">90</span>))</span><br><span class="line">            g.fillRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">            g.fill3DRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="literal">true</span>)</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">165</span>, <span class="number">165</span>, <span class="number">165</span>))</span><br><span class="line">            g.setRenderingHint(<span class="type">RenderingHints</span>.<span class="type">KEY_ANTIALIASING</span>, <span class="type">RenderingHints</span>.<span class="type">VALUE_ANTIALIAS_ON</span>)</span><br><span class="line">            g.drawLine((x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">4</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">4</span>, (x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">20</span> - <span class="number">4</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">20</span> - <span class="number">4</span>)</span><br><span class="line">            g.drawLine((x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">4</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">20</span> - <span class="number">4</span>, (x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">20</span> - <span class="number">4</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">4</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="type">BoxOnGoalSquare</span>() =&gt;</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">255</span>, <span class="number">20</span>, <span class="number">20</span>))</span><br><span class="line">            g.fillRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">            g.fill3DRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="type">Player</span>() =&gt;</span><br><span class="line">            g.setColor(<span class="type">Color</span>.<span class="type">WHITE</span>)</span><br><span class="line">            g.draw3DRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="literal">true</span>)</span><br><span class="line">            g.setColor(<span class="type">Color</span>.<span class="type">GREEN</span>)</span><br><span class="line">            g.fill3DRect((x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">1</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">1</span>, <span class="number">20</span> - <span class="number">2</span>, <span class="number">20</span> - <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="type">PlayerOnGoalSquare</span>() =&gt;</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">120</span>, <span class="number">160</span>, <span class="number">160</span>))</span><br><span class="line">            g.draw3DRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="literal">true</span>)</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">20</span>, <span class="number">250</span>, <span class="number">20</span>))</span><br><span class="line">            g.fill3DRect((x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">1</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">1</span>, <span class="number">20</span> - <span class="number">2</span>, <span class="number">20</span> - <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="type">GoalSquare</span>() =&gt;</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">90</span>, <span class="number">160</span>, <span class="number">90</span>))</span><br><span class="line">            g.drawOval((x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">5</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">            g.fillOval((x + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">5</span>, (y + <span class="number">1</span>) * <span class="number">20</span> + <span class="number">5</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="type">Wall</span>() =&gt;</span><br><span class="line">            g.setColor(<span class="keyword">new</span> <span class="type">Color</span>(<span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line">            g.fillRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">            g.fill3DRect((x + <span class="number">1</span>) * <span class="number">20</span>, (y + <span class="number">1</span>) * <span class="number">20</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="number">20</span> - <span class="number">1</span>, <span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">case</span> <span class="type">Floor</span>() =&gt;</span><br><span class="line">            g.setColor(<span class="type">Color</span>.<span class="type">WHITE</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        level(x)(y) <span class="keyword">match</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="type">Box</span>() =&gt;</span><br><span class="line">            success = <span class="literal">false</span></span><br><span class="line">          <span class="keyword">case</span> _ =&gt;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">      publish(<span class="type">LevelFinish</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      success = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="编写主程序入口">编写主程序入口</span></h2><p>主程序需要加载地图信息，设计按钮和处理事件等。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.galudisu.game.<span class="type">World</span>.<span class="type">Level</span></span><br><span class="line"><span class="keyword">import</span> cn.galudisu.game.ui.&#123;<span class="type">LevelFinish</span>, <span class="type">UIWorld</span>&#125;</span><br><span class="line"><span class="keyword">import</span> javax.swing.<span class="type">UIManager</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.swing.<span class="type">BorderPanel</span>.<span class="type">Position</span></span><br><span class="line"><span class="keyword">import</span> scala.swing.<span class="type">ListView</span>._</span><br><span class="line"><span class="keyword">import</span> scala.swing._</span><br><span class="line"><span class="keyword">import</span> scala.swing.event._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Sokoban</span> <span class="keyword">extends</span> <span class="title">SimpleSwingApplication</span> </span>&#123;</span><br><span class="line">  activeNimbus()</span><br><span class="line"></span><br><span class="line">  <span class="type">World</span>.fromFile(<span class="string">"worlds.txt"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> uiWorld = <span class="keyword">new</span> <span class="type">UIWorld</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> uiChooseLevel: <span class="type">FlowPanel</span> = <span class="keyword">new</span> <span class="type">FlowPanel</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> comboBox: <span class="type">ComboBox</span>[<span class="type">Level</span>] = <span class="keyword">new</span> <span class="type">ComboBox</span>(<span class="type">World</span>.levels) &#123;</span><br><span class="line">      renderer = <span class="type">Renderer</span>(el =&gt; <span class="type">World</span>.levels.indexOf(el))</span><br><span class="line">      focusable = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> loadLevelButton: <span class="type">Button</span> = <span class="keyword">new</span> <span class="type">Button</span> &#123;</span><br><span class="line">      text = <span class="string">"Load level"</span></span><br><span class="line">      focusable = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> restartButton: <span class="type">Button</span> = <span class="keyword">new</span> <span class="type">Button</span> &#123;</span><br><span class="line">      text = <span class="string">"Restart"</span></span><br><span class="line">      focusable = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    contents += <span class="keyword">new</span> <span class="type">Label</span>(<span class="string">"Change level"</span>)</span><br><span class="line">    contents += comboBox</span><br><span class="line">    contents += loadLevelButton</span><br><span class="line">    contents += <span class="keyword">new</span> <span class="type">Separator</span>()</span><br><span class="line">    contents += restartButton</span><br><span class="line"></span><br><span class="line">    listenTo(loadLevelButton, restartButton)</span><br><span class="line"></span><br><span class="line">    reactions += &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">ButtonClicked</span>(`loadLevelButton`) =&gt;</span><br><span class="line">        <span class="keyword">val</span> levelNum = <span class="type">World</span>.levels.indexOf(comboBox.selection.item)</span><br><span class="line">        uiWorld.loadWorld(levelNum)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">ButtonClicked</span>(`restartButton`) =&gt;</span><br><span class="line">        uiWorld.restart()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> nbMoveLabel: <span class="type">Label</span> = <span class="keyword">new</span> <span class="type">Label</span>() &#123;</span><br><span class="line">    listenTo(<span class="type">World</span>)</span><br><span class="line">    reactions += &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">PlayerMove</span>() =&gt;</span><br><span class="line">        text = <span class="string">"NB Move: "</span> + <span class="type">World</span>.nb_move</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> uiStats: <span class="type">FlowPanel</span> = <span class="keyword">new</span> <span class="type">FlowPanel</span> &#123;</span><br><span class="line">    nbMoveLabel.text = <span class="string">"NB Move:"</span></span><br><span class="line">    contents += nbMoveLabel</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> borderPanel: <span class="type">BorderPanel</span> = <span class="keyword">new</span> <span class="type">BorderPanel</span> &#123;</span><br><span class="line">    add(uiChooseLevel, <span class="type">Position</span>.<span class="type">North</span>)</span><br><span class="line">    add(uiWorld, <span class="type">Position</span>.<span class="type">Center</span>)</span><br><span class="line">    add(uiStats, <span class="type">Position</span>.<span class="type">South</span>)</span><br><span class="line"></span><br><span class="line">    uiWorld.loadWorld(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    listenTo(uiWorld)</span><br><span class="line"></span><br><span class="line">    reactions += &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">LevelFinish</span>() =&gt;</span><br><span class="line">        <span class="keyword">val</span> result = <span class="type">Dialog</span>.showOptions(</span><br><span class="line">          <span class="keyword">this</span>,</span><br><span class="line">          message = <span class="string">"Success, level finish with "</span> + <span class="type">World</span>.nb_move + <span class="string">" move."</span>,</span><br><span class="line">          title = <span class="string">"Level Finished!"</span>,</span><br><span class="line">          messageType = <span class="type">Dialog</span>.<span class="type">Message</span>.<span class="type">Question</span>,</span><br><span class="line">          optionType = <span class="type">Dialog</span>.<span class="type">Options</span>.<span class="type">YesNo</span>,</span><br><span class="line">          entries = <span class="type">Seq</span>(<span class="string">"Next level"</span>, <span class="string">"Ok"</span>),</span><br><span class="line">          initial = <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        result <span class="keyword">match</span> &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="type">Dialog</span>.<span class="type">Result</span>.<span class="type">Yes</span> =&gt;</span><br><span class="line">            uiWorld.nextLevel()</span><br><span class="line">          <span class="keyword">case</span> _ =&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">top</span></span>: <span class="type">MainFrame</span> = <span class="keyword">new</span> <span class="type">MainFrame</span> &#123;</span><br><span class="line">    title = <span class="string">"Sokoban Game"</span></span><br><span class="line">    contents = borderPanel</span><br><span class="line">    centerOnScreen()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">activeNimbus</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (info &lt;- <span class="type">UIManager</span>.getInstalledLookAndFeels) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"Nimbus"</span>.equals(info.getName)) &#123;</span><br><span class="line">        <span class="type">UIManager</span>.setLookAndFeel(info.getClassName)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果觉得游戏功能单一，可以试试添加一个“提示”按钮，协助游戏玩家解题。可以参考<a href="http://bach.istc.kobe-u.ac.jp/copris/puzzles/sokoban/index.html" target="_blank" rel="noopener">这里</a>。</p><p>Copris<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 是一门约束编程(Constraint programming)语言。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">[http://bach.istc.kobe-u.ac.jp/copris)</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/game/sokoban/sokoban-screenshot.png&quot; alt=&quot;game&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="http://galudisu.info/categories/algorithm/"/>
    
    
      <category term="scala" scheme="http://galudisu.info/tags/scala/"/>
    
      <category term="game" scheme="http://galudisu.info/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>如何生成测试用服务端和客户端证书</title>
    <link href="http://galudisu.info/2020/06/23/certificate/generate-server-client-pk/"/>
    <id>http://galudisu.info/2020/06/23/certificate/generate-server-client-pk/</id>
    <published>2020-06-23T07:50:03.000Z</published>
    <updated>2020-06-28T07:55:58.741Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目开发需要实现服务端和客户端的SSL双向认证，需要用到测试数据验证，下面介绍生成证书的步骤。</p><a id="more"></a><h2><span id="生成ca根证书">生成CA根证书</span></h2><ol><li>生成一个CA的私钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#generate ca key</span></span><br><span class="line">openssl genpkey -algorithm RSA -out ca.key</span><br></pre></td></tr></table></figure><ol start="2"><li>根据CA的私钥，生成一份自签名的CA根证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate self-signed ca certificate</span></span><br><span class="line">openssl req -new -x509 -days 365 -key ca.key -out ca.pem \</span><br><span class="line">  -subj <span class="string">"/C=cn/O=mycomp/OU=myorg/CN=ca/emailAddress=ca@example.com"</span></span><br></pre></td></tr></table></figure><h2><span id="生成服务端证书">生成服务端证书</span></h2><ol><li>生成服务端私钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate server key</span></span><br><span class="line">openssl genpkey -algorithm RSA -out server.key</span><br></pre></td></tr></table></figure><ol start="2"><li>生成服务端证书CSR</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#generate server certificate signing request</span></span><br><span class="line">openssl req -new -nodes -days 365 -key server.key -out server.csr \</span><br><span class="line">  -subj <span class="string">"/C=cn/O=mycomp/OU=myorg/CN=server/emailAddress=server@example.com"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用前面生成的CA根证书对服务端的CSR签名，生成服务端证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate server certificate</span></span><br><span class="line">openssl x509 -req -days 365 \</span><br><span class="line">  -<span class="keyword">in</span> server.csr -out server.pem \</span><br><span class="line">  -CA ca.pem -CAkey ca.key -CAcreateserial</span><br></pre></td></tr></table></figure><h2><span id="生成客户端证书">生成客户端证书</span></h2><ol><li>生成客户端私钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate client key</span></span><br><span class="line">openssl genpkey -algorithm RSA -out client.key</span><br></pre></td></tr></table></figure><ol start="2"><li>生成客户端证书CSR</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate client certificate signing request</span></span><br><span class="line">openssl req -new -nodes -days 365 -key client.key -out client.csr \</span><br><span class="line">  -subj <span class="string">"/C=cn/O=mycomp/OU=myorg/CN=client/emailAddress=client@example.com"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用前面生成的CA根证书对客户端的CSR签名，生成客户端证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate client certificate</span></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> client.csr -out client.pem \</span><br><span class="line">  -CA ca.pem -CAkey ca.key -CAcreateserial</span><br></pre></td></tr></table></figure><h2><span id="检查生成的服务端和客户端证书">检查生成的服务端和客户端证书</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -noout -text -<span class="keyword">in</span> server.pem</span><br><span class="line">openssl x509 -noout -text -<span class="keyword">in</span> client.pem</span><br></pre></td></tr></table></figure><h2><span id="生成trustore">生成trustore</span></h2><p>因为服务端和客户端使用同一个CA签发的证书，所以在此服务端和客户端使用同一个truststore就可以了，即truststore只包含一个此CA证书信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate server/client truststore</span></span><br><span class="line">keytool -import -noprompt -file ca.pem \</span><br><span class="line">  -keystore truststore.jks -storepass test1234</span><br></pre></td></tr></table></figure><h2><span id="生成服务端keystore">生成服务端keystore</span></h2><ol><li>生成服务端的P12格式证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate server p12</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> \</span><br><span class="line">  -<span class="keyword">in</span> server.pem -inkey server.key \</span><br><span class="line">  -out server.p12 -passout pass:test1234</span><br></pre></td></tr></table></figure><ol start="2"><li>生成服务端的JKS格式证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate server jks</span></span><br><span class="line">keytool -importkeystore \</span><br><span class="line">  -srckeystore server.p12 -srcstoretype PKCS12 \</span><br><span class="line">  -destkeystore server.keystore.jks \</span><br><span class="line">  -srcstorepass test1234 \</span><br><span class="line">  -deststorepass test1234</span><br></pre></td></tr></table></figure><h2><span id="生成客户端keystore">生成客户端keystore</span></h2><ol><li>生成客户端的P12格式证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate client p12</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> \</span><br><span class="line">  -<span class="keyword">in</span> client.pem -inkey client.key -out client.p12 \</span><br><span class="line">  -passout pass:test1234</span><br></pre></td></tr></table></figure><ol start="2"><li>生成客户端的JKS格式证书</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generate client jks</span></span><br><span class="line">keytool -importkeystore \</span><br><span class="line">  -srckeystore client.p12 -srcstoretype PKCS12 \</span><br><span class="line">  -destkeystore client.keystore.jks \</span><br><span class="line">  -srcstorepass test1234 \</span><br><span class="line">  -deststorepass test1234</span><br></pre></td></tr></table></figure><h2><span id="验证jks证书的内容">验证JKS证书的内容</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keytool --list -keystore client.keystore.jks -storepass test1234</span><br><span class="line">keytool --list -keystore server.keystore.jks -storepass testr1234</span><br><span class="line">keytool --list -keystore truststore.jks -storepass test1234</span><br></pre></td></tr></table></figure><h2><span id="更改访问主机域名">更改访问主机域名</span></h2><p>前面步骤中，生成的服务端和客户端的证书里面配置了证书subject的CN域为<code>sever</code>和<code>client</code>，在SSL验证主机名的时候要求主机的名字必须是<code>server</code>和<code>client</code>，否则SSL验证会报失败。</p><p>这个结果就是这个证书必须在主机名为<code>server/client</code>的机器上使用，不能在其它机器上使用。这个限制可不好，所以SSL标准定义了证书扩展属性SAN(Subject Alternative Name)，这是SSL 标准 x509 中定义的一个扩展，可以扩展此证书支持的域名，使得一个证书可以支持多个不同域名的解析。</p><p>具体怎么操作：</p><ol><li>首先配置openssl.cnf</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[ CA_default ]</span><br><span class="line">...</span><br><span class="line"># Extension copying option: use with caution.</span><br><span class="line">copy_extensions = copy</span><br><span class="line"></span><br><span class="line">[ req ]</span><br><span class="line">...</span><br><span class="line">req_extensions = v3_req # The extensions to add to a certificate request</span><br><span class="line"></span><br><span class="line">[ v3_req ]</span><br><span class="line">...</span><br><span class="line"># Extensions to add to a certificate request</span><br><span class="line">...</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = *.kafka.example.com</span><br><span class="line">DNS.2 = *.example.com</span><br></pre></td></tr></table></figure><ol start="2"><li>把前面步骤修改成如下，即指定扩展属性的openssl.cnf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 2.2: generate server certificate signing request</span></span><br><span class="line">openssl req -new -nodes -days 365 -key server.key -out server.csr \</span><br><span class="line">  -subj <span class="string">"/C=cn/O=mycomp/OU=myorg/CN=server/emailAddress=server@example.com"</span> \</span><br><span class="line">  -config ./openssl.cnf -extensions v3_req</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 2.3: generate server certificate</span></span><br><span class="line">openssl x509 -req -days 365 \</span><br><span class="line">  -<span class="keyword">in</span> server.csr -out server.pem \</span><br><span class="line">  -CA ca.pem -CAkey ca.key -CAcreateserial \</span><br><span class="line">  -extfile ./openssl.cnf -extensions v3_req</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 3.2: generate client certificate signing request</span></span><br><span class="line">openssl req -new -nodes -days 365 -key client.key -out client.csr 、</span><br><span class="line">  -subj <span class="string">"/C=CN/O=mycomp/OU=myorg/CN=client/emailAddress=client@example.com"</span> \</span><br><span class="line">  -config ./openssl.cnf -extensions v3_req</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 3.3: generate client certificate</span></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> client.csr -out client.pem \</span><br><span class="line">  -CA ca.pem -CAkey ca.key -CAcreateserial \</span><br><span class="line">  -extfile ./openssl.cnf -extensions v3_req</span><br></pre></td></tr></table></figure><ol start="3"><li>如果不想修改openssl.cnf,也可以直接使用命令行的方式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 2.2: generate server certificate signing request</span></span><br><span class="line">openssl req -new -nodes -days 365 -key server.key -out server.csr \</span><br><span class="line">  -subj <span class="string">"/C=cn/O=mycomp/OU=myorg/CN=server/emailAddress=server@example.com"</span> \</span><br><span class="line">  -reqexts SAN \</span><br><span class="line">  -config &lt;(cat /etc/pki/tls/openssl.cnf &lt;(<span class="built_in">printf</span> <span class="string">"\n[SAN]\nsubjectAltName=DNS:*.kafka.example.com,DNS:*.example.com"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 2.3: generate server certificate</span></span><br><span class="line">openssl x509 -req -days 365 \</span><br><span class="line">  -<span class="keyword">in</span> server.csr -out server.pem \</span><br><span class="line">  -CA ca.pem -CAkey ca.key -CAcreateserial \</span><br><span class="line">  -extensions SAN \</span><br><span class="line">  -extfile &lt;(cat /etc/pki/tls/openssl.cnf &lt;(<span class="built_in">printf</span> <span class="string">"[SAN]\nsubjectAltName=DNS:*.kafka.example.com,DNS:*.example.com"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 3.2: generate client certificate signing request</span></span><br><span class="line">openssl req -new -nodes -days 365 -key client.key -out client.csr 、</span><br><span class="line">  -subj <span class="string">"/C=CN/O=mycomp/OU=myorg/CN=client/emailAddress=client@example.com"</span> \</span><br><span class="line">  -reqexts SAN \</span><br><span class="line">  -config &lt;(cat /etc/pki/tls/openssl.cnf &lt;(<span class="built_in">printf</span> <span class="string">"\n[SAN]\nsubjectAltName=DNS:*.kafka.example.com,DNS:*.example.com"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 3.3: generate client certificate</span></span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> client.csr -out client.pem \</span><br><span class="line">  -CA ca.pem -CAkey ca.key -CAcreateserial \</span><br><span class="line">  -extensions SAN \</span><br><span class="line">  -extfile &lt;(cat /etc/pki/tls/openssl.cnf &lt;(<span class="built_in">printf</span> <span class="string">"[SAN]\nsubjectAltName=DNS:*.kafka.example.com,DNS:*.example.com"</span>))</span><br></pre></td></tr></table></figure><h2><span id="椭圆算法ec的证书签名">椭圆算法(EC)的证书签名</span></h2><p>标准上除了定义RSA的签名算法，还有ECDSA(又叫EC)、DSA、PKCS8和PKCS8加密这几种。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">openssl ecparam  -name secp256k1 -genkey</span><br><span class="line"></span><br><span class="line">-----BEGIN EC PARAMETERS-----</span><br><span class="line">BgUrgQQACg==</span><br><span class="line">-----END EC PARAMETERS-----</span><br><span class="line">-----BEGIN EC PRIVATE KEY-----</span><br><span class="line">MHQCAQEEIKYV1xoz6smkpdMksfgI8/3465V02UZdaKj4JSH30bBhoAcGBSuBBAAK</span><br><span class="line">oUQDQgAEO1O+/xRGEVJgBEAOQorBveXPTQS3c7MA+9R+HEMP7TkscI9FONPclcRb</span><br><span class="line">5sXZJjYHNYWhvxuXdGl8QrFVRIVBYg==</span><br><span class="line">-----END EC PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p><code>ecparam</code>是一个椭圆参数，用于实现私钥的生成，它是一个可选性。</p><h2><span id="如何在客户端发起ssl的请求">如何在客户端发起SSL的请求</span></h2><p>假设实现两套SSL连接，方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SSLContext factory for handle client connection</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSLContextFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pem证书方式，带有证书和私钥</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLContext <span class="title">generate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Collection&lt;Path&gt; certPaths,</span></span></span><br><span class="line"><span class="function"><span class="params">            Collection&lt;Path&gt; caPaths,</span></span></span><br><span class="line"><span class="function"><span class="params">            Path keyPath,</span></span></span><br><span class="line"><span class="function"><span class="params">            String keyStorePass)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> GeneralSecurityException, IOException </span>&#123;</span><br><span class="line">        List&lt;Certificate&gt; certificate = PemUtils.readCertificates(certPaths);</span><br><span class="line">        PrivateKey privateKey = PemUtils.readPrivateKey(keyPath, keyStorePass::toCharArray);</span><br><span class="line">        List&lt;Certificate&gt; chain = PemUtils.readCertificates(caPaths);</span><br><span class="line">        KeyStore keyStore =</span><br><span class="line">                KeyStoreUtil.buildKeyStore(certificate, privateKey, keyStorePass.toCharArray());</span><br><span class="line">        KeyStore trustKeySore = KeyStoreUtil.buildTrustStore(chain);</span><br><span class="line">        <span class="keyword">return</span> SSLContexts.custom()</span><br><span class="line">                .loadKeyMaterial(keyStore, keyStorePass.toCharArray())</span><br><span class="line">                .loadTrustMaterial(trustKeySore, <span class="keyword">null</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// keystore 方式，用生成的JKS文件(可能是jks、p12、pfx、pkcs12)发起SSLContext</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLContext <span class="title">generate</span><span class="params">(Path keyStorePath, String keyStorePass, String keyStoreType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> GeneralSecurityException, IOException </span>&#123;</span><br><span class="line">        KeyStore trustStore =</span><br><span class="line">                KeyStoreUtil.buildDefaultStore(keyStorePath, keyStorePass::toCharArray, keyStoreType);</span><br><span class="line">        <span class="keyword">return</span> SSLContexts.custom()</span><br><span class="line">                .loadTrustMaterial(trustStore, <span class="keyword">new</span> TrustSelfSignedStrategy())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先是对不同的算法的私钥进行检测，解析得出<code>PrivateKey</code>对象；其次是解析证书为<code>Certificate</code>对象：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PemUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PKCS1_HEADER = <span class="string">"-----BEGIN RSA PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PKCS1_FOOTER = <span class="string">"-----END RSA PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_DSA_HEADER = <span class="string">"-----BEGIN DSA PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_DSA_FOOTER = <span class="string">"-----END DSA PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_DSA_PARAMS_HEADER = <span class="string">"-----BEGIN DSA PARAMETERS-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_DSA_PARAMS_FOOTER = <span class="string">"-----END DSA PARAMETERS-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PKCS8_HEADER = <span class="string">"-----BEGIN PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PKCS8_FOOTER = <span class="string">"-----END PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PKCS8_ENCRYPTED_HEADER = <span class="string">"-----BEGIN ENCRYPTED PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PKCS8_ENCRYPTED_FOOTER = <span class="string">"-----END ENCRYPTED PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_EC_HEADER = <span class="string">"-----BEGIN EC PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_EC_FOOTER = <span class="string">"-----END EC PRIVATE KEY-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_EC_PARAMS_HEADER = <span class="string">"-----BEGIN EC PARAMETERS-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OPENSSL_EC_PARAMS_FOOTER = <span class="string">"-----END EC PARAMETERS-----"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER = <span class="string">"-----BEGIN"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PemUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Utility class should not be instantiated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> PrivateKey&#125; from the contents of a file. Supports PKCS#1, PKCS#8 encoded</span></span><br><span class="line"><span class="comment">     * formats of encrypted and plaintext RSA, DSA and EC(secp256r1) keys</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPath the path for the key file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passwordSupplier A password supplier for the potentially encrypted (password</span></span><br><span class="line"><span class="comment">     *     protected) key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a private key from the contents of the file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> PrivateKey <span class="title">readPrivateKey</span><span class="params">(Path keyPath, Supplier&lt;<span class="keyword">char</span>[]&gt; passwordSupplier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (BufferedReader bReader = Files.newBufferedReader(keyPath, StandardCharsets.UTF_8)) &#123;</span><br><span class="line">            String line = bReader.readLine();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">null</span> != line &amp;&amp; !line.startsWith(HEADER)) &#123;</span><br><span class="line">                line = bReader.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                        <span class="string">"Error parsing Private Key ["</span></span><br><span class="line">                                + keyPath.toAbsolutePath()</span><br><span class="line">                                + <span class="string">"], file is empty"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (line.trim()) &#123;</span><br><span class="line">                <span class="keyword">case</span> PKCS8_ENCRYPTED_HEADER:</span><br><span class="line">                    <span class="keyword">char</span>[] password = passwordSupplier.get();</span><br><span class="line">                    <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                                <span class="string">"cannot read encrypted key ["</span></span><br><span class="line">                                        + keyPath.toAbsolutePath()</span><br><span class="line">                                        + <span class="string">"] "</span></span><br><span class="line">                                        + <span class="string">"without a password"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> parsePKCS8Encrypted(bReader, password);</span><br><span class="line">                <span class="keyword">case</span> PKCS8_HEADER:</span><br><span class="line">                    <span class="keyword">return</span> parsePKCS8(bReader);</span><br><span class="line">                <span class="keyword">case</span> PKCS1_HEADER:</span><br><span class="line">                    <span class="keyword">return</span> parsePKCS1Rsa(bReader, passwordSupplier);</span><br><span class="line">                <span class="keyword">case</span> OPENSSL_DSA_HEADER:</span><br><span class="line">                    <span class="keyword">return</span> parseOpenSslDsa(bReader, passwordSupplier);</span><br><span class="line">                <span class="keyword">case</span> OPENSSL_DSA_PARAMS_HEADER:</span><br><span class="line">                    <span class="keyword">return</span> parseOpenSslDsa(removeDsaHeaders(bReader), passwordSupplier);</span><br><span class="line">                <span class="keyword">case</span> OPENSSL_EC_HEADER:</span><br><span class="line">                    <span class="keyword">return</span> parseOpenSslEC(bReader, passwordSupplier);</span><br><span class="line">                <span class="keyword">case</span> OPENSSL_EC_PARAMS_HEADER:</span><br><span class="line">                    <span class="keyword">return</span> parseOpenSslEC(removeECHeaders(bReader), passwordSupplier);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                            <span class="string">"error parsing Private Key ["</span></span><br><span class="line">                                    + keyPath.toAbsolutePath()</span><br><span class="line">                                    + <span class="string">"], file "</span></span><br><span class="line">                                    + <span class="string">"does not contain a supported key format"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | NoSuchFileException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                    <span class="string">"private key file ["</span> + keyPath.toAbsolutePath() + <span class="string">"] does not exist"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | GeneralSecurityException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                    <span class="string">"private key file ["</span> + keyPath.toAbsolutePath() + <span class="string">"] cannot be parsed"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the EC Headers that OpenSSL adds to EC private keys as the information in them is</span></span><br><span class="line"><span class="comment">     * redundant</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the EC Parameter footer is missing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedReader <span class="title">removeECHeaders</span><span class="params">(BufferedReader bReader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String line = bReader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (OPENSSL_EC_PARAMS_FOOTER.equals(line.trim())) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            line = bReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, EC Parameters footer is missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Verify that the key starts with the correct header before passing it to parseOpenSslEC</span></span><br><span class="line">        <span class="keyword">if</span> (!OPENSSL_EC_HEADER.equals(bReader.readLine())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, EC Key header is missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bReader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes the DSA Params Headers that OpenSSL adds to DSA private keys as the information in</span></span><br><span class="line"><span class="comment">     * them is redundant</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the EC Parameter footer is missing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedReader <span class="title">removeDsaHeaders</span><span class="params">(BufferedReader bReader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String line = bReader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (OPENSSL_DSA_PARAMS_FOOTER.equals(line.trim())) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            line = bReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, DSA Parameters footer is missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Verify that the key starts with the correct header before passing it to parseOpenSslDsa</span></span><br><span class="line">        <span class="keyword">if</span> (!OPENSSL_DSA_HEADER.equals(bReader.readLine())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, DSA Key header is missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bReader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> PrivateKey&#125; from the contents of &#123;<span class="doctag">@code</span> bReader&#125; that contains an plaintext</span></span><br><span class="line"><span class="comment">     * private key encoded in PKCS#8</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bReader the &#123;<span class="doctag">@link</span> BufferedReader&#125; containing the key file contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> PrivateKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the file can't be read</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the private key can't be generated from the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *     PKCS8EncodedKeySpec&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">parsePKCS8</span><span class="params">(BufferedReader bReader)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String line = bReader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PKCS8_FOOTER.equals(line.trim())) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(line.trim());</span><br><span class="line">            line = bReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, PEM footer is invalid or missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = Base64.getDecoder().decode(sb.toString());</span><br><span class="line">        String keyAlgo = getKeyAlgorithmIdentifier(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(keyAlgo);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> PrivateKey&#125; from the contents of &#123;<span class="doctag">@code</span> bReader&#125; that contains an EC private</span></span><br><span class="line"><span class="comment">     * key encoded in OpenSSL traditional format.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bReader the &#123;<span class="doctag">@link</span> BufferedReader&#125; containing the key file contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passwordSupplier A password supplier for the potentially encrypted (password</span></span><br><span class="line"><span class="comment">     *     protected) key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> PrivateKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the file can't be read</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the private key can't be generated from the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *     ECPrivateKeySpec&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">parseOpenSslEC</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            BufferedReader bReader, Supplier&lt;<span class="keyword">char</span>[]&gt; passwordSupplier)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String line = bReader.readLine();</span><br><span class="line">        Map&lt;String, String&gt; pemHeaders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (OPENSSL_EC_FOOTER.equals(line.trim())) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt</span></span><br><span class="line">            <span class="keyword">if</span> (line.contains(<span class="string">":"</span>)) &#123;</span><br><span class="line">                String[] header = line.split(<span class="string">":"</span>);</span><br><span class="line">                pemHeaders.put(header[<span class="number">0</span>].trim(), header[<span class="number">1</span>].trim());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(line.trim());</span><br><span class="line">            &#125;</span><br><span class="line">            line = bReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, PEM footer is invalid or missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = possiblyDecryptPKCS1Key(pemHeaders, sb.toString(), passwordSupplier);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"EC"</span>);</span><br><span class="line">        ECPrivateKeySpec ecSpec = parseEcDer(keyBytes);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePrivate(ecSpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> PrivateKey&#125; from the contents of &#123;<span class="doctag">@code</span> bReader&#125; that contains an RSA</span></span><br><span class="line"><span class="comment">     * private key encoded in OpenSSL traditional format.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bReader the &#123;<span class="doctag">@link</span> BufferedReader&#125; containing the key file contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passwordSupplier A password supplier for the potentially encrypted (password</span></span><br><span class="line"><span class="comment">     *     protected) key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> PrivateKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the file can't be read</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the private key can't be generated from the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *     RSAPrivateCrtKeySpec&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">parsePKCS1Rsa</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            BufferedReader bReader, Supplier&lt;<span class="keyword">char</span>[]&gt; passwordSupplier)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String line = bReader.readLine();</span><br><span class="line">        Map&lt;String, String&gt; pemHeaders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PKCS1_FOOTER.equals(line.trim())) &#123;</span><br><span class="line">                <span class="comment">// Unencrypted</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt</span></span><br><span class="line">            <span class="keyword">if</span> (line.contains(<span class="string">":"</span>)) &#123;</span><br><span class="line">                String[] header = line.split(<span class="string">":"</span>);</span><br><span class="line">                pemHeaders.put(header[<span class="number">0</span>].trim(), header[<span class="number">1</span>].trim());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(line.trim());</span><br><span class="line">            &#125;</span><br><span class="line">            line = bReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, PEM footer is invalid or missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = possiblyDecryptPKCS1Key(pemHeaders, sb.toString(), passwordSupplier);</span><br><span class="line">        RSAPrivateCrtKeySpec spec = parseRsaDer(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePrivate(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> PrivateKey&#125; from the contents of &#123;<span class="doctag">@code</span> bReader&#125; that contains an DSA</span></span><br><span class="line"><span class="comment">     * private key encoded in OpenSSL traditional format.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bReader the &#123;<span class="doctag">@link</span> BufferedReader&#125; containing the key file contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passwordSupplier A password supplier for the potentially encrypted (password</span></span><br><span class="line"><span class="comment">     *     protected) key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> PrivateKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the file can't be read</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the private key can't be generated from the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *     DSAPrivateKeySpec&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">parseOpenSslDsa</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            BufferedReader bReader, Supplier&lt;<span class="keyword">char</span>[]&gt; passwordSupplier)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String line = bReader.readLine();</span><br><span class="line">        Map&lt;String, String&gt; pemHeaders = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (OPENSSL_DSA_FOOTER.equals(line.trim())) &#123;</span><br><span class="line">                <span class="comment">// Unencrypted</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Parse PEM headers according to https://www.ietf.org/rfc/rfc1421.txt</span></span><br><span class="line">            <span class="keyword">if</span> (line.contains(<span class="string">":"</span>)) &#123;</span><br><span class="line">                String[] header = line.split(<span class="string">":"</span>);</span><br><span class="line">                pemHeaders.put(header[<span class="number">0</span>].trim(), header[<span class="number">1</span>].trim());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(line.trim());</span><br><span class="line">            &#125;</span><br><span class="line">            line = bReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, PEM footer is invalid or missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = possiblyDecryptPKCS1Key(pemHeaders, sb.toString(), passwordSupplier);</span><br><span class="line">        DSAPrivateKeySpec spec = parseDsaDer(keyBytes);</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"DSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePrivate(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> PrivateKey&#125; from the contents of &#123;<span class="doctag">@code</span> bReader&#125; that contains an encrypted</span></span><br><span class="line"><span class="comment">     * private key encoded in PKCS#8</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bReader the &#123;<span class="doctag">@link</span> BufferedReader&#125; containing the key file contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPassword The password for the encrypted (password protected) key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> PrivateKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the file can't be read</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the private key can't be generated from the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     *     PKCS8EncodedKeySpec&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">parsePKCS8Encrypted</span><span class="params">(BufferedReader bReader, <span class="keyword">char</span>[] keyPassword)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        String line = bReader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PKCS8_ENCRYPTED_FOOTER.equals(line.trim())) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(line.trim());</span><br><span class="line">            line = bReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == line) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, PEM footer is invalid or missing"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = Base64.getDecoder().decode(sb.toString());</span><br><span class="line"></span><br><span class="line">        EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = <span class="keyword">new</span> EncryptedPrivateKeyInfo(keyBytes);</span><br><span class="line">        SecretKeyFactory secretKeyFactory =</span><br><span class="line">                SecretKeyFactory.getInstance(encryptedPrivateKeyInfo.getAlgName());</span><br><span class="line">        SecretKey secretKey = secretKeyFactory.generateSecret(<span class="keyword">new</span> PBEKeySpec(keyPassword));</span><br><span class="line">        Arrays.fill(keyPassword, <span class="string">'\u0000'</span>);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(encryptedPrivateKeyInfo.getAlgName());</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, secretKey, encryptedPrivateKeyInfo.getAlgParameters());</span><br><span class="line">        PKCS8EncodedKeySpec keySpec = encryptedPrivateKeyInfo.getKeySpec(cipher);</span><br><span class="line">        String keyAlgo = getKeyAlgorithmIdentifier(keySpec.getEncoded());</span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(keyAlgo);</span><br><span class="line">        <span class="keyword">return</span> keyFactory.generatePrivate(keySpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decrypts the password protected contents using the algorithm and IV that is specified in the</span></span><br><span class="line"><span class="comment">     * PEM Headers of the file</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pemHeaders The Proc-Type and DEK-Info PEM headers that have been extracted from the</span></span><br><span class="line"><span class="comment">     *     key file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyContents The key as a base64 encoded String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passwordSupplier A password supplier for the encrypted (password protected) key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the decrypted key bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the key can't be decrypted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the PEM headers are missing or malformed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] possiblyDecryptPKCS1Key(</span><br><span class="line">            Map&lt;String, String&gt; pemHeaders, String keyContents, Supplier&lt;<span class="keyword">char</span>[]&gt; passwordSupplier)</span><br><span class="line">            <span class="keyword">throws</span> GeneralSecurityException, IOException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = Base64.getDecoder().decode(keyContents);</span><br><span class="line">        String procType = pemHeaders.get(<span class="string">"Proc-Type"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"4,ENCRYPTED"</span>.equals(procType)) &#123;</span><br><span class="line">            <span class="comment">// We only handle PEM encryption</span></span><br><span class="line">            String encryptionParameters = pemHeaders.get(<span class="string">"DEK-Info"</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == encryptionParameters) &#123;</span><br><span class="line">                <span class="comment">// malformed pem</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM File, DEK-Info header is missing"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span>[] password = passwordSupplier.get();</span><br><span class="line">            <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"cannot read encrypted key without a password"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Cipher cipher = getCipherFromParameters(encryptionParameters, password);</span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(keyBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keyBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> Cipher&#125; from the contents of the DEK-Info header of a PEM file. RFC 1421</span></span><br><span class="line"><span class="comment">     * indicates that supported algorithms are defined in RFC 1423. RFC 1423 only defines DES-CBS</span></span><br><span class="line"><span class="comment">     * and triple DES (EDE) in CBC mode. AES in CBC mode is also widely used though ( 3 different</span></span><br><span class="line"><span class="comment">     * variants of 128, 192, 256 bit keys )</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dekHeaderValue The value of the DEK-Info PEM header</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password The password with which the key is encrypted</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a cipher of the appropriate algorithm and parameters to be used for decryption</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the algorithm is not available in the used security</span></span><br><span class="line"><span class="comment">     *     provider, or if the key is inappropriate for the cipher</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the DEK-Info PEM header is invalid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Cipher <span class="title">getCipherFromParameters</span><span class="params">(String dekHeaderValue, <span class="keyword">char</span>[] password)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> GeneralSecurityException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String padding = <span class="string">"PKCS5Padding"</span>;</span><br><span class="line">        <span class="keyword">final</span> SecretKey encryptionKey;</span><br><span class="line">        <span class="keyword">final</span> String[] valueTokens = dekHeaderValue.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">if</span> (valueTokens.length != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, DEK-Info PEM header is invalid"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String algorithm = valueTokens[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">final</span> String ivString = valueTokens[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] iv;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            iv = hexStringToByteArray(ivString);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Malformed PEM file, DEK-Info IV is invalid"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"DES-CBC"</span>.equals(algorithm)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] key = generateOpenSslKey(password, iv, <span class="number">8</span>);</span><br><span class="line">            encryptionKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"DES"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"DES-EDE3-CBC"</span>.equals(algorithm)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] key = generateOpenSslKey(password, iv, <span class="number">24</span>);</span><br><span class="line">            encryptionKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"DESede"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AES-128-CBC"</span>.equals(algorithm)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] key = generateOpenSslKey(password, iv, <span class="number">16</span>);</span><br><span class="line">            encryptionKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AES-192-CBC"</span>.equals(algorithm)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] key = generateOpenSslKey(password, iv, <span class="number">24</span>);</span><br><span class="line">            encryptionKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AES-256-CBC"</span>.equals(algorithm)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] key = generateOpenSslKey(password, iv, <span class="number">32</span>);</span><br><span class="line">            encryptionKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"AES"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GeneralSecurityException(</span><br><span class="line">                    <span class="string">"Private Key encrypted with unsupported algorithm ["</span> + algorithm + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String transformation = encryptionKey.getAlgorithm() + <span class="string">"/"</span> + <span class="string">"CBC"</span> + <span class="string">"/"</span> + padding;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(transformation);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, encryptionKey, <span class="keyword">new</span> IvParameterSpec(iv));</span><br><span class="line">        <span class="keyword">return</span> cipher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs key stretching in the same manner that OpenSSL does. This is basically a KDF that</span></span><br><span class="line"><span class="comment">     * uses n rounds of salted MD5 (as many times as needed to get the necessary number of key</span></span><br><span class="line"><span class="comment">     * bytes)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;https://www.openssl.org/docs/man1.1.0/crypto/PEM_write_bio_PrivateKey_traditional.html</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateOpenSslKey(<span class="keyword">char</span>[] password, <span class="keyword">byte</span>[] salt, <span class="keyword">int</span> keyLength) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] passwordBytes = toUtf8Bytes(password);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest md5 = MessageDigest.getInstance(<span class="string">"md5"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] key = <span class="keyword">new</span> <span class="keyword">byte</span>[keyLength];</span><br><span class="line">            <span class="keyword">int</span> copied = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> remaining;</span><br><span class="line">            <span class="keyword">while</span> (copied &lt; keyLength) &#123;</span><br><span class="line">                remaining = keyLength - copied;</span><br><span class="line">                md5.update(passwordBytes, <span class="number">0</span>, passwordBytes.length);</span><br><span class="line">                md5.update(salt, <span class="number">0</span>, <span class="number">8</span>); <span class="comment">// AES IV (salt) is longer but we only need 8 bytes</span></span><br><span class="line">                <span class="keyword">byte</span>[] tempDigest = md5.digest();</span><br><span class="line">                <span class="keyword">int</span> bytesToCopy = Math.min(remaining, <span class="number">16</span>); <span class="comment">// MD5 digests are 16 bytes</span></span><br><span class="line">                System.arraycopy(tempDigest, <span class="number">0</span>, key, copied, bytesToCopy);</span><br><span class="line">                copied += bytesToCopy;</span><br><span class="line">                <span class="keyword">if</span> (remaining == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                md5.update(tempDigest, <span class="number">0</span>, <span class="number">16</span>); <span class="comment">// use previous round digest as IV</span></span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.fill(passwordBytes, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                    <span class="string">"unexpected exception creating MessageDigest instance for [md5]"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toUtf8Bytes(<span class="keyword">char</span>[] chars) &#123;</span><br><span class="line">        <span class="keyword">final</span> CharBuffer charBuffer = CharBuffer.wrap(chars);</span><br><span class="line">        <span class="keyword">final</span> ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(charBuffer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes;</span><br><span class="line">        <span class="keyword">if</span> (byteBuffer.hasArray()) &#123;</span><br><span class="line">            <span class="comment">// there is no guarantee that the byte buffers backing array is the right size</span></span><br><span class="line">            <span class="comment">// so we need to make a copy</span></span><br><span class="line">            bytes =</span><br><span class="line">                    Arrays.copyOfRange(</span><br><span class="line">                            byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());</span><br><span class="line">            Arrays.fill(byteBuffer.array(), (<span class="keyword">byte</span>) <span class="number">0</span>); <span class="comment">// clear sensitive data</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> length = byteBuffer.limit() - byteBuffer.position();</span><br><span class="line">            bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">            byteBuffer.get(bytes);</span><br><span class="line">            <span class="comment">// if the buffer is not read only we can reset and fill with 0's</span></span><br><span class="line">            <span class="keyword">if</span> (!byteBuffer.isReadOnly()) &#123;</span><br><span class="line">                byteBuffer.clear(); <span class="comment">// reset</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteBuffer.limit(); i++) &#123;</span><br><span class="line">                    byteBuffer.put((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Converts a hexadecimal string to a byte array */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hexStringToByteArray(String hexString) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = hexString.length();</span><br><span class="line">        <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[len / <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> k = Character.digit(hexString.charAt(i), <span class="number">16</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> l = Character.digit(hexString.charAt(i + <span class="number">1</span>), <span class="number">16</span>);</span><br><span class="line">                <span class="keyword">if</span> (k == -<span class="number">1</span> || l == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                            <span class="string">"String ["</span> + hexString + <span class="string">"] is not hexadecimal"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                data[i / <span class="number">2</span>] = (<span class="keyword">byte</span>) ((k &lt;&lt; <span class="number">4</span>) + l);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Hexadecimal string ["</span></span><br><span class="line">                            + hexString</span><br><span class="line">                            + <span class="string">"] has odd length and cannot be converted to a byte array"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parses a DER encoded EC key to an &#123;<span class="doctag">@link</span> ECPrivateKeySpec&#125; using a minimal &#123;<span class="doctag">@link</span> DerParser&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBytes the private key raw bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ECPrivateKeySpec&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the DER encoded key can't be parsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ECPrivateKeySpec <span class="title">parseEcDer</span><span class="params">(<span class="keyword">byte</span>[] keyBytes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        DerParser parser = <span class="keyword">new</span> DerParser(keyBytes);</span><br><span class="line">        DerParser.Asn1Object sequence = parser.readAsn1Object();</span><br><span class="line">        parser = sequence.getParser();</span><br><span class="line">        parser.readAsn1Object().getInteger(); <span class="comment">// version</span></span><br><span class="line">        String keyHex = parser.readAsn1Object().getString();</span><br><span class="line">        BigInteger privateKeyInt = <span class="keyword">new</span> BigInteger(keyHex, <span class="number">16</span>);</span><br><span class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">"EC"</span>);</span><br><span class="line">        AlgorithmParameterSpec prime256v1ParamSpec = <span class="keyword">new</span> ECGenParameterSpec(<span class="string">"secp256r1"</span>);</span><br><span class="line">        keyPairGenerator.initialize(prime256v1ParamSpec);</span><br><span class="line">        ECParameterSpec parameterSpec =</span><br><span class="line">                ((ECKey) keyPairGenerator.generateKeyPair().getPrivate()).getParams();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ECPrivateKeySpec(privateKeyInt, parameterSpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parses a DER encoded RSA key to a &#123;<span class="doctag">@link</span> RSAPrivateCrtKeySpec&#125; using a minimal &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * DerParser&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBytes the private key raw bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> RSAPrivateCrtKeySpec&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the DER encoded key can't be parsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RSAPrivateCrtKeySpec <span class="title">parseRsaDer</span><span class="params">(<span class="keyword">byte</span>[] keyBytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DerParser parser = <span class="keyword">new</span> DerParser(keyBytes);</span><br><span class="line">        DerParser.Asn1Object sequence = parser.readAsn1Object();</span><br><span class="line">        parser = sequence.getParser();</span><br><span class="line">        parser.readAsn1Object()</span><br><span class="line">                .getInteger(); <span class="comment">// (version) We don't need it but must read to get to modulus</span></span><br><span class="line">        BigInteger modulus = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger publicExponent = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger privateExponent = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger prime1 = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger prime2 = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger exponent1 = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger exponent2 = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger coefficient = parser.readAsn1Object().getInteger();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPrivateCrtKeySpec(</span><br><span class="line">                modulus,</span><br><span class="line">                publicExponent,</span><br><span class="line">                privateExponent,</span><br><span class="line">                prime1,</span><br><span class="line">                prime2,</span><br><span class="line">                exponent1,</span><br><span class="line">                exponent2,</span><br><span class="line">                coefficient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parses a DER encoded DSA key to a &#123;<span class="doctag">@link</span> DSAPrivateKeySpec&#125; using a minimal &#123;<span class="doctag">@link</span> DerParser&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBytes the private key raw bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> DSAPrivateKeySpec&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the DER encoded key can't be parsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DSAPrivateKeySpec <span class="title">parseDsaDer</span><span class="params">(<span class="keyword">byte</span>[] keyBytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DerParser parser = <span class="keyword">new</span> DerParser(keyBytes);</span><br><span class="line">        DerParser.Asn1Object sequence = parser.readAsn1Object();</span><br><span class="line">        parser = sequence.getParser();</span><br><span class="line">        parser.readAsn1Object()</span><br><span class="line">                .getInteger(); <span class="comment">// (version) We don't need it but must read to get to p</span></span><br><span class="line">        BigInteger p = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger q = parser.readAsn1Object().getInteger();</span><br><span class="line">        BigInteger g = parser.readAsn1Object().getInteger();</span><br><span class="line">        parser.readAsn1Object().getInteger(); <span class="comment">// we don't need x</span></span><br><span class="line">        BigInteger x = parser.readAsn1Object().getInteger();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DSAPrivateKeySpec(x, p, q, g);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parses a DER encoded private key and reads its algorithm identifier Object OID.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBytes the private key raw bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A string identifier for the key algorithm (RSA, DSA, or EC)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> GeneralSecurityException if the algorithm oid that is parsed from ASN.1 is unknown</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException if the DER encoded key can't be parsed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getKeyAlgorithmIdentifier</span><span class="params">(<span class="keyword">byte</span>[] keyBytes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, GeneralSecurityException </span>&#123;</span><br><span class="line">        DerParser parser = <span class="keyword">new</span> DerParser(keyBytes);</span><br><span class="line">        DerParser.Asn1Object sequence = parser.readAsn1Object();</span><br><span class="line">        parser = sequence.getParser();</span><br><span class="line">        parser.readAsn1Object().getInteger(); <span class="comment">// version</span></span><br><span class="line">        DerParser.Asn1Object algSequence = parser.readAsn1Object();</span><br><span class="line">        parser = algSequence.getParser();</span><br><span class="line">        String oidString = parser.readAsn1Object().getOid();</span><br><span class="line">        <span class="keyword">switch</span> (oidString) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1.2.840.10040.4.1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"DSA"</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1.2.840.113549.1.1.1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"RSA"</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"1.2.840.10045.2.1"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"EC"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GeneralSecurityException(</span><br><span class="line">                <span class="string">"Error parsing key algorithm identifier. Algorithm with OID ["</span></span><br><span class="line">                        + oidString</span><br><span class="line">                        + <span class="string">"] is not supported"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> List&lt;Certificate&gt; <span class="title">readCertificates</span><span class="params">(Collection&lt;Path&gt; certPaths)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> CertificateException, IOException </span>&#123;</span><br><span class="line">        CertificateFactory certFactory = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">        List&lt;Certificate&gt; certificates = <span class="keyword">new</span> ArrayList&lt;&gt;(certPaths.size());</span><br><span class="line">        <span class="keyword">for</span> (Path path : certPaths) &#123;</span><br><span class="line">            <span class="keyword">try</span> (InputStream input = Files.newInputStream(path)) &#123;</span><br><span class="line">                <span class="keyword">final</span> Collection&lt;? extends Certificate&gt; parsed =</span><br><span class="line">                        certFactory.generateCertificates(input);</span><br><span class="line">                <span class="keyword">if</span> (parsed.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                            <span class="string">"failed to parse any certificates from ["</span></span><br><span class="line">                                    + path.toAbsolutePath()</span><br><span class="line">                                    + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                certificates.addAll(parsed);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> certificates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接下来要对keystore的SSLContext进行解析，</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * KeyStoreUtil for handle &#123;<span class="doctag">@link</span> SSLContext&#125; storage facility</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyStoreUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">KeyStoreUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Utility class should not be instantiated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">inferKeyStoreType</span><span class="params">(Path path)</span> </span>&#123;</span><br><span class="line">        String name = path == <span class="keyword">null</span> ? <span class="string">""</span> : path.toString().toLowerCase(Locale.ROOT);</span><br><span class="line">        <span class="keyword">if</span> (name.endsWith(<span class="string">".p12"</span>) || name.endsWith(<span class="string">".pfx"</span>) || name.endsWith(<span class="string">".pkcs12"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"PKCS12"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"jks"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> KeyStore <span class="title">readKeyStore</span><span class="params">(Path path, String type, <span class="keyword">char</span>[] password)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Files.notExists(path)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                    <span class="string">"cannot read a ["</span></span><br><span class="line">                            + type</span><br><span class="line">                            + <span class="string">"] keystore from ["</span></span><br><span class="line">                            + path.toAbsolutePath()</span><br><span class="line">                            + <span class="string">"] because the file does not exist"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyStore keyStore = KeyStore.getInstance(type);</span><br><span class="line">            <span class="keyword">try</span> (InputStream in = Files.newInputStream(path)) &#123;</span><br><span class="line">                keyStore.load(in, password);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> keyStore;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                    <span class="string">"cannot read a ["</span></span><br><span class="line">                            + type</span><br><span class="line">                            + <span class="string">"] keystore from ["</span></span><br><span class="line">                            + path.toAbsolutePath()</span><br><span class="line">                            + <span class="string">"] - "</span></span><br><span class="line">                            + e.getMessage(),</span><br><span class="line">                    e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Construct an in-memory keystore with a single key entry. */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> KeyStore <span class="title">buildKeyStore</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Collection&lt;Certificate&gt; certificateChain, PrivateKey privateKey, <span class="keyword">char</span>[] password)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        KeyStore keyStore = buildNewKeyStore();</span><br><span class="line">        keyStore.setKeyEntry(</span><br><span class="line">                <span class="string">"key"</span>, privateKey, password, certificateChain.toArray(<span class="keyword">new</span> Certificate[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">return</span> keyStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Construct an in-memory keystore with multiple trusted cert entries. */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> KeyStore <span class="title">buildTrustStore</span><span class="params">(Iterable&lt;Certificate&gt; certificates)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> certificates != <span class="keyword">null</span> : <span class="string">"Cannot create keystore with null certificates"</span>;</span><br><span class="line">        KeyStore store = buildNewKeyStore();</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Certificate certificate : certificates) &#123;</span><br><span class="line">            store.setCertificateEntry(<span class="string">"cert-"</span> + counter, certificate);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> store;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> KeyStore <span class="title">buildDefaultStore</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Path keyStorePath, Supplier&lt;<span class="keyword">char</span>[]&gt; passwordSupplier, String keyStoreType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> GeneralSecurityException, IOException </span>&#123;</span><br><span class="line">        KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">        keyStore.load(</span><br><span class="line">                (keyStorePath.getFileSystem().provider().newInputStream(keyStorePath)),</span><br><span class="line">                passwordSupplier.get());</span><br><span class="line">        <span class="keyword">return</span> keyStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> KeyStore <span class="title">buildNewKeyStore</span><span class="params">()</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                    <span class="string">"Unexpected error initializing a new in-memory keystore"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keyStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> X509ExtendedKeyManager&#125; based on the key material in the provided &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * KeyStore&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> X509ExtendedKeyManager <span class="title">createKeyManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            KeyStore keyStore, <span class="keyword">char</span>[] password, String algorithm)</span> <span class="keyword">throws</span> GeneralSecurityException </span>&#123;</span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(algorithm);</span><br><span class="line">        kmf.init(keyStore, password);</span><br><span class="line">        KeyManager[] keyManagers = kmf.getKeyManagers();</span><br><span class="line">        <span class="keyword">for</span> (KeyManager keyManager : keyManagers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyManager <span class="keyword">instanceof</span> X509ExtendedKeyManager) &#123;</span><br><span class="line">                <span class="keyword">return</span> (X509ExtendedKeyManager) keyManager;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                <span class="string">"failed to find a X509ExtendedKeyManager in the key manager factory for ["</span></span><br><span class="line">                        + algorithm</span><br><span class="line">                        + <span class="string">"] and keystore ["</span></span><br><span class="line">                        + keyStore</span><br><span class="line">                        + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@link</span> X509ExtendedTrustManager&#125; based on the trust material in the provided &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * KeyStore&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> X509ExtendedTrustManager <span class="title">createTrustManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable KeyStore trustStore, String algorithm)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchAlgorithmException, KeyStoreException </span>&#123;</span><br><span class="line">        TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);</span><br><span class="line">        tmf.init(trustStore);</span><br><span class="line">        TrustManager[] trustManagers = tmf.getTrustManagers();</span><br><span class="line">        <span class="keyword">for</span> (TrustManager trustManager : trustManagers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trustManager <span class="keyword">instanceof</span> X509ExtendedTrustManager) &#123;</span><br><span class="line">                <span class="keyword">return</span> (X509ExtendedTrustManager) trustManager;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SslConfigException(</span><br><span class="line">                <span class="string">"failed to find a X509ExtendedTrustManager in the trust manager factory for ["</span></span><br><span class="line">                        + algorithm</span><br><span class="line">                        + <span class="string">"] and truststore ["</span></span><br><span class="line">                        + trustStore</span><br><span class="line">                        + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>读取的私钥是个ASN.1数据，解析其内容：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A bare-minimum ASN.1 DER decoder, just having enough functions to decode PKCS#1 private keys in</span></span><br><span class="line"><span class="comment"> * order to remain JCE/JVM agnostic.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Based on https://github.com/groovenauts/jmeter_oauth_plugin/blob/master/jmeter/src/</span></span><br><span class="line"><span class="comment"> * main/java/org/apache/jmeter/protocol/oauth/sampler/PrivateKeyReader.java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DerParser</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Constructed Flag</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONSTRUCTED = <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tag and data types</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTEGER = <span class="number">0x02</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OCTET_STRING = <span class="number">0x04</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OBJECT_OID = <span class="number">0x06</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMERIC_STRING = <span class="number">0x12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PRINTABLE_STRING = <span class="number">0x13</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VIDEOTEX_STRING = <span class="number">0x15</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IA5_STRING = <span class="number">0x16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GRAPHIC_STRING = <span class="number">0x19</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ISO646_STRING = <span class="number">0x1A</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GENERAL_STRING = <span class="number">0x1B</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UTF8_STRING = <span class="number">0x0C</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNIVERSAL_STRING = <span class="number">0x1C</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BMP_STRING = <span class="number">0x1E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InputStream derInputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxAsnObjectLength;</span><br><span class="line"></span><br><span class="line">    DerParser(<span class="keyword">byte</span>[] bytes) &#123;</span><br><span class="line">        <span class="keyword">this</span>.derInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        <span class="keyword">this</span>.maxAsnObjectLength = bytes.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Asn1Object <span class="title">readAsn1Object</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tag = derInputStream.read();</span><br><span class="line">        <span class="keyword">if</span> (tag == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: stream too short, missing tag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = getLength();</span><br><span class="line">        <span class="comment">// getLength() can return any 32 bit integer, so ensure that a corrupted encoding won't</span></span><br><span class="line">        <span class="comment">// force us into allocating a very large array</span></span><br><span class="line">        <span class="keyword">if</span> (length &gt; maxAsnObjectLength) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(</span><br><span class="line">                    <span class="string">"Invalid DER: size of ASN.1 object to be parsed appears to be larger than the size of the key file "</span></span><br><span class="line">                            + <span class="string">"itself."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] value = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        <span class="keyword">int</span> n = derInputStream.read(value);</span><br><span class="line">        <span class="keyword">if</span> (n &lt; length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(</span><br><span class="line">                    <span class="string">"Invalid DER: stream too short, missing value. "</span></span><br><span class="line">                            + <span class="string">"Could only read "</span></span><br><span class="line">                            + n</span><br><span class="line">                            + <span class="string">" out of "</span></span><br><span class="line">                            + length</span><br><span class="line">                            + <span class="string">" bytes"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Asn1Object(tag, length, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode the length of the field. Can only support length encoding up to 4 octets.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;In BER/DER encoding, length can be encoded in 2 forms:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;Short form. One octet. Bit 8 has value "0" and bits 7-1 give the length.</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;Long form. Two to 127 octets (only 4 is supported here). Bit 8 of first octet has value</span></span><br><span class="line"><span class="comment">     *       "1" and bits 7-1 give the number of additional length octets. Second and following</span></span><br><span class="line"><span class="comment">     *       octets give the length, base 256, most significant digit first.</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The length as integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = derInputStream.read();</span><br><span class="line">        <span class="keyword">if</span> (i == -<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: length missing"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// A single byte short length</span></span><br><span class="line">        <span class="keyword">if</span> ((i &amp; ~<span class="number">0x7F</span>) == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = i &amp; <span class="number">0x7F</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can't handle length longer than 4 bytes</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0xFF</span> || num &gt; <span class="number">4</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: length field too big ("</span> + i + <span class="string">")"</span>); <span class="comment">// $NON-NLS-1$</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[num];</span><br><span class="line">        <span class="keyword">int</span> n = derInputStream.read(bytes);</span><br><span class="line">        <span class="keyword">if</span> (n &lt; num) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: length too short"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(<span class="number">1</span>, bytes).intValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An ASN.1 TLV. The object is not parsed. It can only handle integers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhang</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Asn1Object</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> type;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] value;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> tag;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Construct a ASN.1 TLV. The TLV could be either a constructed or primitive entity.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;The first byte in DER encoding is made of following fields:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">         * -------------------------------------------------</span></span><br><span class="line"><span class="comment">         * |Bit 8|Bit 7|Bit 6|Bit 5|Bit 4|Bit 3|Bit 2|Bit 1|</span></span><br><span class="line"><span class="comment">         * -------------------------------------------------</span></span><br><span class="line"><span class="comment">         * |  Class    | CF  |     +      Type             |</span></span><br><span class="line"><span class="comment">         * -------------------------------------------------</span></span><br><span class="line"><span class="comment">         * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;Class: Universal, Application, Context or Private</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;CF: Constructed flag. If 1, the field is constructed.</span></span><br><span class="line"><span class="comment">         *   &lt;li&gt;Type: This is actually called tag in ASN.1. It indicates data type (Integer,</span></span><br><span class="line"><span class="comment">         *       String) or a construct (sequence, choice, set).</span></span><br><span class="line"><span class="comment">         * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> tag Tag or Identifier</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> length Length of the field</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value Encoded octet string for the field.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Asn1Object(<span class="keyword">int</span> tag, <span class="keyword">int</span> length, <span class="keyword">byte</span>[] value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.tag = tag;</span><br><span class="line">            <span class="keyword">this</span>.type = tag &amp; <span class="number">0x1F</span>;</span><br><span class="line">            <span class="keyword">this</span>.length = length;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> type;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] getValue() &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isConstructed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (tag &amp; DerParser.CONSTRUCTED) == DerParser.CONSTRUCTED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * For constructed field, return a parser for its content.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> A parser for the construct.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> DerParser <span class="title">getParser</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isConstructed())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: can't parse primitive entity"</span>); <span class="comment">// $NON-NLS-1$</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DerParser(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Get the value as integer</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> BigInteger</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BigInteger <span class="title">getInteger</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (type != DerParser.INTEGER)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: object is not integer"</span>); <span class="comment">// $NON-NLS-1$</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">            String encoding;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> DerParser.OCTET_STRING:</span><br><span class="line">                    <span class="comment">// octet string is basically a byte array</span></span><br><span class="line">                    <span class="keyword">return</span> toHexString(value);</span><br><span class="line">                <span class="keyword">case</span> DerParser.NUMERIC_STRING:</span><br><span class="line">                <span class="keyword">case</span> DerParser.PRINTABLE_STRING:</span><br><span class="line">                <span class="keyword">case</span> DerParser.VIDEOTEX_STRING:</span><br><span class="line">                <span class="keyword">case</span> DerParser.IA5_STRING:</span><br><span class="line">                <span class="keyword">case</span> DerParser.GRAPHIC_STRING:</span><br><span class="line">                <span class="keyword">case</span> DerParser.ISO646_STRING:</span><br><span class="line">                <span class="keyword">case</span> DerParser.GENERAL_STRING:</span><br><span class="line">                    encoding = <span class="string">"ISO-8859-1"</span>; <span class="comment">// $NON-NLS-1$</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> DerParser.BMP_STRING:</span><br><span class="line">                    encoding = <span class="string">"UTF-16BE"</span>; <span class="comment">// $NON-NLS-1$</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> DerParser.UTF8_STRING:</span><br><span class="line">                    encoding = <span class="string">"UTF-8"</span>; <span class="comment">// $NON-NLS-1$</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> DerParser.UNIVERSAL_STRING:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: can't handle UCS-4 string"</span>); <span class="comment">// $NON-NLS-1$</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Invalid DER: object is not a string"</span>); <span class="comment">// $NON-NLS-1$</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(value, encoding);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getOid</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (type != DerParser.OBJECT_OID) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Ivalid DER: object is not object OID"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">64</span>);</span><br><span class="line">            <span class="keyword">switch</span> (value[<span class="number">0</span>] / <span class="number">40</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    sb.append(<span class="string">'0'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    sb.append(<span class="string">'1'</span>);</span><br><span class="line">                    value[<span class="number">0</span>] -= <span class="number">40</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    sb.append(<span class="string">'2'</span>);</span><br><span class="line">                    value[<span class="number">0</span>] -= <span class="number">80</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> oidPart = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                oidPart = (oidPart &lt;&lt; <span class="number">7</span>) + (value[i] &amp; <span class="number">0x7F</span>);</span><br><span class="line">                <span class="keyword">if</span> ((value[i] &amp; <span class="number">0x80</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(<span class="string">'.'</span>);</span><br><span class="line">                    sb.append(oidPart);</span><br><span class="line">                    oidPart = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEX_DIGITS = <span class="string">"0123456789abcdef"</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(bytes);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">2</span> * bytes.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) &#123;</span><br><span class="line">            sb.append(HEX_DIGITS[b &gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>]).append(HEX_DIGITS[b &amp; <span class="number">0xf</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>要对其内容进行测试，我们可以模拟一个服务端：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpsMockServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configConnectors</span><span class="params">(Server mockServer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//config ssl</span></span><br><span class="line">        URL url = Thread.currentThread().getContextClassLoader().getResource(<span class="string">"server.keystore.jks"</span>);</span><br><span class="line">        SslContextFactory sslContextFactory = <span class="keyword">new</span> SslContextFactory();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String path = java.net.URLDecoder.decode(url.getFile(), StandardCharsets.UTF_8.name());</span><br><span class="line">            sslContextFactory.setKeyStorePath(path);</span><br><span class="line">            sslContextFactory.setKeyStorePassword(<span class="string">"ericsson"</span>);</span><br><span class="line">            sslContextFactory.setKeyManagerPassword(<span class="string">"ericsson"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HttpConfiguration httpsConfig = <span class="keyword">new</span> HttpConfiguration();</span><br><span class="line">        httpsConfig.setSecurePort(HTTPS_PORT);</span><br><span class="line">        httpsConfig.setSecureScheme(<span class="string">"https"</span>);</span><br><span class="line">        httpsConfig.addCustomizer(<span class="keyword">new</span> SecureRequestCustomizer());</span><br><span class="line"></span><br><span class="line">        ServerConnector sslConnector = <span class="keyword">new</span> ServerConnector(mockServer, <span class="keyword">new</span> SslConnectionFactory(sslContextFactory,</span><br><span class="line">                HttpVersion.HTTP_1_1.asString()), <span class="keyword">new</span> HttpConnectionFactory(httpsConfig));</span><br><span class="line">        sslConnector.setPort(HTTPS_PORT);</span><br><span class="line">        mockServer.addConnector(sslConnector);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用我们分别用客户端生成的<code>client.keystore.jks</code>和<code>client.pem/client.key</code>进行测试即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目开发需要实现服务端和客户端的SSL双向认证，需要用到测试数据验证，下面介绍生成证书的步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="k8s" scheme="http://galudisu.info/categories/k8s/"/>
    
    
      <category term="certificate" scheme="http://galudisu.info/tags/certificate/"/>
    
      <category term="ssl" scheme="http://galudisu.info/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>关于新型数字化技术架构的讨论</title>
    <link href="http://galudisu.info/2020/06/12/philosophy/architecture-retrospective-1/"/>
    <id>http://galudisu.info/2020/06/12/philosophy/architecture-retrospective-1/</id>
    <published>2020-06-12T03:04:06.000Z</published>
    <updated>2020-06-12T02:49:28.838Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1><span id="历史限制">历史限制</span></h1><p>dubbo</p><p>reactive</p><p>spring boot cloud 已经过于冗杂，go语言大靠山k8s</p><p>SaaS —&gt; Cloud native 云生态</p><h1><span id="5g出现意味着什么">5G出现意味着什么？</span></h1><h1><span id="未来">未来</span></h1><p>reactive elastic resilience</p><p>职业将面向全栈，不再区分DBA、后台、前端、运维和开发融合一体。</p><p>应用开发将缩减到20分钟生产一个交互产品。</p><p>云计算将不再由Hadoop体系统治，出现新的计算模型，例如 Akka + Kubernetes</p><h1><span id="我们还能干啥">我们还能干啥</span></h1><p>摒弃原有的架构（阿里云最近重组自救）</p><p>创新、创造力（编程语言百家争鸣）</p><p>云原生</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1&gt;&lt;span id=&quot;历史限制&quot;&gt;历史限制&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;dubbo&lt;/p&gt;
&lt;p&gt;reactive&lt;/p&gt;
&lt;p&gt;spring boot cloud 已经过于冗杂，go语言大靠山k8s&lt;/p&gt;
&lt;p&gt;SaaS —&amp;gt;
      
    
    </summary>
    
    
      <category term="5g" scheme="http://galudisu.info/tags/5g/"/>
    
  </entry>
  
  <entry>
    <title>简单构建的自动化devOps方案</title>
    <link href="http://galudisu.info/2020/03/27/ci/devops-ha-design/"/>
    <id>http://galudisu.info/2020/03/27/ci/devops-ha-design/</id>
    <published>2020-03-27T07:50:03.000Z</published>
    <updated>2020-03-30T02:14:39.317Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="流程架构图">流程架构图</span></h2><p><img src="/img/ci/devops.png" alt=""></p><p>简单设计了一套自动化devOps方案，其中有两个分支：</p><ul><li><p>jenkins分支，部署在公司内部开发服务器上。用于生产环境，由jenkins搭载一套CI/CD。开发完程序代码后，提交，触发构建、检查、单元测试、质量评估。之后推送到测试服务器，提供给测试人员进行功能测试。如果有问题，反馈给开发人员；如果功能点收集完善，通知teamcity分支。</p></li><li><p>teamcity分支，运营和项目负责人收集到功能点后，手动触发teamcity自动构建，推送镜像到harbor。邮件通知项目实施负责人。实施负责人收集功能点、汇报信息，更新k8s服务镜像，推送服务、进行灰度发布、之后上线、若有问题、回滚…</p></li></ul><p><img src="/img/ci/M2WIQ.png" alt=""></p><h2><span id="系统配置">系统配置</span></h2><p>安装系统监控</p><figure class="highlight plain"><figcaption><span>helm</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install --tls --name grafana --namespace monitoring -f grafana-settings.yaml -f grafana-dashboards.yaml grafana</span><br></pre></td></tr></table></figure><p>安装harbor</p><figure class="highlight plain"><figcaption><span>helm</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install --wait --name harbor --namespace kube-system harbor/harbor --set persistence.enabled=false --set expose.type=nodePort --set externalURL=&quot;https://harbor.cplier.com&quot; --set expose.ingress.hosts.core=harbor.cplier.com --set expose.tls.enabled=false --set proxy.httpProxy=&apos;http://harbor.cplier.com&apos; --set proxy.httpsProxy=&apos;https://harbor.cplier.com&apos;</span><br></pre></td></tr></table></figure><p>安装k9s，查看部署和服务情况</p><p><img src="/img/ci/k9s.png" alt=""></p><p>设置外部代理</p><p>nginx设置负载均衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">upstream harbor &#123;</span><br><span class="line">    server 192.168.0.160:30002;</span><br><span class="line">    server 192.168.0.125:30002;</span><br><span class="line">    server 192.168.0.56:30002;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name harbor.cplier.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_pass http://harbor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name harbor.cplier.com;</span><br><span class="line">    ssl_certificate cert/1_harbor.cplier.com_bundle.crt;</span><br><span class="line">    ssl_certificate_key cert/2_harbor.cplier.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        client_max_body_size 1000m;</span><br><span class="line">        proxy_pass http://harbor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>teamcity配置好参数后，触发构建。</p><p><img src="/img/ci/teamcity.png" alt=""></p><p>在k8s集群中，编写相应的service，进行部署，写pvc、配ingress、配字典… what ever…</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    run:</span> <span class="string">cplier-gateway</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cplier-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">cplier-gateway</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">cplier-gateway</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">harbor.cplier.com/library/cplier-gateway:latest</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">cplier-gateway</span></span><br><span class="line"><span class="attr">      imagePullSecrets:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">cplier-gateway</span></span><br></pre></td></tr></table></figure><p><code>image</code>为你的镜像仓储。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;流程架构图&quot;&gt;流程架构图&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/ci/devops.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单设计了一套自动化devOps方案，其中有两个分支：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="devOps" scheme="http://galudisu.info/categories/devOps/"/>
    
    
      <category term="gitlab" scheme="http://galudisu.info/tags/gitlab/"/>
    
      <category term="k8s" scheme="http://galudisu.info/tags/k8s/"/>
    
      <category term="jenkins" scheme="http://galudisu.info/tags/jenkins/"/>
    
      <category term="harbor" scheme="http://galudisu.info/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>2020年学习计划</title>
    <link href="http://galudisu.info/2020/03/11/learning-plan/2020_03_11_study_plan/"/>
    <id>http://galudisu.info/2020/03/11/learning-plan/2020_03_11_study_plan/</id>
    <published>2020-03-11T07:34:35.000Z</published>
    <updated>2020-03-11T09:21:21.471Z</updated>
    
    <content type="html"><![CDATA[<p>不得不说，2019制定的学习计划很糟糕，受干扰的因素太多。另外一方面是自我没有养成良好的习惯。定了7、8个任务，结果也就勉强完成了一半。</p><p>后面发现，学习之前，首先要学会如何学习，于是我硬着头皮去看完了一些如何管理时间、排除外界干扰的一些书籍，例如《刻意学习》、《行为组织管理》、《原则》等。不得不说，结合自身情况后，从书本上也看到自己很多弱点，有些弱点貌似怎么也绕不过去。譬如：</p><a id="more"></a><ol><li>三天打鱼两天晒网。这是职场人士的通病，因为只有一个原因，就是“太累”了。上班一天的脑力劳动，不知烧死了多少细胞，头发还健在不？</li><li>外界干扰。貌似这是不可避免的，例如来场说走就走的旅行，公司突然搞个活动，楼下天天大排档，大病一场… 从《原则》上所说的，如何避免重复犯错，如何进行决策，走倾向于最小风险和最大收获的方向，这是需要以后不断思考的问题。</li><li>习惯就是力量。这是真的，毕业三年后，和同学来个深度对比。就会发现，最后混的好的，不是成绩优秀的人、也不是学生会那帮饕餮之辈，而是拥有良好习惯，善于思考，做事有准备的人。这里的混得好，不是指赚了很多钱，而是能够妥善应对和解决自身的问题。例如，安置家人，发现自己的人生目标并作出成就，学会一项新技能，譬如学个车、考个外语证、打球很溜…</li><li>善于总结。</li><li>向有经验的人请教以及如何请教。</li><li>勇敢说“不”。</li><li>太快或不专心从而导致忽略了上层原理。</li></ol><p>嗯哼！天呀，我怎么这么多缺点… 不活了…</p><p>下面是正题：</p><p>去年基本看完了rust、kubernates、spring cloud、微服务、cassandra。花了比较多精力在看rust，有点难啃，而且社区还在继续改进中。另外还折腾了一下React，做了一个前后端的token登录的例子，稍微写了个vue项目(emmm… 写vue的感觉像极了打酱油)；重新折腾了以前github的一些项目。修改一些以前实现上的缺陷或不对的地方。</p><p>今年计划补完：</p><ol><li>Learning React with TypeScript (20%)</li><li>think in python (60%)</li><li>learning-go (80%)</li><li>Mathematica (20%)</li></ol><p>另外一点需要补充的，需要转变思维。学习用数学建模和算法思维解决问题。这一点是从《原则》的作者中学习得到的，任何凭直觉和自己的经验处理问题的方式，最终都是一种懒惰的技能。用数据来说服自己和他人，是最有力的！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不得不说，2019制定的学习计划很糟糕，受干扰的因素太多。另外一方面是自我没有养成良好的习惯。定了7、8个任务，结果也就勉强完成了一半。&lt;/p&gt;
&lt;p&gt;后面发现，学习之前，首先要学会如何学习，于是我硬着头皮去看完了一些如何管理时间、排除外界干扰的一些书籍，例如《刻意学习》、《行为组织管理》、《原则》等。不得不说，结合自身情况后，从书本上也看到自己很多弱点，有些弱点貌似怎么也绕不过去。譬如：&lt;/p&gt;
    
    </summary>
    
    
      <category term="study" scheme="http://galudisu.info/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Spark 3.0 集群搭建教程</title>
    <link href="http://galudisu.info/2020/03/04/spark/installation/"/>
    <id>http://galudisu.info/2020/03/04/spark/installation/</id>
    <published>2020-03-03T19:44:13.000Z</published>
    <updated>2020-07-13T06:27:30.255Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="先决条件">先决条件</span></h2><p>在部署Spark之前，请确认集群的每个节点都符合以下条件：</p><ol><li>已安装Java 1.8.x或以上版本（推荐1.8版本）</li><li>节点两两之间可以SSH免密码登录</li><li>已部署Hadoop（如果只是部署Standalone Cluster则不需要Hadoop）</li></ol><p>如果你已经按照<a href="/2020/03/04/hadoop/installation">Hadoop集群搭建教程</a>成功建立了Hadoop集群，那么以上条件均已满足。</p><h3><span id="下载spark二进制文件">下载Spark二进制文件</span></h3><p>在Spark的<a href="https://spark.apache.org/downloads.html" target="_blank" rel="noopener">下载页面</a>中有多个版本可以选择，因为之前选择了Hadoop 2.7.7版本，所以这里选择与之对应的 <a href="https://www.apache.org/dyn/closer.lua/spark/spark-3.0.0/spark-3.0.0-bin-without-hadoop.tgz" target="_blank" rel="noopener">Pre-built with user-provided Apache Hadoop</a>版本，Scala版本选择最新的2.12。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget wget https://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-3.0.0/spark-3.0.0-bin-without-hadoop.tgz</span><br><span class="line">tar -xzvf spark-3.0.0-bin-without-hadoop.tgz</span><br></pre></td></tr></table></figure><h3><span id="配置spark环境变量">配置Spark环境变量</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Spark environment</span></span><br><span class="line">export SPARK_HOME=/opt/spark-3.0.0-bin-without-hadoop</span><br><span class="line">export PATH=$PATH:$&#123;SPARK_HOME&#125;/bin</span><br></pre></td></tr></table></figure><h4><span id="spark-envsh"></span></h4><p>因为我们下载的是不带hadoop依赖jar的spark版本，所以需要在spark中指定hadoop的classpath</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配置文件spark-env.sh：</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## in conf/spark-env.sh ###</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> If <span class="string">'hadoop'</span> binary is on your PATH</span></span><br><span class="line">export SPARK_DIST_CLASSPATH=$(hadoop classpath)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> With explicit path to <span class="string">'hadoop'</span> binary</span></span><br><span class="line">export SPARK_DIST_CLASSPATH=$(/path/to/hadoop/bin/hadoop classpath)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Passing a Hadoop configuration directory</span></span><br><span class="line">export SPARK_DIST_CLASSPATH=$(hadoop --config /path/to/configs classpath)</span><br></pre></td></tr></table></figure><p>这里在最后一行添加：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HADOOP_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</span><br><span class="line">export SPARK_DIST_CLASSPATH=$(/opt/hadoop-2.7.7/bin/hadoop classpath)</span><br></pre></td></tr></table></figure><h3><span id="slaves">slaves</span></h3><p>向slaves文件写入slave节点的host/IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">huawei-02</span><br><span class="line">huawei-03</span><br></pre></td></tr></table></figure><h3><span id="将配置好的spark分发到其它节点">将配置好的Spark分发到其它节点</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/spark-3.0.0-bin-without-hadoop huawei-02:/opt/spark-3.0.0-bin-without-hadoop</span><br><span class="line">scp -r /opt/spark-3.0.0-bin-without-hadoop huawei-03:/opt/spark-3.0.0-bin-without-hadoop</span><br></pre></td></tr></table></figure><h3><span id="启动spark">启动Spark</span></h3><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./opt/spark-3.0.0=bin-without-hadoop/sbin/start-all.sh</span><br></pre></td></tr></table></figure><p>打开浏览器，输入<code>[主机]:8080</code> 出现下面节点则表示启动成功了。</p><p><img src="/img/spark/spark-master.png" alt="spark cluster"></p><p>关于：<code>WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</code>问题的解决。</p><p>其实该问题不影响使用。就是没有加载到linux共享库，打开<code>/etc/rpfile</code>，</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">export LD_LIBRARY_PATH=$HADOOP_HOME/lib/native/:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p>source一下就解决了。</p><p>查看<code>sbin</code>目录，可以看到spark提供了几种启动方式.</p><h3><span id="spark-的三种启动方式">Spark 的三种启动方式</span></h3><p>Spark最主要资源管理方式按排名为Hadoop Yarn, Apache Standalone 和Mesos。在单机使用时，Spark还可以采用最基本的local模式。</p><p>目前Apache Spark支持三种分布式部署方式，分别是standalone、spark on mesos和 spark on YARN，其中，第一种类似于MapReduce 1.0所采用的模式，内部实现了容错性和资源管理，后两种则是未来发展的趋势，部分容错性和资源管理交由统一的资源管理系统完成：让Spark运行在一个通用的资源管理系统之上，这样可以与其他计算框架，比如MapReduce，公用一个集群资源，最大的好处是降低运维成本和提高资源利用率（资源按需分配）。本文将介绍这三种部署方式，并比较其优缺点。</p><ol><li>Standalone模式</li></ol><p>即独立模式，自带完整的服务，可单独部署到一个集群中，无需依赖任何其他资源管理系统。从一定程度上说，该模式是其他两种的基础。借鉴Spark开发模式，我们可以得到一种开发新型计算框架的一般思路：先设计出它的standalone模式，为了快速开发，起初不需要考虑服务（比如master/slave）的容错性，之后再开发相应的wrapper，将stanlone模式下的服务原封不动的部署到资源管理系统yarn或者mesos上，由资源管理系统负责服务本身的容错。目前Spark在standalone模式下是没有任何单点故障问题的，这是借助zookeeper实现的，思想类似于Hbase master单点故障解决方案。将Spark standalone与MapReduce比较，会发现它们两个在架构上是完全一致的：</p><ol><li>都是由master/slaves服务组成的，且起初master均存在单点故障，后来均通过zookeeper解决（Apache MRv1的JobTracker仍存在单点问题，但CDH版本得到了解决）；</li><li>各个节点上的资源被抽象成粗粒度的slot，有多少slot就能同时运行多少task。不同的是，MapReduce将slot分为map slot和reduce slot，它们分别只能供Map Task和Reduce Task使用，而不能共享，这是MapReduce资源利率低效的原因之一，而Spark则更优化一些，它不区分slot类型，只有一种slot，可以供各种类型的Task使用，这种方式可以提高资源利用率，但是不够灵活，不能为不同类型的Task定制slot资源。总之，这两种方式各有优缺点。</li></ol><ol start="2"><li>Spark On Mesos模式</li></ol><p>这是很多公司采用的模式，官方推荐这种模式（当然，原因之一是血缘关系）。正是由于Spark开发之初就考虑到支持Mesos，因此，目前而言，Spark运行在Mesos上会比运行在YARN上更加灵活，更加自然。目前在Spark On Mesos环境中，用户可选择两种调度模式之一运行自己的应用程序（可参考Andrew Xia的“Mesos Scheduling Mode on Spark”）：</p><ol><li><p>粗粒度模式（Coarse-grained Mode）：每个应用程序的运行环境由一个Dirver和若干个Executor组成，其中，每个Executor占用若干资源，内部可运行多个Task（对应多少个“slot”）。应用程序的各个任务正式运行之前，需要将运行环境中的资源全部申请好，且运行过程中要一直占用这些资源，即使不用，最后程序运行结束后，回收这些资源。举个例子，比如你提交应用程序时，指定使用5个executor运行你的应用程序，每个executor占用5GB内存和5个CPU，每个executor内部设置了5个slot，则Mesos需要先为executor分配资源并启动它们，之后开始调度任务。另外，在程序运行过程中，mesos的master和slave并不知道executor内部各个task的运行情况，executor直接将任务状态通过内部的通信机制汇报给Driver，从一定程度上可以认为，每个应用程序利用mesos搭建了一个虚拟集群自己使用。</p></li><li><p>细粒度模式（Fine-grained Mode）：鉴于粗粒度模式会造成大量资源浪费，Spark On Mesos还提供了另外一种调度模式：细粒度模式，这种模式类似于现在的云计算，思想是按需分配。与粗粒度模式一样，应用程序启动时，先会启动executor，但每个executor占用资源仅仅是自己运行所需的资源，不需要考虑将来要运行的任务，之后，mesos会为每个executor动态分配资源，每分配一些，便可以运行一个新任务，单个Task运行完之后可以马上释放对应的资源。每个Task会汇报状态给Mesos slave和Mesos Master，便于更加细粒度管理和容错，这种调度模式类似于MapReduce调度模式，每个Task完全独立，优点是便于资源控制和隔离，但缺点也很明显，短作业运行延迟大。</p></li></ol><ol start="3"><li>Spark On YARN模式</li></ol><p>这是一种很有前景的部署模式。但限于YARN自身的发展，目前仅支持粗粒度模式（Coarse-grained Mode）。这是由于YARN上的Container资源是不可以动态伸缩的，一旦Container启动之后，可使用的资源不能再发生变化，不过这个已经在YARN计划中了。<br>spark on yarn 的支持两种模式：</p><ol><li>yarn-cluster：适用于生产环境；</li><li>yarn-client：适用于交互、调试，希望立即看到app的输出</li></ol><p>yarn-cluster和yarn-client的区别在于yarn appMaster，每个yarn app实例有一个appMaster进程，是为app启动的第一个container；负责从ResourceManager请求资源，获取到资源后，告诉NodeManager为其启动container。yarn-cluster和yarn-client模式内部实现还是有很大的区别。如果你需要用于生产环境，那么请选择yarn-cluster；而如果你仅仅是Debug程序，可以选择yarn-client。</p><p>总结：<br>这三种分布式部署方式各有利弊，通常需要根据实际情况决定采用哪种方案。进行方案选择时，往往要考虑公司的技术路线（采用Hadoop生态系统还是其他生态系统）、相关技术人才储备等。上面涉及到Spark的许多部署模式，究竟哪种模式好这个很难说，需要根据你的需求，如果你只是测试Spark Application，你可以选择local模式。而如果你数据量不是很多，Standalone 是个不错的选择。当你需要统一管理集群资源（Hadoop、Spark等），那么你可以选择Yarn或者mesos，但是这样维护成本就会变高。<br>· 从对比上看，mesos似乎是Spark更好的选择，也是被官方推荐的<br>· 但如果你同时运行hadoop和Spark,从兼容性上考虑，Yarn是更好的选择。 · 如果你不仅运行了hadoop，spark。还在资源管理上运行了docker，Mesos更加通用。<br>· Standalone对于小规模计算集群更适合！</p><p>更多关于启动模式的介绍，可以查看<a href="/2018/10/26/spark/spark-cluster-config">先前</a>的文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;先决条件&quot;&gt;先决条件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在部署Spark之前，请确认集群的每个节点都符合以下条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已安装Java 1.8.x或以上版本（推荐1.8版本）&lt;/li&gt;
&lt;li&gt;节点
      
    
    </summary>
    
    
      <category term="spark" scheme="http://galudisu.info/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Flink 集群搭建教程</title>
    <link href="http://galudisu.info/2020/03/04/flink/installation/"/>
    <id>http://galudisu.info/2020/03/04/flink/installation/</id>
    <published>2020-03-03T18:44:13.000Z</published>
    <updated>2020-07-13T05:57:28.707Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2><span id="先决条件">先决条件</span></h2><p>在部署Flink之前，请确认集群的每个节点都符合以下条件：</p><ol><li>已安装Java 1.8.x或以上版本（推荐1.8版本）</li><li>节点两两之间可以SSH免密码登录</li><li>已部署Hadoop（如果只是部署Standalone Cluster则不需要Hadoop）</li></ol><p>如果你已经按照<a href="/2020/03/04/hadoop/installation">Hadoop集群搭建教程</a>成功建立了Hadoop集群，那么以上条件均已满足。</p><h3><span id="下载flink二进制文件">下载Flink二进制文件</span></h3><p>在Flink的<a href="https://flink.apache.org/downloads.html" target="_blank" rel="noopener">下载页面</a>中有多个版本可以选择，因为之前选择了Hadoop 2.7.7版本，所以这里选择与之对应的 <a href="https://www.apache.org/dyn/closer.lua/flink/flink-1.9.2/flink-1.9.2-bin-scala_2.12.tgz" target="_blank" rel="noopener">Apache Flink 1.9.2 for Scala 2.12</a>版本，Scala版本选择最新的2.12。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/flink/flink-1.9.2/flink-1.9.2-bin-scala_2.12.tgz</span><br><span class="line">tar -xzvf flink-1.9.2-bin-scala_2.12.tgz</span><br></pre></td></tr></table></figure><h3><span id="配置flink">配置Flink</span></h3><blockquote><p>注意：如果只需要部署Flink on YARN，那么可以跳过这小节，因为YARN会帮你打理好一切。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/flink-1.9.2/conf</span><br></pre></td></tr></table></figure><h4><span id="flink-confyaml">flink-conf.yaml</span></h4><p>将<code>jobmanager.rpc.address</code>指向master节点，其它配置可以按照机器实际硬件情况填写，此处使用默认值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The host/IP of JobManager</span></span><br><span class="line"><span class="string">jobmanager.rpc.address:</span> <span class="string">huawei-01</span></span><br><span class="line"><span class="comment"># The heap size for the JobManager JVM</span></span><br><span class="line"><span class="string">jobmanager.heap.size:</span> <span class="number">1024</span><span class="string">m</span></span><br><span class="line"><span class="comment"># The heap size for the TaskManager JVM</span></span><br><span class="line"><span class="string">taskmanager.heap.size:</span> <span class="number">1024</span><span class="string">m</span></span><br><span class="line"><span class="comment"># The number of task slots that each TaskManager offers. Each slot runs one parallel pipeline.</span></span><br><span class="line"><span class="string">taskmanager.numberOfTaskSlots:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># The parallelism used for programs that did not specify and other parallelism.</span></span><br><span class="line"><span class="string">parallelism.default:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3><span id="slaves">slaves</span></h3><p>向slaves文件写入slave节点的host/IP地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">huawei-02</span><br><span class="line">huawei-03</span><br></pre></td></tr></table></figure><h3><span id="将配置好的flink分发到其它节点">将配置好的Flink分发到其它节点</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/flink-1.9.2 huawei-02:/opt/flink-1.9.2</span><br><span class="line">scp -r /opt/flink-1.9.2 huawei-03:/opt/flink-1.9.2</span><br></pre></td></tr></table></figure><h3><span id="以standalone模式启动flink">以Standalone模式启动Flink</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $FLINK_HOME</span><br><span class="line">./bin/start-cluster.sh</span><br></pre></td></tr></table></figure><p>然后可以在<code>huawei-01:8081</code>查看Flink集群的运行情况</p><p><img src="/img/flink/flink-dashboard.png" alt="flink-dashboard.png"></p><p><code>./examples</code>路径下游许多打包好的实例程序，可以用于验证Flink集群是否正常运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run ./exmaple/batch/WordCount.jar</span><br></pre></td></tr></table></figure><p>上面的命令会向 Flink 集群提交一个 wordcount 任务，这个示例程序可以指定输入和输出路径，这里没有指定，因此输入文件为程序自带的一小段文本，结果直接输出在屏幕上。 如果 Flink 集群工作正常，应该会在屏幕上输出以下结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 省略前面的输出</span></span><br><span class="line">(wrong,1)</span><br><span class="line">(you,1)</span><br><span class="line">Program execution finished</span><br><span class="line">Job with JobID d7df697505c1f68d4eda2828b6eb18e2 has finished.</span><br><span class="line">Job Runtime: 3158 ms</span><br><span class="line">Accumulator Results:</span><br><span class="line">- 47b31488879a3449d67aca67f5b75188 (java.util.ArrayList) [170 elements]</span><br></pre></td></tr></table></figure><h2><span id="以flink-on-yarn模式启动">以Flink on YARN模式启动</span></h2><p>把 Flink 运行在 YARN 上有两种方式，第一种方式是建立一个长期运行的 Flink YARN Session，然后向这个 Session 提交 Flink Job，多个任务同时运行时会共享资源。第二种方式是为单个任务启动一个 Flink 集群，这个任务会独占 Flink 集群的所有资源，任务结束即代表集群被回收。</p><p>另外，Flink on YARN 模式需要系统中设置了 YARN_CONF_DIR 或 HADOOP_CONF_DIR 环境变量，如果未设置，请在 <code>~/.profile</code> 中加入以下内容，然后使用 <code>source ~/.profile</code> 命令使修改立即生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在这条命令前定义HADOOP_HOME环境变量</span></span><br><span class="line">export HADOOP_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</span><br></pre></td></tr></table></figure><h3><span id="flink-yarn-session">Flink YARN Session</span></h3><p>由于新版本的Flink已经不包含Hadoop依赖项，需要自己添加依赖。首先下载<a href="https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar" target="_blank" rel="noopener">Pre-bundled Hadoop 2.7.5</a> 包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cd $FLINK_HOME/lib</span><br><span class="line">wget https://repo.maven.apache.org/maven2/org/apache/flink/flink-shaded-hadoop-2-uber/2.7.5-10.0/flink-shaded-hadoop-2-uber-2.7.5-10.0.jar</span><br></pre></td></tr></table></figure><p>使用下列命令来启动一个拥有 2 个 TaskManager 的 Flink 集群，每个 TaskManager 有 2 GB 内存，2 个 slot。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/YARN-session.sh -n 2 -jm 1024m -tm 2048</span><br></pre></td></tr></table></figure><p>完整的参数列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">   Required</span><br><span class="line">     -n,--container &lt;arg&gt;   Number of YARN container to allocate (=Number of Task Managers)</span><br><span class="line">   Optional</span><br><span class="line">     -D &lt;arg&gt;                        Dynamic properties</span><br><span class="line">     -d,--detached                   Start detached</span><br><span class="line">     -jm,--jobManagerMemory &lt;arg&gt;    Memory for JobManager Container with optional unit (default: MB)</span><br><span class="line">     -nm,--name                      Set a custom name for the application on YARN</span><br><span class="line">     -q,--query                      Display available YARN resources (memory, cores)</span><br><span class="line">     -qu,--queue &lt;arg&gt;               Specify YARN queue.</span><br><span class="line">     -s,--slots &lt;arg&gt;                Number of slots per TaskManager</span><br><span class="line">     -tm,--taskManagerMemory &lt;arg&gt;   Memory per TaskManager Container with optional unit (default: MB)</span><br><span class="line">     -z,--zookeeperNamespace &lt;arg&gt;   Namespace to create the Zookeeper sub-paths for HA mode</span><br></pre></td></tr></table></figure><p>启动 YARN Session 以后会输出 JobManager 的 Web Interface 地址，打开以后是这样的：</p><p><img src="/img/flink/tracking-ui.png" alt="hadop-application"></p><p><img src="/img/flink/yarn-session.png" alt="yarn-session.png"></p><p>仔细一看，Task Managers，Task Slots 怎么都是 0 呢？难道是哪里出了问题？其实并没有问题，从某个版本开始 Flink 允许动态分配资源，在没有任务的时候不分配 TaskManager。接下来我们就提交一个任务试试。</p><p>因为启动 YARN Session 以后 Flink Client 会一直在前台运行，所以先用 <code>Ctrl + Z</code> 快捷键把 Client 转到后台，然后再提交任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><p><img src="/img/flink/wordcount-job.png" alt="wordcount-job.png"></p><p>在任务运行期间观察 Web Interface，会发现 Task Managers 变为 1，Task Slots 变为 2 ，与启动集群时指定的参数不符，这是因为 YARN 集群中只有两个 NodeManager，huawei-02 和 huawei-03，其中一个作为 JobManager，因此只剩一个节点可以作为 TaskManager。</p><p>任务的运行结果和 Standalone 模式下完全一样。</p><h3><span id="single-flink-job-on-yarn">Single Flink job on YARN</span></h3><p>下面这条命令会为 wordcount 任务启动一个独占的 Flink 集群，任务结束集群即被回收。其中 -m 选项指定 Flink 集群的启动模式，-yn 选项指定 TaskManager 的数目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/flink run -m YARN-cluster -yn 2 ./examples/batch/WordCount.jar</span><br></pre></td></tr></table></figure><p>任务的运行结果和 Standalone 模式下完全一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2&gt;&lt;span id=&quot;先决条件&quot;&gt;先决条件&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;在部署Flink之前，请确认集群的每个节点都符合以下条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已安装Java 1.8.x或以上版本（推荐1.8版本）&lt;/li&gt;
&lt;li&gt;节点
      
    
    </summary>
    
    
      <category term="flink" scheme="http://galudisu.info/tags/flink/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop 集群搭建教程</title>
    <link href="http://galudisu.info/2020/03/04/hadoop/installation/"/>
    <id>http://galudisu.info/2020/03/04/hadoop/installation/</id>
    <published>2020-03-03T16:44:13.000Z</published>
    <updated>2020-03-11T08:18:20.698Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>这篇文章介绍了搭建一个三节点Hadoop集群时的顺序，三台机为内网IP。对应的hostname分别为huawei-01，huawei-03，huawei-03。其中第一台作为master，后面两台作为slaves。</p><h2><span id="先决条件">先决条件</span></h2><p>在安装Hadoop之前，请确认集群的每台机器上均安装JDK，以及搭配环境变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Java Environment</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_181-amd64/</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>另外，需要在三台机器<code>/etc/hosts</code>写入对应机器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 三台机的私有网络IP</span><br><span class="line"></span><br><span class="line">192.168.0.125huawei-02</span><br><span class="line">192.168.0.160huawei-01</span><br><span class="line">192.168.0.56huawei-03</span><br></pre></td></tr></table></figure><p>还要修改对应hostname，因为DataNode上的日志文件后解释hostname（不知是不是这原因）。</p><h2><span id="下载二进制文件">下载二进制文件</span></h2><p>Hadoop有很多版本选择，考虑会后续Hadoop会部署其它应用，所以选择兼容性最好的2.7.7版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-2.7.7/hadoop-2.7.7.tar.gz</span><br><span class="line">tar -zxvf hadoop-2.7.7.tar.gz -C .</span><br></pre></td></tr></table></figure><h2><span id="修改配置文件">修改配置文件</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> Flink Environment</span></span><br><span class="line">export HADOOP_HOME=/opt/hadoop-2.7.7</span><br><span class="line">export PATH=$PATH:$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin</span><br></pre></td></tr></table></figure><h3><span id="core-sitexml">core-site.xml</span></h3><p>指定NameNode的IP地址和端口号，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://huawei-01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="hdfs-sitexml">hdfs-site.xml</span></h3><p><code>dfs.replication</code> 指定备份数目为 3，<code>dfs.name.dir</code> 指定 NameNode 的文件存储路径，<code>dfs.data.dir</code> 指定 DataNode 的文件存储路径。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/hadoop-2.7.7/data/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/hadoop-2.7.7/data/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="mapred-sitexml">mapred-site.xml</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br></pre></td></tr></table></figure><p>然后修改<code>mapred-site.xml</code>的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="yarn-sitexml">yarn-site.xml</span></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>huawei-01:8025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>huawei-01:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>huawei-01:8050<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="slaves">slaves</span></h3><p>添加slave节点的hostname到该文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">huawei-02</span><br><span class="line">huawei-03</span><br></pre></td></tr></table></figure><h3><span id="hadoop-envsh"></span></h3><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_181-amd64/</span><br></pre></td></tr></table></figure><h2><span id="分发配置文件">分发配置文件</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /opt/hadoop-2.7.7 huawei-02:/opt/hadoop-2.7.7</span><br><span class="line">scp -r /opt/hadoop-2.7.7 huawei-03:/opt/hadoop-2.7.7</span><br></pre></td></tr></table></figure><h2><span id="启动集群">启动集群</span></h2><h3><span id="格式化hdfs">格式化HDFS</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><h3><span id="启动集群">启动集群</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br></pre></td></tr></table></figure><p>使用jps命令查看服务运行情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> master节点中运行的服务</span></span><br><span class="line">25928 SecondaryNameNode</span><br><span class="line">25742 NameNode</span><br><span class="line">26387 Jps</span><br><span class="line">26078 ResourceManager</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> slave节点中运行的服务</span></span><br><span class="line">24002 NodeManager</span><br><span class="line">23899 DataNode</span><br><span class="line">24179 Jps</span><br></pre></td></tr></table></figure><h2><span id="提交示例任务">提交示例任务</span></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/hadoop-2.7.7</span><br><span class="line">hdfs dfs -mkdir /wordcount/input</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把当前路径下的 LICENSE.txt 文件复制到 HDFS 中</span></span><br><span class="line">hadoop fs -put ./LICENSE.txt /wordcount/input</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交任务，最后两个参数分别指定任务的输入和输出</span></span><br><span class="line">hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar wordcount /wordcount/input /wordcount/output</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看输出路径</span></span><br><span class="line">hadoop fs -ls /wordcount/output</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果一切正常，该路径下包含两个文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一个文件是空文件，表示任务运行成功</span></span><br><span class="line">/wordcount/output/_SUCCESS</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个文件是输出文件，统计了 LICENSE.txt 中每个单词出现的次数</span></span><br><span class="line">/wordcount/output/part-r-00000</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这篇文章介绍了搭建一个三节点Hadoop集群时的顺序，三台机为内网IP。对应的hostname分别为huawei-01，huawei-03，huawei-03。其中第一台作为master，后面两台作为slaves。&lt;/p&gt;
&lt;h2&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="hadoop" scheme="http://galudisu.info/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Akka Typed 协议和行为</title>
    <link href="http://galudisu.info/2020/01/03/akka/typed/akka-typed/"/>
    <id>http://galudisu.info/2020/01/03/akka/typed/akka-typed/</id>
    <published>2020-01-03T06:26:45.000Z</published>
    <updated>2020-02-18T05:02:16.095Z</updated>
    
    <content type="html"><![CDATA[<p>2019年11月6号LightBend公司发布了AKKA 2.6版本，带来了类型安全的actor，新的Akka Cluster底层通信设施——Artery，带来了更好的稳定性，使用Jackson进行消息序列化，支持SLF4J日志接口。</p><h2><span id="why-akka-typed">Why Akka Typed</span></h2><p>actor编程模型是一个强有力的抽象模型，尤其擅长解决真实世界建模，容错、并发、分布式系统问题。actor抽象编程模型构建于在互相独立的actor之间发送消息的基础之上，actor可以创建子actor，并负责监管，当子actor出现错误的时候可以重启或者重新创建，这套容错机制给整个actor系统带来了自愈能力。</p><p>经典的Akka actor API非常简单，就是提供一组处理和接收消息的函数：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the Actor trait (AbstractActor class in Java) is the entry point for using the API</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderProcessor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// receive方法处理消息</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> order @ <span class="type">OrderProcessor</span>.<span class="type">ProcessOrder</span> =&gt;</span><br><span class="line">  <span class="comment">// actor方法繁衍新的actor</span></span><br><span class="line">  <span class="keyword">val</span> connection = context.actorOf(</span><br><span class="line">    <span class="type">BankConnection</span>.props(order.bankIndentifier)</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// !方法表示即发即弃</span></span><br><span class="line">  connection ! <span class="type">BankConnection</span>.<span class="type">ExecuteOrder</span>(order)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种编程模型和API在多线程环境中具有显著的优势，每个actor顺序处理接收到的消息，actor的内部状态也只有它本身可以修改，这比并发的修改共享状态容易多了。</p><p>天下没有免费的午餐，actor编程模型也有它的缺点，槽点在这篇文章中有提到：<a href="https://manuel.bernhardt.io/2017/05/29/akka-anti-patterns-overview/" target="_blank" rel="noopener">Akka anti-patterns series</a></p><p>这些年来我在一些稍微大一些的Akka工程中见到的最大的问题是actor系统随着业务越做越大，并且非常难以扩展。根本原因是这套Akka API没有强制用户采用“协议优先”的规范。实际上Akka官方教程里最先讲述的就是清晰的定义组件之间的通信协议（也就是消息），并使用全路径访问消息。已上面的例子来说，OrderProcessor的通信协议定义如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伴生对象存放了消息的定义</span></span><br><span class="line"><span class="comment">// 对于集群或持久化系统，消息定义需要使用合适的序列化机制，譬如protobuf</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">OrderProcessor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class">  <span class="title">final</span> <span class="title">case</span> <span class="title">class</span> <span class="title">ProcessOrder</span>(<span class="params">bank: <span class="type">BankId</span>, fromAccount: <span class="type">AccountId</span>, toAccount: <span class="type">AccountId</span>, amount: <span class="type">Amount</span></span>) <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p>即便你遵照Akka最佳实践，但还是无法保证给actor发送一些它不支持消息，actor的receive方法会接受任意类型的消息，当它收到不支持的消息时，便自动转给unhandled方法，此方法默认只会打日志记录一下（需要正确的配置日志打印机制），这对新人来说太坑了，你找不到任何错误，但是系统就是无法正常工作。</p><p>更深层次的原因在于缺少一种机制来帮助我们维护actor之间的通信协议。随着消息类型增多，很容易忘记这些actor都支持什么类型的消息。通过单元测试和严格的日志级别会有助于缓解这种问题（只要接受到不支持的消息就打warn日志），但是仍然无法完全避免。</p><p>Akka Typed就是为了解决这个问题，新的API是为“协议优先”设计的，在实现功能之前，你必须花一点时间想一想每一个actor要处理哪些消息。经典的Actor API的最佳实践也是如此，但却是可选的，你需要在实现的过程中使要处理消息条理清晰。</p><p>看过许多真实的Akka System分享之后，有一点必须强调一下：开发Akka Typed的目的不仅仅是为了以结构化的方式组织消息以及防止丢失那一点点actor不支持的消息，它的主要目的是引导我们优先考虑系统设计。设计一组恰到好处的actor，适当的通信粒度，正确的消息模式，这样就可以构建一个强大的系统，但是它的核心却非常简单，就像高考一样简单。但是我见到太多过度设计，大家倾向于设计过多的actor以及消息，引入了不必要的复杂度，最后尾大不掉。</p><h2><span id="lets-build-a-payment-processor">Let’s build a payment processor</span></h2><p>前面我们已经讲过使用Akka Typed可以非常容易的定义协议，但什么是“协议”呢？协议仅仅是“消息”吗？简单来说协议就是：定义一组消息，在两个及以上的组件之间按特定的顺序和组合传递。常见的协议有TCP、HTTPS等，而我们定义的是应用层的协议。你可以认为协议就是增强版的API：API只定义了个体之间的调用格式（参数、请求内容、响应内容等），协议描述了怎么通过组件之间的相互调用使系统到达期望的状态。</p><p>在Akka Typed API中，协议由一组消息class和对应类型的actor组成。下面的例子展示了从configuration组件获取配置数据的协议：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">ConfigurationMessage</span></span></span><br><span class="line"><span class="class"><span class="title">final</span> <span class="title">case</span> <span class="title">class</span> <span class="title">RetrieveConfiguration</span>(<span class="params">merchantId: <span class="type">MerchantId</span>, replyTo: <span class="type">ActorRef</span>[<span class="type">ConfigurationResponse</span>]</span>) <span class="keyword">extends</span> <span class="title">ConfigurationMessage</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">sealed</span> <span class="title">trait</span> <span class="title">ConfigurationResponse</span></span></span><br><span class="line"><span class="class"><span class="title">final</span> <span class="title">case</span> <span class="title">class</span> <span class="title">ConfigurationFound</span>(<span class="params">merchantId: <span class="type">MerchantId</span>,  merchantConfiguration: <span class="type">MerchantConfiguration</span></span>) <span class="keyword">extends</span> <span class="title">ConfigurationResponse</span></span></span><br><span class="line"><span class="class"><span class="title">final</span> <span class="title">case</span> <span class="title">class</span> <span class="title">ConfigurationNotFound</span>(<span class="params">merchanId: <span class="type">MerchantId</span></span>) <span class="keyword">extends</span> <span class="title">ConfigurationResponse</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">MerchantId</span>(<span class="params">id: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">AnyVal</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">BankIdentifier</span>(<span class="params">id: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">AnyVal</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">MerchantConfiguration</span>(<span class="params">bankIdentifier: <span class="type">BankIdentifier</span></span>)</span></span><br></pre></td></tr></table></figure><p>这个例子遵循了请求-响应的消息设计模式，欲知更多详情，请参见本书：<a href="https://www.manning.com/books/reactive-design-patterns" target="_blank" rel="noopener">Reactive Design Patterns</a></p><p>如果你以前用过经典的Actor API，你会发现这里的实现方式有两个不同的地方，第一个是消息发送者的引用包含在消息的定义中，经典的Actor API是通过Akka提供的sender()方法来获取发送者的。第二个是消息class中包含的ActorRef是有类型的，发送者使用它的时候就可以清楚的知道应该发送什么类型的消息。我们使用接口ConfigurationResponse定义了配置数据的返回格式，它有两个实现类，这样发送者就可以发送两种格式的消息。</p><p>看了Actor的定义之后，就能理解为什么Akka Typed比经典的Actor更容易且更安全的解决协议问题，Configuration的定义如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configuration</span>(<span class="params">context: <span class="type">ActorContext</span>[<span class="type">ConfigurationMessage</span>]</span>) <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>[<span class="type">ConfigurationMessage</span>] </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义的actor继承<code>AbstractBehavior</code>，并带有指定的类型，它只能处理<code>ConfigurationMessage</code>类型的消息，编译器可以帮助我们检查消息的发送者发送的消息是否正确。</p><p>上面的例子中我们使用面向对象的编程方式定义了Actor，稍后我们会展示函数式编程风格。</p><h2><span id="implementing-our-first-typed-actor">Implementing our first typed actor</span></h2><p><code>Configuration</code>提供查询功能：根据商户Id查询支付方式。我们继续使用面向对象的编程方式，如果使用过经典的Akka API，你对这种使用方式应该非常熟悉。</p><p>继承<code>AbstractBehavior</code>就必须实现<code>onMessage</code>方法，它返回一个<code>Behavior</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the AbstractBehavior trait is the entry point for using the object-oriented style API</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configuration</span>(<span class="params">context: <span class="type">ActorContext</span>[<span class="type">ConfigurationMessage</span>]</span>) <span class="keyword">extends</span> <span class="title">AbstractBehavior</span>[<span class="type">ConfigurationMessage</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the mutable state here holds the configuration values of each merchant we know about</span></span><br><span class="line">  <span class="keyword">var</span> configurations: <span class="type">Map</span>[<span class="type">MerchantId</span>, <span class="type">MerchantConfiguration</span>] = <span class="type">Map</span>.empty</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the onMessage method defines the initial behavior applied to a message upon reception</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onMessage</span></span>(msg: <span class="type">ConfigurationMessage</span>): <span class="type">Behavior</span>[<span class="type">ConfigurationMessage</span>] = msg <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">RetrieveConfiguration</span>(merchantId, replyTo) =&gt;</span><br><span class="line">      configurations.get(merchantId) <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Some</span>(configuration) =&gt;</span><br><span class="line">          <span class="comment">// reply to the sender using the fire-and-forget paradigm</span></span><br><span class="line">          replyTo ! <span class="type">ConfigurationFound</span>(merchantId, configuration)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">None</span> =&gt;</span><br><span class="line">          <span class="comment">// reply to the sender using the fire-and-forget paradigm</span></span><br><span class="line">          replyTo ! <span class="type">ConfigurationNotFound</span>(merchantId)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// lastly, return the Behavior to be applied to the next received message</span></span><br><span class="line">      <span class="comment">// in this case, that's just the same Behavior as we already have</span></span><br><span class="line">      <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个actor与我们在本文开头使用经典的actor API定义的actor非常相似：覆盖onMessage方法，并根据指定的消息类型做出对应的响应。</p><p>不同点在于onMessage对应的方法返回的是一个Behavior，一个actor接收到消息之后的行为包含如下3个步骤：</p><p>发送一条或多条消息给其他的actor<br>创建子acotr<br>返回一个新的行为，准备接收下一个消息<br>在Akka Typed API中，一个Behavior即代表了处理当前消息的行为，也表明了如何处理下一个消息——通过返回一个新的Behavior。也可以只是返回当前行为（就像上面的例子一样），因为使用面向对象风格的actor继承自AbstractBehavior，它本身就是一个Behavior，所以可以使用return this。</p><p>本系列教程后面会讨论更多关于Behavior的用法，使用Akka Typed API定义的actor的一个优点就是非常容易组合和测试。</p><p>Typed Akka TestKit可以帮助你轻而易举的对actor进行测试：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigurationSpec</span> <span class="keyword">extends</span> <span class="title">ScalaTestWithActorTestKit</span> <span class="keyword">with</span> <span class="title">WordSpecLike</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">"The Configuration actor"</span> should &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">"not find a configuration for an unknown merchant"</span> in &#123;</span><br><span class="line">      <span class="comment">// define a probe which allows it to easily send messages</span></span><br><span class="line">      <span class="keyword">val</span> probe = createTestProbe[<span class="type">ConfigurationResponse</span>]()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// spawn a new Configuration actor as child of the TestKit's guardian actor</span></span><br><span class="line">      <span class="keyword">val</span> configurationActor = spawn(<span class="type">Configuration</span>())</span><br><span class="line"></span><br><span class="line">      <span class="comment">// send a message to the actor under test with the probe's reference as sender</span></span><br><span class="line">      configurationActor ! <span class="type">Configuration</span>.<span class="type">RetrieveConfiguration</span>(<span class="type">MerchantId</span>(<span class="string">"unknown"</span>), probe.ref)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// expect a certain type of message as response. there are many different ways to retrieve</span></span><br><span class="line">      <span class="comment">// or to expect messages</span></span><br><span class="line">      <span class="keyword">val</span> response = probe.expectMessageType[<span class="type">Configuration</span>.<span class="type">ConfigurationNotFound</span>]</span><br><span class="line">      response.merchanId shouldBe <span class="type">MerchantId</span>(<span class="string">"unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="supervising-and-starting-the-actor">Supervising and starting the actor</span></h2><p>actor System为actor提供运行环境、分配资源、基础设施。在这个系统中，每一个actor都有一个父actor，最顶层的actor叫做根节点（<code>root</code>)，使用<code>/</code>代表，它的两个直接子actor是<code>/user</code>和<code>/system</code>，<code>/user</code>用于在用户空间创建子actor，<code>/system</code>属于akka系统内部管理，所以我们创建的所有的actor都从属于<code>/user</code>。</p><p>Akka Typed与经典的Actor API有一个非常重要的不同点：<code>/user</code>的处理逻辑。在经典的Akka API中，Akka提供的<code>/useractor</code>负责监管一切；但是Akka Typed把这个权力交给了用户。也就是说应用程序的开发者在实现actor的时候同时也必须多考虑一下actor都会有哪些行为。</p><p>在创建<code>Configuration</code> actor的时候，我们大可以直接把它传给<code>ActorSystem</code>并把它作为监管者，但当创建更多actor的时候，这些actor全部都由<code>Configuration</code> actor监管就不合适了。而且在actor模型中父监管机制采用级联的方式处理actor失败的问题：父actor负责决定如何处理子actor（当它抛异常的时候），因此如何对actor分组直接影响了监管策略。同样的我们应该使用一个专用的父actor做为监管actor，由它来决定如何处理子actor的失败问题。Akka Typed API中默认的监管策略是停止失败的子actor（经典的Akka API是重启）。由我们指定监管actor可以开发更灵活的监管策略，根据不同的异常做出相应的决策。综上所述我们决定使用<code>PaymentProcessor</code> actor做为所有actor的监管者，actor层级如下图所示：</p><p>![/img/akka/typed/supervison.png]</p><p><code>PaymentProcessor</code>的功能目前非常简单，启动的时候创建一个子actor——Configuration，它是无状态的，也不接收任何消息，这次我们使用函数式编程的风格，无需继承任何接口，只需要返回一个Behavior：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">PaymentProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>() = <span class="type">Behaviors</span>.setup[<span class="type">Nothing</span>] &#123; context =&gt;</span><br><span class="line">    context.log.info(<span class="string">"Typed Payment Processor started"</span>)</span><br><span class="line">    context.spawn(<span class="type">Configuration</span>(), <span class="string">"config"</span>)</span><br><span class="line">    <span class="type">Behaviors</span>.empty</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Behaviors.setup()</code>方法是创建<code>Behavior</code>的入口，该方法包含一个<code>ActorContext</code>变量，我们用它打日志，记录actor已经启动，并使用<code>spawn()</code>方法创建了一个<code>Configuration actor</code>，第一个参数用于创建actor，第二个参数是actor的名字，它在actor路径中是<code>/user/config</code>。</p><p>因为<code>PaymentProcessor</code>不处理任何消息，所以这里使用了<code>setup[Nothing]</code>。</p><p><code>Configuration</code> actor使用静态的create函数创建<code>Behavior</code>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">Behavior</span>[<span class="type">ConfigurationMessage</span>] = <span class="type">Behaviors</span>.setup(context =&gt; <span class="keyword">new</span> <span class="type">Configuration</span>(context))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在万事俱备，只欠东风，需要启动<code>ActorSystem</code>来创建我们的监管actor。Akka提供了静态方法用来创建监管actor：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">ActorSystem</span>[<span class="type">Nothing</span>](<span class="type">PaymentProcessor</span>(), <span class="string">"typed-payment-processor"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搞定！现在运行<code>Main</code>方法，就可以看到<code>PaymentProcessor</code>启动了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[info] Running io.bernhardt.typedpayment.Main</span><br><span class="line">[INFO] [07/10/2019 09:36:42.483] [typed-payment-processor-akka.actor.default-dispatcher-5] [akka://typed-payment-processor/user] Typed Payment Processor started</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019年11月6号LightBend公司发布了AKKA 2.6版本，带来了类型安全的actor，新的Akka Cluster底层通信设施——Artery，带来了更好的稳定性，使用Jackson进行消息序列化，支持SLF4J日志接口。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;w
      
    
    </summary>
    
      <category term="akka" scheme="http://galudisu.info/categories/akka/"/>
    
    
      <category term="akka-typed" scheme="http://galudisu.info/tags/akka-typed/"/>
    
  </entry>
  
  <entry>
    <title>第十一章 单元测试</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_b_Unit_Testing_with_Jest/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_b_Unit_Testing_with_Jest/</id>
    <published>2019-11-27T10:00:00.000Z</published>
    <updated>2020-05-19T09:39:57.067Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Testing pure functions</li><li>Testing components</li><li>Using Jest snapshot tests</li><li>Mocking dependencies</li><li>Getting code coverage</li></ul><p>重点内容，着重说明</p><a id="more"></a><p>本章内容重现第7章，第9章代码。</p><h2><span id="testing-pure-functions">Testing pure functions</span></h2><p>单元测试会从一个纯函数入手，然后逐步深入。</p><blockquote><p>纯函数的对于给定的一系列入参，总是返回相同的结果。纯函数取决于入参，它不会改变入参的值，也不改变任何外部变量。</p></blockquote><h3><span id="creating-a-basic-pure-function-test">Creating a basic pure function test</span></h3><p>我们将创建第一个单元测试对<code>Form.tsx</code>的函数<code>required</code>进行测试：</p><ol><li>创建单元测试文件<code>Form.test.tsx</code>，对<code>Form.tsx</code>进行测试。</li></ol><blockquote><p><code>test.tsx</code>后缀是一个重要标志，表示Jest会自动查询次后缀的文件并执行。按照约定和习惯，和被测试的文件前缀对应。如这里的<code>Form.test.tsx</code>。</p></blockquote><ol start="2"><li>导入我们希望测试的函数，包括TypeScript类型参数值：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; required, IValues &#125; from &quot;./Form&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用<code>test</code>函数开始我们的单元测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test(&quot;When required is called with empty title, &apos;This must be populated&apos; should be returned&quot;, () =&gt; &#123;</span><br><span class="line">    // TODO: implement the test</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的<code>test</code>函数接收两个参数：</p><ul><li>第一个参数是告诉我们测试的内容，它会输出到控制台中。</li><li>第二个参数是一个箭头函数，包含我们的测试</li></ul><ol start="4"><li>我们需要调用<code>required</code>函数进行测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test(&quot;When required is called with empty title, &apos;This must be populated&apos; should be returned&quot;, () =&gt; &#123;</span><br><span class="line">    const values: IValues = &#123;</span><br><span class="line">        title: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    const result = required(&quot;title&quot;, values);</span><br><span class="line">    // TODO: check the result is correct</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>最后一个任务，检测结果是否是我们期望的：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test(&quot;When required is called with empty title, &apos;This must be populated&apos; should be returned&quot;, () =&gt; &#123;</span><br><span class="line">    const values: IValues = &#123;</span><br><span class="line">        title: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    const result = required(&quot;title&quot;, values);</span><br><span class="line">    expect(result).toBe(&quot;This must be populated&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里链式调用了<code>toBe</code>来检测结果期望值。</p><blockquote><p><code>toBe</code>是Jest matcher检测函数中的其中一个。更多可参考 <a href="https://jestjs.io/docs/en/expect" target="_blank" rel="noopener">这里</a></p></blockquote><ol start="6"><li>运行命令进行单元测试：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>该命名启动后进入watch mode。意思是每次更改代码，它都持续运行检测更新。</p><p><img src="/img/react-ts/test_pass.png" alt="test pass"></p><ol start="7"><li>如果更改期望值，则测试会报错：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(result).toBe(&quot;This must be populatedX&quot;);</span><br></pre></td></tr></table></figure><p>当报错文件后，Jest会自动执行测试，并打印信息到控制台。如下：</p><p><img src="/img/react-ts/test_fail.png" alt="test fail"></p><p>Jest给出的错误的有用信息，它告诉我们：</p><ul><li>哪个测试失败了</li><li>实际期望的值是什么</li><li>哪行出错了</li></ul><p>这些信息帮助我们快速处理测试失败问题。</p><ol start="8"><li>更改为正确的值：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(result).toBe(&quot;This must be populated&quot;);</span><br></pre></td></tr></table></figure><p>当我们保存更改后，测试通过了。</p><h3><span id="understanding-jest-watch-options">Understanding Jest watch options</span></h3><p>Jest在执行测试后，会提供给我们下面一些选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Press f to run only failed tests.</span><br><span class="line">&gt; Press o to only run tests related to changed files.</span><br><span class="line">&gt; Press p to filter by a filename regex pattern.</span><br><span class="line">&gt; Press t to filter by a <span class="built_in">test</span> name regex pattern.</span><br><span class="line">&gt; Press q to quit watch mode.</span><br><span class="line">&gt; Press Enter to trigger a <span class="built_in">test</span> run.</span><br></pre></td></tr></table></figure><p>这些选项提供了可以特定测试的执行。</p><h3><span id="adding-structure-to-unit-test-results">Adding structure to unit test results</span></h3><p>随着单元测试实现的增加，为了易读性需要添加一些结构处理结果。Jest提供了一个<code>describe</code>函数对测试结果进行分组。使得对测试结果更易读。</p><p>重构原来的代码部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;required&apos;, () =&gt; &#123;</span><br><span class="line">  test(&quot;When required is called with empty title, &apos;This must be populated&apos; should be returned&quot;, () =&gt; &#123;</span><br><span class="line">    const values: IValues = &#123;</span><br><span class="line">      title: &apos;&apos;,</span><br><span class="line">    &#125;;</span><br><span class="line">    const result = required(&apos;title&apos;, values);</span><br><span class="line">    expect(result).toBe(&apos;This must be populated&apos;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>describe函数接收两个参数：</p><ul><li>第一个参数是组名。</li><li>第二个参数是一个箭头函数，包含要执行的测试内容。</li></ul><p>保存文件后，测试自动执行，输出内容如下：</p><p><img src="/img/react-ts/test_group.png" alt="test group"></p><h2><span id="testing-components">Testing components</span></h2><p>对组件进行单元测试是个挑战，因为一个组件会依赖浏览器DOM和React库。</p><h3><span id="creating-a-basic-component-test">Creating a basic component test</span></h3><p>我们对组件测试，从<code>ContactUs</code>表单入手：</p><ol><li>首先在<code>src</code>创建一个<code>ContactUs.test.tsx</code>文件。</li><li>因为<code>ContactUs</code>组件使用了<code>ReactDOM</code>进行渲染。导入相应<code>ReactDOM</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们需要模拟表单提交事件，因此导入<code>Simulate</code>函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Simulate &#125; from &quot;react-dom/test-utils&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>导入测试的组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ContactUs from &quot;./ContactUs&quot;;</span><br></pre></td></tr></table></figure><ol start="5"><li>导入表单的提交结构数据：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ISubmitResult &#125; from &quot;./Form&quot;;</span><br></pre></td></tr></table></figure><ol start="6"><li>创建我们的第一个Jest测试函数，并分组：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;ContactUs&quot;, () =&gt; &#123;</span><br><span class="line">    test(&quot;When submit without filling in fields should display errors&quot;, () =&gt; &#123;</span><br><span class="line">        // TODO - implement the test</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="7"><li>测试的第一个实现是创建DOM：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;ContactUs&quot;, () =&gt; &#123;</span><br><span class="line">    test(&quot;When submit without filling in fields should display errors&quot;, () =&gt; &#123;</span><br><span class="line">        const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                success: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        const container = document.createElement(&quot;div&quot;);</span><br><span class="line">        ReactDOM.render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;, container);</span><br><span class="line"></span><br><span class="line">        // TODO - submit the form and check errors are shown</span><br><span class="line"></span><br><span class="line">        ReactDOM.unmountComponentAtNode(container);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先，创建一个<code>div</code>容器标签，将<code>ContactUs</code>组件渲染进去。另外再创建<code>onSubmit</code>属性，它返回success。最后一行则清理DOM元素。</p><ol start="8"><li>接下来，引入表单内容，并提交：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;, container);</span><br><span class="line"></span><br><span class="line">const form = container.querySelector(&quot;form&quot;);</span><br><span class="line">expect(form).not.toBeNull();</span><br><span class="line">Simulate.submit(form!);</span><br><span class="line"></span><br><span class="line">// TODO - check errors are shown</span><br></pre></td></tr></table></figure><p>这一步描述了：</p><ul><li>使用了<code>querySelector</code>函数，获取表单元素。</li><li>使用Jest的<code>expect</code>函数检测表单不为<code>null</code>，<code>not</code>和<code>toBeNull</code>为链式组合。</li><li>通过模拟器<code>Simulate</code>进行表单提交事件。使用了<code>!</code>告知TypeScript编译器<code>form</code>不是空的。</li></ul><ol start="9"><li>最后检测错误信息并展示：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Simulate.submit(form!);</span><br><span class="line"></span><br><span class="line">const errorSpans = container.querySelectorAll(&quot;.form-error&quot;);</span><br><span class="line">expect(errorSpans.length).toBe(2);</span><br><span class="line"></span><br><span class="line">ReactDOM.unmountComponentAtNode(container);</span><br></pre></td></tr></table></figure><p>这一步描述了：</p><ul><li>使用了<code>querySelectorAll</code>获取错误的DOM元素。</li><li>使用<code>expect</code>进行校验</li></ul><ol start="10"><li>执行单元测试后，结果输出：</li></ol><p><img src="/img/react-ts/form_test.png" alt="form test"></p><h3><span id="improving-our-tests-with-react-testing-library">Improving our tests with react-testing-library</span></h3><p>react-testing-library是一系列测试工具集。</p><h3><span id="installing-react-testing-library">Installing react-testing-library</span></h3><p>首先安装该工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev react-testing-library</span><br></pre></td></tr></table></figure><h3><span id="removing-css-class-references-from-our-test">Removing CSS class references from our test</span></h3><ol><li>导入相应的函数:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render, cleanup &#125; from &quot;react-testing-library&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>直接使用<code>render</code>函数进行组件的渲染，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test(&apos;When submit without filling in fields should display errors&apos;, () =&gt; &#123;</span><br><span class="line">  const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      success: true,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  const &#123;container, getAllByText&#125; = render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;);</span><br><span class="line"></span><br><span class="line">  const form = container.querySelector(&apos;form&apos;);</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们再次获取了DOM容器，不过这次是通过<code>getallByText</code>函数获取引用部分。</p><ol start="3"><li>然后获取错误的span元素长度：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Simulate.submit(form!);</span><br><span class="line">const errorSpans = getAllByText(&quot;This must be populated&quot;);</span><br><span class="line">expect(errorSpans.length).toBe(2);</span><br></pre></td></tr></table></figure><ol start="4"><li>最后一步，我们需要清理DOM元素的内容。相比<code>ReactDOM.unmountComponentAtNode</code>。我们在测试外部执行清理操作。完整的代码如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">afterEach(cleanup);</span><br><span class="line"></span><br><span class="line">describe(&apos;ContactUs&apos;, () =&gt; &#123;</span><br><span class="line">  test(&apos;When submit without filling in fields should display errors&apos;, () =&gt; &#123;</span><br><span class="line">    const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        success: true,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    const &#123;container, getAllByText&#125; = render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;);</span><br><span class="line"></span><br><span class="line">    const form = container.querySelector(&apos;form&apos;);</span><br><span class="line">    expect(form).not.toBeNull();</span><br><span class="line">    Simulate.submit(form!);</span><br><span class="line"></span><br><span class="line">    const errorSpans = getAllByText(&apos;This must be populated&apos;);</span><br><span class="line">    expect(errorSpans.length).toBe(1);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>测试自动执行后，发现所有测试已通过。</p><h3><span id="using-fireevent-for-user-interaction">Using fireEvent for user interaction</span></h3><p>接下来，需要测试用户真正的行为。</p><ol><li>首先添加<code>fireEvent</code>函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; render, cleanup, fireEvent &#125; from &quot;react-testing-library&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>继续添加<code>getByText</code>函数对渲染函数<code>render</code>进行解构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const &#123; getAllByText, getByText &#125; = render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;);</span><br></pre></td></tr></table></figure><p>这里把<code>container</code>变量移除了，因为不再需要用到。</p><ol start="3"><li>获取<code>Submit</code>按钮，并使用<code>fireEvent</code>触发按钮的点击。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const &#123;getAllByText, getByText&#125; = render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;);</span><br><span class="line"></span><br><span class="line">const submitButton = getByText(&quot;Submit&quot;);</span><br><span class="line">fireEvent.click(submitButton);</span><br><span class="line"></span><br><span class="line">const errorSpans = getAllByText(&apos;This must be populated&apos;);</span><br><span class="line">expect(errorSpans.length).toBe(1);</span><br></pre></td></tr></table></figure><p>测试后结果通过了。</p><h3><span id="creating-a-second-test-for-a-valid-form-submission">Creating a second test for a valid form submission</span></h3><p>我们已经领会了如何编写一个健壮的测试。接下来测试表单填写不正确的错误情况。</p><ol><li>新建一个测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;ContactUs&apos;, () =&gt; &#123;</span><br><span class="line">  test(&apos;When submit without filling in fields should display errors&apos;, () =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  test(&apos;When submit after filling in fields should submit okay&apos;, () =&gt; &#123;</span><br><span class="line">    // TODO - render component, fill in fields, submit the form and check thre are no erros</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>以相同的解构方式渲染组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test(&apos;When submit after filling in fields should submit okay&apos;, () =&gt; &#123;</span><br><span class="line">  const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      success: true</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  const &#123; container, getByText, getByLabelText &#125; = render(</span><br><span class="line">      &lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在：</p><ul><li>需要<code>container</code>对象，以检测有没有错误信息</li><li>需要<code>getByText</code>函数，定义<code>Submit</code>按钮</li><li>需要<code>getByLabelText</code>函数获取输入内容</li></ul><ol start="3"><li>通过<code>getByLabelText</code>获取name输入。之后检测name是否存在：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const &#123; container, getByText, getByLabelText &#125; = render(</span><br><span class="line">    &lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;</span><br><span class="line">);</span><br><span class="line">const nameField: HTMLInputElement = getByLabelText(&quot;Your name&quot;) as HTMLInputElement;</span><br><span class="line">expect(nameField).not.toBeNull();</span><br></pre></td></tr></table></figure><ol start="4"><li>模拟用户输入内容。这是使用了<code>change</code>事件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const nameField: HTMLInputElement = getByLabelText(&quot;Your name&quot;) as HTMLInputElement;</span><br><span class="line">expect(nameField).not.toBeNull();</span><br><span class="line">fireEvent.change(nameField, &#123;target: &#123;value: &quot;Carl&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>这里模拟用户输入了<code>Carl</code>。</p><blockquote><p>这里显示指定了nameField的类型为<code>HTMLInputElment</code>以告知编译器，避免编译错误。</p></blockquote><ol start="5"><li>对于邮箱的输入类似：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const nameField: HTMLInputElement = getByLabelText(&quot;Your name&quot;) as HTMLInputElement;</span><br><span class="line">expect(nameField).not.toBeNull();</span><br><span class="line">fireEvent.change(nameField, &#123;target: &#123;value: &quot;Carl&quot;&#125;&#125;)</span><br><span class="line"></span><br><span class="line">const emailField = getByLabelText(&quot;Your email address&quot;) as HTMLInputElement;</span><br><span class="line">expect(emailField).not.toBeNull();</span><br><span class="line">fireEvent.change(emailField, &#123;target: &#123;value: &quot;carl.rippon@testmail.com&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>这里模拟用户输入了<code>carl.rippon@testmail.com</code>.</p><ol start="6"><li>然后提交表单：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fireEvent.change(emailField, &#123;target: &#123;value: &apos;carl.rippon@testmail.com&apos;&#125;&#125;);</span><br><span class="line"></span><br><span class="line">const submitButton = getByText(&apos;Submit&apos;);</span><br><span class="line">fireEvent.click(submitButton);</span><br></pre></td></tr></table></figure><ol start="7"><li>我们的首要任务是验证没有错误出现。不幸的是，我们不能使用<code>getAllByText</code>函数，它会查找最少一个元素，我们的情况是希望没有错误出现。因此，测试前转换一下<code>div</code>标签，添加上：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;context.errors[name] &amp;&amp; context.errors[name].length &gt; 0 &amp;&amp; (</span><br><span class="line">&lt;div data-testid=&quot;formErrors&quot;&gt;</span><br><span class="line">  &#123;context.errors[name].map(error =&gt; (</span><br><span class="line">    &lt;span key=&#123;error&#125; className=&quot;form-error&quot;&gt;</span><br><span class="line">      &#123;error&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  ))&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>给<code>div</code>一个<code>data-testid</code>属性。</p><ol start="8"><li>回到测试。现在可以定位到错误<code>div</code>的元素应该是<code>null</code>的。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fireEvent.click(submitButton);</span><br><span class="line"></span><br><span class="line">const errorsDiv = container.querySelector(&quot;[data-testid=&apos;formErrors&apos;]&quot;);</span><br><span class="line">expect(errorsDiv).toBeNull();</span><br></pre></td></tr></table></figure><p>执行测试后，所有测试通过了。</p><p>有没有不引用<code>data-testid</code>的实现？用户不希望看到或不关心<code>data-testid</code>这个属性，这显然违背我们的初衷。</p><h2><span id="using-jest-snapshot-tests">Using Jest snapshot tests</span></h2><p>快照测试，是指Jest会将渲染的所有元素和属性，和前一个渲染组件的快照进行比较。如果没有差异，则测试通过。</p><p>我们将使用快照测试的方法，来校验<code>ContactUs</code>组件是否渲染OK。</p><ol><li>在<code>ContactUs</code>组里面创建一个<code>Renders okay</code>的测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">describe(&quot;ContactUs&quot;, () =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    test(&apos;Renders okay&apos;, () =&gt; &#123;</span><br><span class="line">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    success: true</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">const &#123; container &#125; = render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;);</span><br><span class="line">// TODO - do the snapshot test</span><br><span class="line">        </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>添加下面行实现快照测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test(&apos;Renders okay&apos;, () =&gt; &#123;</span><br><span class="line">const handleSubmit = async (): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    success: true</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">const &#123; container &#125; = render(&lt;ContactUs onSubmit=&#123;handleSubmit&#125; /&gt;);</span><br><span class="line">expect(container).toMatchSnapshot();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>快照测试非常简单。我们将DOM节点和<code>expect</code>函数期望进行比较，然后触发<code>toMatchSnapshot</code>函数检验。</p><p>当测试执行后，可以从控制台看到快照已经被写入 <strong>1 snapshot written</strong>。</p><ol start="3"><li>我们会发现，在<code>src</code>目录，包含有一个<code>__snapshots__</code> 目录。进入目录可以看到有一个<code>ContactUs.test.tsx.snap</code>文件，文件内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Jest Snapshot v1, https://goo.gl/fbAQLP</span><br><span class="line"></span><br><span class="line">exports[`ContactUs Renders okay 1`] = `</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;form</span><br><span class="line">    class=&quot;form&quot;</span><br><span class="line">    novalidate=&quot;&quot;</span><br><span class="line"> ...</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>在这份代码片段，某些内容是被剔除了的。但保留了主要信息：<code>toMatchSnapshot</code>函数，将<code>container</code>中的每个DOM节点(包含attribute)作了一份拷贝。</p><p>这种测试严重耦合在我们的实现上。任何DOM结构或属性的改动都会中断我们的测试。</p><ol start="4"><li>例如，<code>Form.tsx</code>中，我们在<code>Form</code>标签内再添加一个<code>div</code>标签。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form ...&gt;</span><br><span class="line">    &lt;div&gt;&#123;this.props.children&#125;&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>当测试执行后，我们可以确定测试被打断了。Jest将前后改动的不同显式了出来。</p><p><img src="/img/react-ts/jest_snapshot.png" alt="jest snapshot"></p><ol start="5"><li>当然这是合法的改动，我们可以键入 <strong>U</strong> 让Jest更新快照。</li></ol><p><img src="/img/react-ts/jest_snapshot_update.png" alt="snapshot update"></p><p>那么，快照测试是好事还是坏事？他们是不稳定的因为它紧紧耦合了一个组件的实现。然后，它们也非常容易实现，当出现问题时，Jest会高亮问题所在让我们高效地修正问题。如果你们项目需要，值得尝试。</p><h2><span id="mocking-dependencies">Mocking dependencies</span></h2><p>模拟组件的依赖可以使得组件更容易测试。然而，如果模拟的数据太多，测试就真的代表了现实场景了吗？</p><p>对于mock什么的测试是非常难写的。它会有很多层概念。例如mock的是REST API、mock的是事件、mock的是组件…</p><p>本小节仅仅介绍REST API的mock调用测试。在此之前，首先介绍mock的特性。</p><h3><span id="using-a-mock-function-in-jest">Using a mock function in Jest</span></h3><p>我们将继续提升表单的测试内容，添加额外的检查，以确保表单输入出现错误时，提交的处理不会执行。</p><ol><li>回到原来的<code>ContactUs.test.tsx</code>的第一个测试，将之前手动创建的一个<code>handleSubmit</code>函数，更改为一个mock函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const handleSubmit = jest.fn();</span><br></pre></td></tr></table></figure><p>测试执行后，运行正常。</p><ol start="2"><li>现在提交时一个mock，我们可以检测它是否被调用了：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const errorSpans = container.querySelectorAll(&quot;.form-error&quot;);</span><br><span class="line">expect(errorSpans.length).toBe(2)</span><br><span class="line">expect(handleSubmit).not.toBeCalled();</span><br></pre></td></tr></table></figure><p>相比从前的写法，不仅简化了submit函数，还额外检查了提交处理是否执行。</p><p>我们继续来到第二个测试的实现中，它会检测一个合法的提交是否ok。</p><ol><li>将它的<code>handleSubmit</code>也更改为jest mock 函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const handleSubmit = jest.fn();</span><br></pre></td></tr></table></figure><ol start="2"><li>这里的表单肯定被提交处理了，我们需要验证的是它提交了多少次：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const errorsDiv = container.querySelector(&quot;[data-testid=&apos;formErrors&apos;]&quot;);</span><br><span class="line">expect(errorsDiv).toBeNull();</span><br><span class="line">expect(handleSubmit).toBeCalledTimes(1);</span><br></pre></td></tr></table></figure><p>测试执行后，pass了。</p><ol start="3"><li>还有另外一种非常实用的方法。我们知道了提交请求已经被处理了，但不能确定参数是否正确？这里可以使用<code>toBeCalledWith</code>来检查：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">expect(handleSubmit).toBeCalledTimes(1);</span><br><span class="line">expect(handleSubmit).toBeCalledWith(&#123;</span><br><span class="line">    name: &quot;Car&quot;,</span><br><span class="line">    email: &quot;carl.rippon@testmail.com&quot;,</span><br><span class="line">    reason: &quot;Support&quot;,</span><br><span class="line">    notes: &quot;&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试再次pass了。</p><p>通过使用mock函数处理，可以对有价值的数据进行校验审查。</p><h3><span id="mocking-axios-with-axios-mock-adapter">Mocking Axios with axios-mock-adapter</span></h3><p>现在移步到第9章的代码部分。</p><p>我们将测试post请求得到的渲染内容是否正确。我们将mock REST API数据进行测试。</p><ol><li>首先添加依赖包：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios-mock-adapter --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>然后安装<code>react-testing-library</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-testing-library --save-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>该项目早已经有一个测试文件<code>App.test.tsx</code>了。我们删掉已有的测试代码。</li><li>然后倒入额外的测试包，如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;render, cleanup, waitForElement&#125; from &apos;@testing-library/react&apos;;</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line">import MockAdapter from &apos;axios-mock-adapter&apos;;</span><br></pre></td></tr></table></figure><ol start="5"><li>添加清理工具，每次测试后进行清理。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afterEach(cleanup);</span><br></pre></td></tr></table></figure><ol start="6"><li>分组，描述测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">describe(&apos;App&apos;, () =&gt; &#123;</span><br><span class="line">  test(&apos;When page loads, posts are rendered&apos;, async () =&gt; &#123;</span><br><span class="line">    // TODO = render the app component with a mock API and check that the posts in the rendered list are as expected</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>箭头函数标记了<code>async</code>。因为我们最终是一个异步请求的测试。</p><ol start="7"><li>第一步要做的是mock REST API：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">test(&apos;When page loads, posts are rendered&apos;, async () =&gt; &#123;</span><br><span class="line">  const mock = new MockAdapter(axios);</span><br><span class="line">  mock.onGet(&apos;https://jsonplaceholder.typicode.com/posts&apos;).reply(200, [</span><br><span class="line">    &#123;</span><br><span class="line">      userId: 1,</span><br><span class="line">      id: 1,</span><br><span class="line">      title: &apos;title test 1&apos;,</span><br><span class="line">      body: &apos;body test 1&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      userId: 1,</span><br><span class="line">      id: 2,</span><br><span class="line">      title: &apos;title test 2&apos;,</span><br><span class="line">      body: &apos;body test 2&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>onGET</code>方法上模拟HTTP的返回内容。</p><ol start="8"><li>接下来检查请求后渲染的内容是否正确。要达到该目的，我们在<code>App.tsx</code>的列表标签添加一个额外的<code>data-testid</code>属性，用作测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;this.state.posts.length &gt; 0 &amp;&amp;(</span><br><span class="line">&lt;ul className=&quot;posts&quot; data-testid=&quot;posts&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>回到原来的测试，对渲染的内容进行解构：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.onGet(&apos;https://jsonplaceholder.typicode.com/posts&apos;).reply(...)</span><br><span class="line">                                                             const &#123;getByTestId&#125; = render(&lt;App /&gt;);</span><br></pre></td></tr></table></figure><ol start="10"><li>我们需要检测渲染的请求是否正确。但由于是异步的，我们需要等待请求。可以使用<code>waitForElement</code>函数处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const &#123;getByTestId&#125; = render(&lt;App /&gt;);</span><br><span class="line">const postsList: any = await waitForElement(() =&gt; getByTestId(&apos;posts&apos;));</span><br></pre></td></tr></table></figure><p><code>waitForElement</code>函数接收一个箭头函数作为参数，返回我们需要等待的元素。</p><ol start="11"><li>接下来我们可以使用一个快照检测post的内容是否正确：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(postsList).toMatchSnapshot();</span><br></pre></td></tr></table></figure><ol start="12"><li>在测试执行之前，修改一下<code>tsconfig.json</code>文件。让TypeScript编译器知道我们使用了<code>async</code>和<code>await</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;es5&quot;,</span><br><span class="line">        &quot;lib&quot;: [&quot;dom&quot;, &quot;es2015&quot;],</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;include&quot;: [&quot;src&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试执行后，快照被创建。查看快照后，我们可以看到请求返回了渲染的内容，其中包含了两个条目。</p><h2><span id="getting-code-coverage">Getting code coverage</span></h2><p>覆盖率会告知我们UT对代码的覆盖情况。我们在编写UT的时候，希望知道哪些代码还没测试的，哪些通过了，以方便进行跟踪。</p><p>Jest带有一个覆盖率工具，以上一节的代码为例。</p><ol><li>要使用Jest的覆盖率工具，需要添加新的脚本：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class="line">  &quot;test&quot;: &quot;react-scripts test --env=jest-environment-jsdom-sixteen&quot;,</span><br><span class="line">  &quot;coverage&quot;: &quot;react-scripts test --env=jest-environment-jsdom-sixteen --coverage&quot;,</span><br><span class="line">  &quot;eject&quot;: &quot;react-scripts eject&quot;,</span><br><span class="line">  &quot;eslint&quot;: &quot;eslint src --ext .js,.jsx,.tsx,.ts --fix&quot;,</span><br><span class="line">  &quot;tslint&quot;: &quot;tslint --fix &apos;./src/**/*&#123;.ts,.tsx&#125;&apos;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后运行脚本：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run coverage</span><br></pre></td></tr></table></figure><p>一会会在控制台输出测试覆盖率统计信息：</p><p><img src="/img/react-ts/test_coverage.png" alt="test coverage"></p><ol start="3"><li>在项目目录结构中，可以看到添加了一个新的<code>coverage</code>文件夹，包含一个子文件夹<code>lcov-report</code>。里面有一个<code>index.html</code>文件，打开文件可以看到更加详细的统计信息。</li><li>我们可以点击链接，查看代码的覆盖情况。</li></ol><h2><span id="summary">Summary</span></h2><p>本章介绍了Jest测试的一些常用函数的使用。譬如<code>expect</code>、<code>toBe</code>，用于验证数据。</p><p>还介绍了如何对组件进行解构测试，通过<code>getByText</code>和<code>getLabelByText</code>获取组件的元素信息。</p><p>还学习了使用<code>waitForElement</code>函数处理异步事件和请求信息。</p><p>其中讨论了快照的测试情况，它会中断我们的测试，我们可以更新快照以跟踪代码的实现。</p><p>对应一些异步的请求，我们可以使用mock的方式进行模拟。我们引进了<code>axios-mock-adapter</code>，并介绍了如何简单的测试异步渲染的内容。</p><p>最后介绍了代码覆盖率工具的使用。</p><p>除此之外，还有两个常见的测试框架：<code>Jasmine</code>和<code>Mocha</code>。Jest的优势在于它已经集成在<code>create-react-app</code>的命令中了。当然你也可以替换这两款的测试框架。</p><p>还有另一个强大的测试框架<code>Enzyme</code>。它是基于Jest的实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Testing pure functions&lt;/li&gt;
&lt;li&gt;Testing components&lt;/li&gt;
&lt;li&gt;Using Jest snapshot tests&lt;/li&gt;
&lt;li&gt;Mocking dependencies&lt;/li&gt;
&lt;li&gt;Getting code coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重点内容，着重说明&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第十章 GraphQL接口交互</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_a_Interacting_with_GraphQL_APIs/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_a_Interacting_with_GraphQL_APIs/</id>
    <published>2019-11-27T09:00:00.000Z</published>
    <updated>2020-05-19T09:39:57.058Z</updated>
    
    <content type="html"><![CDATA[<ul><li>GraphQL query and mutation syntax</li><li>Using axios as a GraphQL client</li><li>Using Apollo GraphQL client</li><li>Working with cached data in Apollo</li></ul><p>GraphQL很少被用到，本章仅作简单介绍和使用。</p><a id="more"></a><p>GraphQL是由Facebook开源的web API数据读写语言。它允许客户端，在一个请求中返回指定的数据内容。</p><h2><span id="graphql-query-and-mutation-syntax">GraphQL query and mutation syntax</span></h2><p>首先介绍一下语法。</p><h3><span id="reading-graphql-data">Reading GraphQL data</span></h3><h3><span id="basic-query">Basic query</span></h3><ol><li>首先打开 .</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.github.com/v4/explorer/</span><br></pre></td></tr></table></figure><ol start="2"><li>输入下面内容并执行 .</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  viewer &#123;</span><br><span class="line">  name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>query</code>关键字开启了查询，它是可选的。</li><li><code>viewer</code>是我们需要获取的对象。</li><li><code>name</code>为<code>viewer</code>的名字，作为返回。</li></ul><p>执行后返回的是JSON对象。</p><ol start="3"><li>我们可以从结果部分查看文档说明。</li><li>从文档得知，我们还可以添加额外的查询字段：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  viewer &#123;</span><br><span class="line">  name</span><br><span class="line">  avatarUrl</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="returning-nested-data">Returning nested data</span></h3><p>复杂一点，我们希望查询github的start和issue的数量并返回。</p><ol><li>首先输入下面查询：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  repository(owner:"facebook", name: "react") &#123;</span><br><span class="line">    name</span><br><span class="line">    description</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次传递了两个参数，查找<code>owner</code>为Facebook，name为react的仓储.以及将 name 和 description作为返回值。</p><ol start="2"><li>下面希望获取得到star的数量。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  repository(owner:"facebook",name:"react") &#123;</span><br><span class="line">    name</span><br><span class="line">    description</span><br><span class="line">    stargazers &#123;</span><br><span class="line">      totalCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>指定别名：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stargazers &#123;</span><br><span class="line">  stars:totalCount</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行查询语句后，可以看到返回的star已被别名代替：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"data"</span>: &#123;</span><br><span class="line">             <span class="attr">"repository"</span>: &#123;</span><br><span class="line">               <span class="attr">"name"</span>: <span class="string">"react"</span>,</span><br><span class="line">               <span class="attr">"description"</span>: <span class="string">"A declarative, efficient, and flexible</span></span><br><span class="line"><span class="string">JavaScript library for building user interfaces."</span>, <span class="attr">"stargazers"</span>: &#123;</span><br><span class="line"><span class="attr">"stars"</span>: <span class="number">114998</span> &#125;</span><br><span class="line">&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>查找最近的5个issues信息，</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  repository(owner: "facebook", name:"react") &#123;</span><br><span class="line">    name</span><br><span class="line">    description</span><br><span class="line">    stargazers &#123;</span><br><span class="line">      stars:totalCount</span><br><span class="line">    &#125;</span><br><span class="line">    issues(last: 5) &#123;</span><br><span class="line">      edges &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">          id</span><br><span class="line">          title</span><br><span class="line">          url</span><br><span class="line">          publishedAt</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的查询用<code>edges</code>和<code>node</code>包装了结构，用于cursor-based的分页。</p><h3><span id="query-parameters">Query parameters</span></h3><p>前面的查询是以硬编码的方式，我们希望定义变量查询。</p><ol><li>我们可以在<code>query</code>关键字后面添加查询变量。这些参数需要声明它的类型、变量名。其中变量名要以<code>$</code>开头。类型后要带<code>!</code>。如下：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query ($org: String!, $repo: String!) &#123;</span><br><span class="line">  repository(owner:$org, name:$repo) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在执行之前，我们需要在<strong>Query Variables</strong>面板添加变量入参：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"org"</span>: <span class="string">"facebook"</span>,</span><br><span class="line">  <span class="attr">"repo"</span>: <span class="string">"react"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="writing-graphql-data">Writing GraphQL data</span></h3><p>GraphQL的数据写入需要创建<code>mutation</code>。</p><ol><li>要给github的repo加星，首先需要获得<code>id</code>.</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query($org: String!, $repo: String!) &#123;</span><br><span class="line">  repository(owner:$org, name:$repo) &#123;</span><br><span class="line">    id</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将上面查询的返回<code>id</code>拷贝，该<code>id</code>格式如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MDEwOlJlcG9zaXRvcnkxMDI3MDI1MA==</span><br></pre></td></tr></table></figure><ol start="3"><li>创建第一个<code>mutation</code>：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mutation ($repoId: ID!) &#123;</span><br><span class="line">  addStar(input: &#123; starrableId: $repoId &#125;) &#123;</span><br><span class="line">  starrable &#123;</span><br><span class="line">  stargazers &#123;</span><br><span class="line">  totalCount</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>数据变更开始于<code>mutation</code>关键字</li><li>参数可以放在括号内</li><li><code>addStar</code>是一个<code>mutation</code>函数，包含一个<code>input</code>参数</li><li><code>input</code>实际上是一个对象，包含字段<code>starrabledId</code>，即我们需要星标的id，这里传入了<code>$repoId</code></li><li>之后我们指定了它的返回内容</li></ul><ol start="4"><li>在<strong>Query Variables</strong>面板填入参数：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"repoId"</span>: <span class="string">"MDEwOlJlcG9zaXRvcnkxMDI3MDI1MA=="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>执行之后发现star数增加了</li></ol><h2><span id="using-axios-as-a-graphql-client">Using axios as a GraphQL client</span></h2><h3><span id="getting-a-github-personal-access-token">Getting a GitHub personal access token</span></h3><p>在此之前，首先需要到GitHub获取一个token。</p><h3><span id="creating-our-app">Creating our app</span></h3><p>(略)</p><h3><span id="querying-the-graphql-server">Querying the GraphQL server</span></h3><p>现在有了TypeScript版的React应用了，下面使用<code>axios</code>来进行GraphQL的查询：</p><ol><li>在<code>Header.tsx</code>，创建两个接口表示GraphQL查询的返回数据：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface IViewer &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    avatarUrl: string;</span><br><span class="line">&#125;</span><br><span class="line">interface IQueryResult &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        viewer: IViewer;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>Header</code>组件创建一些状态块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [viewer, setViewer]: [IViewer, (viewer: IViewer) =&gt; void] = React.useState(&#123;name: &quot;&quot;, avatarUrl: &quot;&quot;&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在组件被挂载时声明周期中开始GraphQL的查询。我们使用了<code>useEffect</code>函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">    // TODO - make a GraphQL query</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>第二个参数使用了一个空数组，这样仅在组件被挂载时进行查询，而不是每次都查询。</p><ol start="4"><li>然后使用<code>axios</code>进行GraphQL的查询操作：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">    axios.post&lt;IQueryResult&gt;(&quot;https://api.github.com/graphql&quot;, &#123;</span><br><span class="line">        query: `query &#123;</span><br><span class="line">viewer &#123;</span><br><span class="line">name</span><br><span class="line">avatarUrl</span><br><span class="line">&#125;</span><br><span class="line">&#125;`</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>GraphQL要求使用HTTP <code>POST</code>方法，因为查询语句在方法体内。</p><ol start="5"><li>另外还需要在标头带上bearer token进行认证。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios.post&lt;IQueryResult&gt;(</span><br><span class="line">  &apos;https://api.github.com/graphql&apos;,</span><br><span class="line">  &#123;</span><br><span class="line">    query: `query &#123;</span><br><span class="line">      viewer &#123;</span><br><span class="line">      name</span><br><span class="line">      avatarUrl</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;`</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      Authorization: &apos;bearer our-bearer-token&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里 token用前面申请的真实token。</p><ol start="6"><li>现在还没有对返回内容做处理，因此：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.post&lt;IQueryResult&gt;(</span><br><span class="line">  ...,</span><br><span class="line">).then(response =&gt; &#123;</span><br><span class="line">  setViewer(response.data.data.viewer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li>现在数据已经存入了state，对页面内容渲染即可：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;img src=&#123;viewer.avatarUrl&#125; className=&quot;avatar&quot; /&gt;</span><br><span class="line">    &lt;div className=&quot;viewer&quot;&gt;&#123;viewer.name&#125;&lt;/div&gt;</span><br><span class="line">    &lt;h1&gt;GitHub Search&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="8"><li>添加一些样式到<code>App.css</code>:</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到运行的页面，可以看到我们的头像和标题。</p><p>我们发现，所有的GraphQL的请求都是HTTP POST，所有请求都指向同一个地址，请求的参数不是在URL地址，而是来源于请求体。因此，当我们使用诸如<code>axios</code>这种HTTP标准库会觉得怪怪的。</p><p>我们希望有一种更自然的方式。</p><h2><span id="using-apollo-graphql-client">Using Apollo GraphQL client</span></h2><p>Apollo是一个用于交互GraphQL服务端的客户端库。相比<code>axios</code>它有更多的优势，譬如对数据的读写缓存。</p><h3><span id="installing-apollo-client">Installing Apollo client</span></h3><ol><li>首先安装相应的包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install apollo-boost react-apollo graphql</span><br></pre></td></tr></table></figure><ul><li><code>apollo-boost</code>包含了Apollo客户端的所有内容</li><li><code>react-apollo</code>包含有用于交互GraphQL服务的React 组件</li><li><code>graphql</code>是个用于解析GraphQL查询的核心包</li></ul><ol start="2"><li>另外需要安装一些TypeScript的类型：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/graphql --save-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>还需要确保编译时，应该包含<code>es2015</code>和<code>esNext</code>的依赖库。在<code>tsconfig.json</code>添加<code>lib</code>中:</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">        <span class="attr">"lib"</span>: [<span class="string">"es2015"</span>, <span class="string">"dom"</span>, <span class="string">"esnext"</span>],</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="migrating-from-axios-to-apollo">Migrating from axios to Apollo</span></h3><p>迁移到apollo上。</p><h3><span id="adding-an-apollo-provider">Adding an Apollo provider</span></h3><p>首先从<code>App.tsx</code>入手，将会定义我们的Apollo客户端，并_提供_给<code>App</code>所有子组件下使用。</p><ol><li>在<code>App.tsx</code>，导入依赖：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import ApolloClient from &quot;apollo-boost&quot;；</span><br><span class="line">import&#123; ApolloProvider &#125; from &quot;react-apollo&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>App</code>类组件前面，创建客户端<code>ApolloClient</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const client = new ApolloClient(&#123;</span><br><span class="line">    uri: &quot;https://api.github.com/graphql&quot;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        authorization: `Bearer our-bearer-token`</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>最后一步是使用<code>ApolloProvider</code>组件并传入<code>ApolloClient</code>参数即可。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;ApolloProvider client=&#123;client&#125;&gt;</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;header className=&quot;App-header&quot;&gt;</span><br><span class="line">          &lt;Header /&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/ApolloProvider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>ApolloClient</code>已经设置好了，下面开始交互内容。</p><h3><span id="using-the-query-component-to-query-graphql">Using the query component to query GraphQL</span></h3><p>我们现在使用<code>Query</code>组件来获取GitHub的名字和头像，替换掉<code>axios</code>代码：</p><ol><li>导入下面依赖，并删掉原来的<code>axios</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import gql from &quot;graphql-tag&quot;;</span><br><span class="line">import &#123; Query &#125; from &quot;react-apollo&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>IViewer</code>接口内容保留，但需要和<code>IQueryResult</code>拧在一起：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IQueryResult &#123;</span><br><span class="line">    viewer: IViewer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义查询：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const GET_VIEWER = gql`</span><br><span class="line">&#123;</span><br><span class="line">  viewer &#123;</span><br><span class="line">    name</span><br><span class="line">    avatarUrl</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>我们字面量声明了<code>GET_VIEWER</code>查询。在前面带有<code>gql</code>看起来有些古怪。这个模板字面量不应该用括号吗？实际上<code>gql</code>是一个函数，它会解析该函数后面的查询语句。</p><ol start="4"><li>为了Type safety，创建一个新的组件<code>GetViewerQuery</code>，并定义结果的返回类型：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class GetViewerQuery extends Query&lt;IQueryResult&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>我们不再需要状态，因此移除<code>viewer</code>和<code>setViewer</code>变量。</li><li>因为不需要<code>axios</code>查询了，<code>useEffect</code>也删掉。</li><li>我们使用<code>GetViewerQuery</code>组件进行查询：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;GetViewerQuery query=&#123;GET_VIEWER&#125;&gt;</span><br><span class="line">    &#123;(&#123;data&#125;) =&gt; &#123;</span><br><span class="line">      if (!data || !data.viewer) &#123;</span><br><span class="line">        return null;</span><br><span class="line">      &#125;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;img src=&#123;data.viewer.avatarUrl&#125; className=&quot;avatar&quot;  alt=&#123;&quot;avatar&quot;&#125;/&gt;</span><br><span class="line">          &lt;div className=&quot;viewer&quot;&gt;&#123;data.viewer.name&#125;&lt;/div&gt;</span><br><span class="line">          &lt;h1&gt;GitHub Search&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;/Query&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="8"><li>如果我们希望获取其它信息内容。例如查询数据是否正在加载中。可以改为：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">    &lt;GetViewerQuery query=&#123;GET_VIEWER&#125;&gt;</span><br><span class="line">        &#123;(&#123; data, loading&#125;) =&gt; &#123;</span><br><span class="line">            if (loading) &#123;</span><br><span class="line">                return &lt;div className=&quot;viewer&quot;&gt;Loading...&lt;/div&gt;;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &lt;/GetViewerQuery&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="9"><li>又或者想要获取错误信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">    &lt;GetViewerQuery query=&#123;GET_VIEWER&#125;&gt;</span><br><span class="line">        &#123;(&#123; data, loading, error&#125;) =&gt; &#123;</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                return &lt;div className=&quot;viewer&quot;&gt;&#123;error.toString()&#125;&lt;/div&gt;;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &lt;/GetViewerQuery&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Apollo的实现非常优雅。它可以确保<code>Query</code>组件在正确的位置获取得到对应的数据。</p><h3><span id="adding-a-repository-search-component">Adding a repository search component</span></h3><p>根据已有的查询功能，我们希望有一个搜索repository的选框。</p><ol><li>首先创建一个<code>RepoSearch.tsx</code>，导入相应的依赖：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import gql from &quot;graphql-tag&quot;;</span><br><span class="line">import &#123; ApolloClient &#125; from &quot;apollo-boost&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>由于需要带入<code>ApolloClient</code>作为prop，添加一个接口实现：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">    client: ApolloClient&lt;any&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>架设组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const RepoSearch: React.FC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line">export default RepoSearch;</span><br></pre></td></tr></table></figure><ol start="4"><li>导入的<code>App.tsx</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import RepoSearch from &quot;./RepoSearch&quot;;</span><br></pre></td></tr></table></figure><ol start="5"><li>添加到<code>ApolloClient</code>下面：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ApolloProvider client=&#123;client&#125;&gt;</span><br><span class="line">  &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">    &lt;header className=&quot;App-header&quot;&gt;</span><br><span class="line">      &lt;Header /&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;RepoSearch client=&#123;client&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/ApolloProvider&gt;</span><br></pre></td></tr></table></figure><h3><span id="implementing-the-search-form">Implementing the search form</span></h3><p>实现一个表单，允许用户输入组织名和仓储名：</p><ol><li>在<code>RepoSearch.tsx</code>，定义搜索字段接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface ISearch &#123;</span><br><span class="line">    orgName: string;</span><br><span class="line">    repoName: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个变量来装载<code>search</code>状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const RepoSearch: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">    const [search, setSearch]: [ISearch, (search: ISearch) =&gt; void] = React.useState(&#123;orgName: &quot;&quot;, repoName: &quot;&quot;&#125;);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义<code>search</code>表单：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">&lt;div className=&quot;repo-search&quot;&gt;</span><br><span class="line">  &lt;form onSubmit=&#123;handleSearch&#125;&gt;</span><br><span class="line">    &lt;label&gt;Organization&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; onChange=&#123;handleOrgNameChange&#125; value=&#123;search.orgName&#125; /&gt;</span><br><span class="line">    &lt;label&gt;Repository&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; onChange=&#123;handleRepoNameChange&#125; value=&#123;search.repoName&#125; /&gt;</span><br><span class="line">    &lt;button type=&quot;submit&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="4"><li>添加样式：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.repo-search</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.repo-search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#676666</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.repo-search</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>实现表单事件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const handleOrgNameChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">  setSearch(&#123;...search, orgName: e.currentTarget.value&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleRepoNameChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">  setSearch(&#123;...search, repoName: e.currentTarget.value&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>最后一个操作是实现<code>search</code>的处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  // TODO - make GraphQL query</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此，表单的创建已经完成。</p><h3><span id="implementing-the-search-query">Implementing the search query</span></h3><p>现在的关键问题是，如何查询。</p><ol><li>首先创建返回接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">interface IRepo &#123;</span><br><span class="line">  id: string;</span><br><span class="line">  name: string;</span><br><span class="line">  description: string;</span><br><span class="line">  viewerHasStarred: boolean;</span><br><span class="line">  stargazers: &#123;</span><br><span class="line">    totalCount: number;</span><br><span class="line">  &#125;;</span><br><span class="line">  issues: &#123;</span><br><span class="line">    edges: [</span><br><span class="line">      &#123;</span><br><span class="line">        node: &#123;</span><br><span class="line">          id: string;</span><br><span class="line">          title: string;</span><br><span class="line">          url: string;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该结构跟GitHub GraphQL Explorer的返回一样。</p><ol start="2"><li>需要一个默认的初始化值：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const defaultRepo: IRepo = &#123;</span><br><span class="line">  id: &apos;&apos;,</span><br><span class="line">  name: &apos;&apos;,</span><br><span class="line">  description: &apos;&apos;,</span><br><span class="line">  viewerHasStarred: false,</span><br><span class="line">  stargazers: &#123;</span><br><span class="line">    totalCount: 0,</span><br><span class="line">  &#125;,</span><br><span class="line">  issues: &#123;</span><br><span class="line">    edges: [</span><br><span class="line">      &#123;</span><br><span class="line">        node: &#123;</span><br><span class="line">          id: &apos;&apos;,</span><br><span class="line">          title: &apos;&apos;,</span><br><span class="line">          url: &apos;&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义查询结果接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IQueryResult &#123;</span><br><span class="line">    repository: IRepo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建查询模板字面量(tagged template literal)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const GET_REPO = gql`</span><br><span class="line">  query GetRepo($orgName: String!, $repoName: String!) &#123;</span><br><span class="line">    repository(owner: $orgName, name: $repoName) &#123;</span><br><span class="line">      id</span><br><span class="line">      name</span><br><span class="line">      description</span><br><span class="line">      viewerHasStarred</span><br><span class="line">      stargazers &#123;</span><br><span class="line">        totalCount</span><br><span class="line">      &#125;</span><br><span class="line">      issues(last: 5) &#123;</span><br><span class="line">        edges &#123;</span><br><span class="line">          node &#123;</span><br><span class="line">            id</span><br><span class="line">            title</span><br><span class="line">            url</span><br><span class="line">            publishedAt</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><p>不同的是，此次查询带有参数。</p><ol start="5"><li>另外需要存储返回的数据到状态中。因此创建变量<code>repo</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [repo, setRepo]: [IRepo, (repo: IRepo) =&gt; void] = React.useState(defaultRepo);</span><br></pre></td></tr></table></figure><ol start="6"><li>存储一些错误信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [searchError, setSearchError]: [string, (searchError: string) =&gt; void] = React.useState(&quot;&quot;);</span><br></pre></td></tr></table></figure><ol start="7"><li>更新<code>handleSearch</code>箭头函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">setSearchError(&quot;&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="8"><li>传入<code>ApolloClient</code>进行查询：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  setSearchError(&apos;&apos;);</span><br><span class="line"></span><br><span class="line">  props.client</span><br><span class="line">    .query&lt;IQueryResult&gt;(&#123;</span><br><span class="line">      query: GET_REPO</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="9"><li>将参数传入给query语句：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  setSearchError(&apos;&apos;);</span><br><span class="line"></span><br><span class="line">  props.client</span><br><span class="line">    .query&lt;IQueryResult&gt;(&#123;</span><br><span class="line">      query: GET_REPO,</span><br><span class="line">      variables: &#123;orgName: search.orgName, repoName: search.repoName&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="10"><li>处理返回内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  setSearchError(&apos;&apos;);</span><br><span class="line"></span><br><span class="line">  props.client</span><br><span class="line">    .query&lt;IQueryResult&gt;(...)</span><br><span class="line">    .then(response =&gt; &#123;</span><br><span class="line">      setRepo(response.data.repository);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="11"><li>处理异常信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const handleSearch = (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line"></span><br><span class="line">  setSearchError(&apos;&apos;);</span><br><span class="line"></span><br><span class="line">  props.client</span><br><span class="line">    .query&lt;IQueryResult&gt;(...)</span><br><span class="line">    .then(...)</span><br><span class="line">    .catch(error =&gt; &#123;</span><br><span class="line">      setSearchError(error.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3><span id="rendering-the-result">Rendering the result</span></h3><p>既然数据已经获取到了，需要将数据展现出来：</p><ol><li>渲染github点赞部分：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;repo-search&quot;&gt;</span><br><span class="line">  &lt;form ...&gt;</span><br><span class="line">      ...</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &#123;repo.id &amp;&amp; (</span><br><span class="line">    &lt;div className=&quot;repo-item&quot;&gt;</span><br><span class="line">      &lt;h4&gt;</span><br><span class="line">        &#123;repo.name&#125;</span><br><span class="line">        &#123;repo.stargazers ? ` $&#123;repo.stargazers.totalCount&#125; stars` : &apos;&apos;&#125;</span><br><span class="line">      &lt;/h4&gt;</span><br><span class="line">      &lt;p&gt;&#123;repo.description&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>渲染repository的列表：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;p&gt;&#123;repo.description&#125;&lt;/p&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Last 5 issues:</span><br><span class="line">    &#123;repo.issues &amp;&amp; repo.issues.edges ? (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;repo.issues.edges.map(item =&gt; (</span><br><span class="line">          &lt;li key=&#123;item.node.id&#125;&gt;&#123;item.node.title&#125;&lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    ) : null&#125;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>显示错误信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &#123;repo.id &amp;&amp; (</span><br><span class="line">   ...</span><br><span class="line">  &#123;searchError &amp;&amp; &lt;div&gt;&#123;searchError&#125;&lt;/div&gt;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加<code>App.css</code>样式：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.repo-search</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="implementing-a-mutation-with-apollo">Implementing a mutation with Apollo</span></h3><p>我们可以在React中使用GraphQL的<code>mutation</code>。</p><ol><li>首先导入<code>Mutation</code>组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Mutation &#125; from &quot;react-apollo&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建<code>mutation</code>的查询：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const STAR_REPO = gql`</span><br><span class="line">  mutation($repoId: ID!) &#123;</span><br><span class="line">    addStar(input: &#123;starrableId: $repoId&#125;) &#123;</span><br><span class="line">      starrable &#123;</span><br><span class="line">        stargazers &#123;</span><br><span class="line">          totalCount</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><ol start="3"><li>在渲染代码部分，加入<code>Mutation</code>组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;repo.description&#125;&lt;/p&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;!repo.viewerHasStarred &amp;&amp; (</span><br><span class="line">    &lt;Mutation mutation=&#123;STAR_REPO&#125;</span><br><span class="line">              variables=&#123;&#123; repoId: repo.id &#125;&#125;</span><br><span class="line">              &gt;</span><br><span class="line">      &#123;() =&gt; (</span><br><span class="line">        // render Star button that invokes the mutation when clicked</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/Mutation&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  Last 5 issues:</span><br></pre></td></tr></table></figure><ul><li>对<code>mutation</code>的渲染在<code>viewer</code>没有被点赞的repo</li><li><code>Mutation</code>组件接收repository 的<code>id</code>作为入参</li></ul><ol start="4"><li><code>Mutation</code>组件有一个子函数<code>addStar</code>允许我们访问点赞数。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mutation</span><br><span class="line">    ...</span><br><span class="line">    &gt;</span><br><span class="line">    &#123;(addStar) =&gt; (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; addStar()&#125;&gt;</span><br><span class="line">                Star!</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )&#125;</span><br><span class="line">&lt;/Mutation&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>loading</code>属性作为第二参数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mutation</span><br><span class="line">...</span><br><span class="line">&gt;</span><br><span class="line">&#123;(addStar, &#123; loading &#125;) =&gt; (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button disabled=&#123;loading&#125; onClick=&#123;() =&gt; addStar()&#125;&gt;</span><br><span class="line">&#123;loading ? &quot;Adding ...&quot; : &quot;Star!&quot;&#125;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&lt;/Mutation&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>处理错误信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;(addStar, &#123; loading, error&#125;) =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button disabled=&#123;loading&#125; onClick=&#123;() =&gt; addStar()&#125;&gt;</span><br><span class="line">      &#123;loading? &quot;Adding ...&quot;: &quot;Star!&quot;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &#123;error &amp;&amp; &lt;div&gt;&#123;error.toString()&#125;&lt;/div&gt;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><h2><span id="working-with-cached-data-in-apollo">Working with cached data in Apollo</span></h2><p>前面发现点击按钮后，数据并没有刷新，需要清理掉浏览器的缓存数据。</p><h3><span id="clearing-the-caching-using-refetchqueries">Clearing the caching using refetchQueries</span></h3><p>每次发生<code>mutation</code>操作时，需要清理掉缓存信息。一种方式是使用<code>refetchQueries</code>：</p><ol><li><code>refetchQueries</code>接收一个数组对象，该对象的查询变量会被从缓存中删除。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mutation</span><br><span class="line">  mutation=&#123;STAR_REPO&#125;</span><br><span class="line">  variables=&#123;&#123;repoId: repo.id&#125;&#125;</span><br><span class="line">  refetchQueries=&#123;[</span><br><span class="line">    &#123;</span><br><span class="line">      query: GET_REPO,</span><br><span class="line">      variables: &#123;</span><br><span class="line">        orgName: search.orgName,</span><br><span class="line">        repoName: search.repoName,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]&#125;&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li>如果给一个repo点赞，点赞的数字并没有立即更新。然而，点击<code>Search</code>按钮后才更新。</li></ol><p>因此，数据也并没有立即更新，这种方式也不是很好，用户体验不太理想。</p><h3><span id="updating-the-cache-after-a-mutation">Updating the cache after a Mutation</span></h3><p>幸运的是，<code>Mutation</code>组件还有另外一个方法<code>update</code>，我们可以对缓存信息进行更新。</p><ol><li>删掉之前的<code>refetchQueries</code>。</li><li>实现<code>update</code>操作：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mutation</span><br><span class="line">    mutation=&#123;STAR_REPO&#125;</span><br><span class="line">    udpate=&#123;cache=&gt; &#123;</span><br><span class="line">        // Get the cached data</span><br><span class="line">        // update the cached data</span><br><span class="line">        // update our state</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>更新缓存：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Mutation</span><br><span class="line">    ...</span><br><span class="line">    update=&#123;cache =&gt; &#123;</span><br><span class="line">        const data: &#123; repository: IRepo &#125; | null = cache.readQuery(&#123;</span><br><span class="line">            query: GET_REPO,</span><br><span class="line">            variables: &#123;</span><br><span class="line">                orgName: search.orgName,</span><br><span class="line">                repoName: search.repoName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        if (data === null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>如果没有缓存数据，我们直接return，不做任何处理。</p><ol start="4"><li>现在有了一份来自缓存的数据了，直接对这份数据操作。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">update=&#123;cache =&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">        if (data === null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">const newData = &#123;</span><br><span class="line">        ...data.repository,</span><br><span class="line">        viewerHasStarred: true,</span><br><span class="line">        stargazers: &#123;</span><br><span class="line">            ...data.repository.stargazers,</span><br><span class="line">            totalCount: data.repository.stargazers.totalCount + 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">       &#125;&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>然后使用<code>writeQuery</code>函数来更新缓存信息。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">update=&#123;cache =&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">        const newData=&#123;</span><br><span class="line">        ...</span><br><span class="line">       &#125;;</span><br><span class="line">cache.writeQuery(&#123;</span><br><span class="line">    query: GET_REPO,</span><br><span class="line">    variable: &#123;</span><br><span class="line">        orgName: search.orgName,</span><br><span class="line">        repoName: search.repoName,</span><br><span class="line">    &#125;,</span><br><span class="line">    data: &#123; repository: newData &#125;</span><br><span class="line">&#125;)</span><br><span class="line">       &#125;&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>最后一步是更新本地的state数据：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update=&#123;cache =&gt; &#123;</span><br><span class="line">        ...</span><br><span class="line">        cache.writeQuery(...);</span><br><span class="line">setRepo(newData);</span><br><span class="line">       &#125;&#125;</span><br></pre></td></tr></table></figure><p>这样，当给某个repo点赞，可以看到数据立即刷新了。</p><h2><span id="summary">Summary</span></h2><p>GraphQL目前不是很少用，虽然某些情况下很灵活，提供了树形结构的数据。查询和返回结构一致。只有一个请求地址。请求方法只有一个POST。查询参数灵活多变。</p><p>这里还介绍了<code>Apollo</code>客户端的实现，相比于<code>axios</code>。只需要在顶层组件实现一个<code>provider</code>即可，类似于Router的实现。</p><p>还介绍了<code>Mutation</code>组件的实现，以及对内存的处理。</p><p>不常用的原因也可想而知，不便于维护，没有版本，对于简单的接口来说有点臃肿。</p><p>鉴于GraphQL很少出现，此处不作习题演练。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;GraphQL query and mutation syntax&lt;/li&gt;
&lt;li&gt;Using axios as a GraphQL client&lt;/li&gt;
&lt;li&gt;Using Apollo GraphQL client&lt;/li&gt;
&lt;li&gt;Working with cached data in Apollo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GraphQL很少被用到，本章仅作简单介绍和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第九章 RESTful 接口交互</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_9_Interacting_with_RESTful_APIs/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_9_Interacting_with_RESTful_APIs/</id>
    <published>2019-11-27T08:00:00.000Z</published>
    <updated>2020-05-19T09:39:57.073Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Writing asynchronous code</li><li>Using fetch</li><li>Using axios with class components</li><li>Using axios with function components</li></ul><h2><span id="writing-asynchronous-code">Writing asynchronous code</span></h2><p>默认下TypeScript的代码是同步执行的。既是一行一行代码执行。TypeScript也可以实现异步功能。调用REST API就是一个异步实现的例子。</p><h3><span id="callbacks">Callbacks</span></h3><p>回调指的是将函数作为参数，传入到一个异步函数中调用，当该异步函数完成时执行该传参函数的内容。</p><h3><span id="callback-execution">Callback execution</span></h3><p>下面以一个例子阐述在TypeScript环境下的异步回调实现：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName: <span class="built_in">string</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  firstName = <span class="string">"Fred"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"firstName in callback"</span>, firstName);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"firstName aftr setTimeout"</span>, firstName);</span><br></pre></td></tr></table></figure><p>代码中调用了JavaScript的异步函数<code>setTimeout</code>。第一个参数是一个回调函数，第二个参数是执行等待的时间。</p><p>这里的回调函数，形式上使用<code>() =&gt;{}</code> 表述，回调函数会将<code>firstName</code>变量更改为<code>Fred</code>，并输出到控制台。</p><p>执行代码，可以看到回调函数并没有执行，而是等待1000毫秒后再触发控制台打印信息。</p><p>异步函数的执行不会等待函数内部的完成。这种方式一方面不便于阅读，另一方面容易造成回调地狱(callback hell)。因为开发者容易在回调中内嵌更复杂的回调或异步函数实现。那么我们如何处理这种异步回调的错误？</p><h3><span id="handling-callback-erros">Handling callback erros</span></h3><p>本小节将探索如何处理异步代码的错误信息。</p><ol><li>首先有如下代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    throw new Error(&quot;Someting went wrong&quot;);</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125; catch (ex) &#123;</span><br><span class="line">  console.log(&quot;An error has occurred&quot;, ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次使用了<code>try / catch</code>方式来处理异步出现的错误信息。</p><ol start="2"><li>错误信息必须被处理。更改为：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface IResult &#123;</span><br><span class="line">  success: boolean;</span><br><span class="line">  error?: any;</span><br><span class="line">&#125;</span><br><span class="line">let result: IResult = &#123; success: true &#125;;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    throw new Error(&quot;Something went wrong&quot;);</span><br><span class="line">  &#125; catch (ex) &#123;</span><br><span class="line">    result.success = false;</span><br><span class="line">    result.error = ex;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, 1000);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure><p>这里将<code>try / catch</code>放置在回调函数的内部。以及使用了变量<code>result</code>来表述执行的成功或失败。</p><p>至此，回调引发的错误已经被处理了。幸运的是，有更好的方式来处理这种挑战。</p><h2><span id="promises">Promises</span></h2><p>promise是JavaScript里面的对象。它表述了一个异步操作的最终结果(成功或失败).</p><h3><span id="consuming-a-promised-based-function">Consuming a promised-based function</span></h3><p>下面是一个promised-based的API</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">.catch(<span class="function"><span class="params">json</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"error"</span>, json));</span><br></pre></td></tr></table></figure><ul><li>这里的函数<code>fetch</code>是javascript本地函数，用于处理RESTful API。</li><li>入参是一个URL</li><li><code>then</code>方法处理返回</li><li><code>catch</code>方法处理错误信息</li></ul><p>相比来说代码更易于阅读和理解。我们不需要在<code>then</code>方法中处理错误信息。</p><h3><span id="creating-a-promised-based-function">Creating a promised based function</span></h3><p>本小节会创建一个<code>wait</code>函数来处理异步等待信息。</p><ol><li>首先实现一个简单的回调：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wait = <span class="function">(<span class="params">ms: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ms &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">      reject(<span class="string">"Too long"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">"Successfully waited"</span>);</span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>该函数返回一个<code>Promise</code>对象，该对象包含有一个需要异步执行的构造器入参。</li><li><code>promise</code>构造入参<code>resolve</code>是一个函数，表示当函数执行完成后要处理的动作。</li><li><code>promise</code>构造入参<code>reject</code>是一个函数，表示出现错误后需要处理的动作。</li><li>函数体内部则使用了<code>setTimeout</code>以及一个回调处理等待动作。</li></ul><ol start="2"><li>消费这个<code>promised-based</code>函数：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait(<span class="number">500</span>)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"then &gt;"</span>, result))</span><br><span class="line">.then(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"catch &gt;"</span>, error));</span><br></pre></td></tr></table></figure><p>等待500毫秒后，函数将输出正确或失败信息。</p><ol start="3"><li>将等待时间延长，大于1000，<code>catch</code>方法被调用。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait(<span class="number">1500</span>)</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"then &gt;"</span>, result))</span><br><span class="line">.then(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"catch &gt;"</span>, error));</span><br></pre></td></tr></table></figure><p><code>Promise</code>对于异步代码有一个很好的处理机制。致辞，还有另一种异步处理的实现方式。</p><h2><span id="async-and-awit">async and awit</span></h2><p><code>async</code>和<code>await</code>是JavaScript的关键字。</p><ol><li>首先从<code>wait</code>函数的例子开始：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someWork = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> wait(<span class="number">500</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">someWork();</span><br></pre></td></tr></table></figure><ul><li>这里创建了一个箭头函数<code>someWork</code>，使用关键字<code>async</code>标注为异步。</li><li>使用关键字<code>await</code>在<code>wait</code>前面声明。<code>wait</code>下一行的执行将被暂停(halt)直到这个异步操作完成。</li><li><code>try / catch</code>将捕获任何异常信息。</li></ul><p>该方法有点像是一个异步操作的管理者。执行代码后，控制台打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">then &gt; Successfully waited</span><br></pre></td></tr></table></figure><ol start="2"><li>将等待时间改为1500毫秒：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> wait(<span class="number">1500</span>);</span><br></pre></td></tr></table></figure><p>控制台打印错误信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Too long</span><br></pre></td></tr></table></figure><p>因此，使用<code>async</code>和<code>await</code>使得代码更易于阅读。另一个奖励是，这种实现在旧的浏览器中仍然支持。</p><p>到目前为止，我们已经对如何编写更好的异步代码有更好的理解，下面会就RESTful API的实现进行练习。</p><h2><span id="using-fetch">Using fetch</span></h2><p><code>fetch</code>函数是一个JavaScript本地函数。本小节会对一些常见的RESTful API通过<code>fetch</code>进行交互。</p><h3><span id="geting-data-with-fetch">Geting data with fetch</span></h3><p>首先开始从GET请求开始。</p><h3><span id="baisc-get-request">Baisc GET request</span></h3><p>打开 TypeScript playground，输入如下代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>fetch</code>函数的第一个参数是一个URL请求地址</li><li><code>fetch</code>是一个promised-base函数</li><li>第一个<code>then</code>方法处理返回</li><li>第二个<code>then</code>方法处理当返回body是JSON</li></ul><h3><span id="getting-response-status">Getting response status</span></h3><p>通常，我们需要处理返回的status code：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status, respons.ok);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>返回的<code>status</code>给出了HTTP的状态信息</li><li><code>ok</code>返回一个<code>boolean</code>值表示200的状态码</li></ul><p>另一个404的不存在的示例如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts/1001"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status, response.ok);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="handling-errors">Handling errors</span></h3><p>通过<code>catch</code>方法处理错误信息：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span><br><span class="line">.catch(<span class="function"><span class="params">json</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"error"</span>, json));</span><br></pre></td></tr></table></figure><p>然而，<code>catch</code>并没有捕获非200状态的机制。所以对于非200的错误返回请求时，可以在第一个<code>then</code>方法中处理。</p><p>那么<code>catch</code>方法是干嘛的？它是用来捕获网络异常的，非200返回并不是一种网络异常。</p><h3><span id="creating-data-with-fetch">Creating data with fetch</span></h3><p>本小节将使用<code>fetch</code>来创建一些数据。</p><h3><span id="basic-post-request">Basic POST request</span></h3><p>通常情况下，调用<code>post</code>请求来创建数据。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>, &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    title: <span class="string">"Interesting post"</span>,</span><br><span class="line">    body: <span class="string">"This si an interesting post abount ..."</span>,</span><br><span class="line">    userId: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p><code>fetch</code>函数的第二个参数是一个可选对象。包含请求的method和body信息。</p><h3><span id="request-http-headers">Request HTTP headers</span></h3><p>通常，请求信息需要包含标头(header)。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts"</span>, &#123;</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    Authorization: <span class="string">"bearer some-bearer-token"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    title: <span class="string">"Interesting post"</span>,</span><br><span class="line">    body: <span class="string">"This is an interesting post about ..."</span>,</span><br><span class="line">    userId: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><p>对于<code>GET</code>请求，可以用如下形式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span>, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    Authorization: <span class="string">"bearer some-bearer-token"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(...);</span><br></pre></td></tr></table></figure><h3><span id="changing-data-with-fetch">Changing data with fetch</span></h3><h3><span id="basic-put-request">Basic PUT request</span></h3><p>通常情况下，对于数据的更改是用<code>PUT</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span>, &#123;</span><br><span class="line">  method: <span class="string">"PUT"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    title: <span class="string">"Corrected post"</span>,</span><br><span class="line">    body: <span class="string">"This is corrected post about ..."</span>,</span><br><span class="line">    userId: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><h3><span id="basic-patch-request">Basic PATCH request</span></h3><p>某些情况下，<code>PATCH</code>的请求用于部分请求的更改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span>, &#123;</span><br><span class="line">  method: <span class="string">"PATCH"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"Content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    title: <span class="string">"Corrected post"</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">  <span class="keyword">return</span> response.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><h3><span id="deleting-data-with-fetch">Deleting data with fetch</span></h3><p>通常情况下，RESTful接口都是用<code>DELETE</code>方法删除数据。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"https://jsonplaceholder.typicode.com/posts/1"</span>, &#123;</span><br><span class="line">  method: <span class="string">"DELETE"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response.status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到目前为止，我们已经学习了如何使用<code>fetch</code>函数来操作RESTful API。</p><h2><span id="using-axios-with-class-components">Using axios with class components</span></h2><p><code>axios</code>是一个流行的开源JavaScript HTTP客户端。我们会创建一个React App包含有create,read,upate,delete等操作。并探索<code>axios</code>相比<code>fetch</code>有哪些优势。</p><h3><span id="installing-axios">Installing axios</span></h3><p>首先新建一个应用：</p><ol><li>在控制台通过命令新建一个TypeScript的React项目：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app crud-api --typescript</span><br></pre></td></tr></table></figure><p>注意我们使用的React版本至少是<code>16.7.0-alpha.0</code>。我们可以在<code>package.json</code>里面检查。如果低于<code>16.7.0-alpha.0</code>，可以使用下面命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react@16.7.0-alpha.0</span><br><span class="line">npm install react@16.7.0-alpaha.0</span><br></pre></td></tr></table></figure><ol start="2"><li>项目创建后，添加TSLint到项目中，并带有某些规则：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd crud-api</span><br><span class="line">npm install tslint tslint-react tslint-config-prettier --save-dev</span><br></pre></td></tr></table></figure><ol start="3"><li>新建<code>tslint.json</code>包含下面规则：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "extends": ["tslint:recommended", "tslint-react", "tslint-config-prettier"],</span><br><span class="line">  "rules": &#123;</span><br><span class="line">    "ordered-imports": false,</span><br><span class="line">    "object-literal-sort-keys": false,</span><br><span class="line">    "jsx-no-lambda": false,</span><br><span class="line">    "no-debugger": false,</span><br><span class="line">    "no-console": false,</span><br><span class="line">  &#125;,</span><br><span class="line">  "linterOptions": &#123;</span><br><span class="line">    "exclude": [</span><br><span class="line">      "config/**/*.js",</span><br><span class="line">      "node_modules/**/*.ts",</span><br><span class="line">      "converage/lcov-report/*.js"</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>打开<code>App.tsx</code>文件，会有一个linting错误。在<code>render()</code>方法中添加<code>public</code>关键字处理该问题：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class App extends Component &#123;</span><br><span class="line">    public render() &#123;</span><br><span class="line">        return ( ... );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>添加<code>axios</code>：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>注意<code>axios</code>内已经包含TypeScript类型了，不需要额外安装。</p><ol start="6"><li>运行我们的应用。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3><span id="getting-data-with-axios">Getting data with axios</span></h3><h3><span id="basic-get-request">Basic GET request</span></h3><p>首先从GET请求开始。</p><ol><li>打开<code>App.tsx</code>，导入：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &quot;axios&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建接口类型，表示JSONPlaceholder返回的内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IPost &#123;</span><br><span class="line">    userId: number;</span><br><span class="line">    id?: number;</span><br><span class="line">    title: string;</span><br><span class="line">    body: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们需要存储上述的邮件信息到state中，因此添加下面这个接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">    posts: IPost[];</span><br><span class="line">&#125;</span><br><span class="line">class App extends React.Component&lt;&#123;&#125;, IState&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在构造器生命周期中初始化state：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component&lt;&#123;&#125;, IState&gt; &#123;</span><br><span class="line">    public constructor(props: &#123;&#125;) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            posts: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>通常是在<code>componentDidMount</code>生命周期函数中获取REST API数据。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">    axios</span><br><span class="line">    .get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;)</span><br><span class="line">    .then(response =&gt; &#123;</span><br><span class="line">        this.setState(&#123; posts: response.data &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这是使用<code>get</code>函数表述<code>GET</code>请求，它跟<code>fetch</code>一样，是一个promised-based函数。</li><li>这里是一个泛型函数，泛型参数为返回消息数据类型。</li><li>URL地址作为传入参数。</li><li>在<code>then</code>方法处理返回信息。</li><li>通过<code>data</code>对象属性获取请求的返回对象。</li></ul><p>因此，相比<code>fetch</code>有两点好处：</p><ul><li>可以定义返回的数据类型</li><li>只需要一步即可获取返回体</li></ul><ol start="6"><li>在<code>render</code>方法渲染：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">            &lt;url className=&quot;posts&quot;&gt;</span><br><span class="line">                &#123;this.state.posts.map(post =&gt; (</span><br><span class="line">                    &lt;li key=&#123;post.id&#125;&gt;</span><br><span class="line">                        &lt;h3&gt;&#123;post.title&#125;&lt;/h3&gt;</span><br><span class="line">                        &lt;p&gt;&#123;post.body&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                ))&#125;</span><br><span class="line">            &lt;/url&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用<code>posts</code>数组的<code>map</code>函数来展现数据。</p><ol start="7"><li>在<code>index.css</code>添加CSS属性，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.posts</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，使用<code>axios</code>来处理请求更简单方便。以及我们需要在<code>componentDidMount</code>生命周期函数中调用。</p><p>那么对于网络错误如何处理？</p><h3><span id="handling-errors">Handling errors</span></h3><ol><li>首先添加一个错误的URL，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/postsX&quot;)</span><br></pre></td></tr></table></figure><ol start="2"><li>我们希望出现网络错误的情况下，依然给用户以反馈内容。可以用<code>catch</code>方法：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/postsX&quot;)</span><br><span class="line">  .then( ... )</span><br><span class="line">  .catch(ex =&gt; &#123;</span><br><span class="line">        const error = </span><br><span class="line">        ex.response.status === 404 ? &quot;Resource not found&quot; : &quot;An unexpected error has occurred&quot;;</span><br><span class="line">        this.setState(&#123; error &#125;);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>和<code>fetch</code>不同，HTTP status错误返回码可以在<code>catch</code>方法处理。错误信息包含有一个属性<code>response</code>表示请求的返回内容。</p><ol start="3"><li>另外修改该部分渲染，我们希望将错误信息显示出来：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">    posts: IPost[];</span><br><span class="line">    error: string;</span><br><span class="line">&#125;</span><br><span class="line">class App extends React.Component&lt;&#123;&#125;, IState&gt; &#123;</span><br><span class="line">    public constructor(props: &#123;&#125;) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            posts: [],</span><br><span class="line">            error: &quot;&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>渲染错误内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul className=&quot;posts&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&#123;this.state.error &amp;&amp; &lt;p className=&quot;error&quot;&gt;&#123;this.state.error&#125;&lt;/p&gt;&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>添加错误的样式：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行应用，可以看到红色的 <strong>Resource not found</strong> 字体。</p><ol start="6"><li>将URL更改为原来有效的地址，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;)</span><br></pre></td></tr></table></figure><h3><span id="request-http-headers">Request Http headers</span></h3><p>有时候我们希望带上header请求信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因此，我们在HTTP请求时定义了<code>headers</code>属性。</p><h3><span id="timeouts">Timeouts</span></h3><p>超时机制用于提高用户体验。</p><ol><li>在我们的app添加一个请求超时：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    timeout: 1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的单位是毫秒。表示期望请求在1毫秒内做出响应。</p><ol start="2"><li>在<code>catch</code>方法处理超时：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.catch(ex =&gt; &#123;</span><br><span class="line">    const error = </span><br><span class="line">          ex.code === &quot;ECONNABORTED&quot;</span><br><span class="line">    ? &quot;A timeout has occurred&quot;</span><br><span class="line">    : ex.response.status === 404 </span><br><span class="line">    ? &quot;Resource not found&quot;</span><br><span class="line">    : &quot;An unexpected error has occurred&quot;;</span><br><span class="line">    this.setState(&#123; error &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们检测<code>code</code>属性来判断是否发生了超时。</p><p>再次执行应用，可以看到红色<strong>A timeout has occurred</strong>字体。</p><ol start="3"><li>将超时更改为合适的值。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, &#123;</span><br><span class="line">    ...</span><br><span class="line">    timeout: 5000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3><span id="canceling-requests">Canceling requests</span></h3><p>允许用户取消请求可以提升用户体验效果。</p><ol><li>首先，导入<code>CancelTokenSource</code>类型：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios, &#123; CancelTokenSource &#125; from &quot;axios&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加 cancel token和加载flag到state中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  posts: IPost[];</span><br><span class="line">  error: string;</span><br><span class="line">  cancelTokenSource?: CancelTokenSource;</span><br><span class="line">  loading: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在构造器初始化：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.state = &#123;</span><br><span class="line">  posts: [],</span><br><span class="line">  error: &quot;&quot;,</span><br><span class="line">  loading: true</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>GET</code>请求之前，生成token资源：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">  const cancelToken = axios.CancelToken;</span><br><span class="line">  const cancelTokenSource = cancelToken.source();</span><br><span class="line">  this.setState(&#123; cancelTokenSource &#125;);</span><br><span class="line">  axios</span><br><span class="line">    .get&lt;IPost[]&gt;(...)</span><br><span class="line">    .then(...)</span><br><span class="line">    .catch(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>然后在GET请求中使用这个token：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, &#123;</span><br><span class="line">  cancelToken: cancelTokenSource.token,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>我们可以在<code>catch</code>方法处理取消的情况。并设置<code>loading</code>状态为<code>false</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.catch((ex) =&gt; &#123;</span><br><span class="line">  const error =</span><br><span class="line">    ex.code === &quot;ECONNABORTED&quot;</span><br><span class="line">      ? &quot;A timeout has occurred&quot;</span><br><span class="line">      : ex.response.status === 404</span><br><span class="line">      ? &quot;Resource not found&quot;</span><br><span class="line">      : &quot;An unexpected error has occurred&quot;;</span><br><span class="line">  this.setState(&#123; error &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>因此我们使用<code>axios</code>里面的<code>isCancel</code>函数来检测请求是否已经被取消。</p><ol start="7"><li>在<code>componentDidMount</code>方法里面，在<code>then</code>方法设置<code>loading</code>的状态为<code>false</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.then(response =&gt; &#123;</span><br><span class="line">    this.setState(&#123; posts: response.data, loading: false &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="8"><li>在<code>render</code>方法中，添加一个<code>Cancel</code>按钮，允许用户取消请求：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;this.state.loading &amp;&amp; (</span><br><span class="line">    &lt;button onClick=&#123;this.handleCancelClick&#125;&gt;Cancel&lt;/button&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&lt;url className=&quot;posts&quot;&gt;...&lt;/url&gt;</span><br></pre></td></tr></table></figure><ol start="9"><li>实现取消处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private handleCancelClick = () =&gt; &#123;</span><br><span class="line">    if (this.state.cancelTokenSource) &#123;</span><br><span class="line">        this.state.cancelTokenSource.cancel(&quot;User cancelled operation&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="10"><li>现在有点难测，因为请求一般很快。为了可以看到取消请求的动作。我们可以在<code>componentDidMount</code>方法内立即取消请求动作：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">  .get&lt;IPost[]&gt;(...)</span><br><span class="line">  .then(response =&gt; &#123;...&#125;)</span><br><span class="line">  .catch(ex =&gt; &#123;...&#125;);</span><br><span class="line">cancelTokenSource.cancel(&quot;User cancelled operation&quot;);</span><br></pre></td></tr></table></figure><p>回到浏览器可以看到红色字体的<strong>Request cancelled</strong>字样。</p><h3><span id="creating-data-with-axios">Creating data with axios</span></h3><p>使用POST请求创建数据：</p><ol><li>首先添加状态属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">    ...</span><br><span class="line">    editPost: IPost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在构造器初始化：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public constructor(props: &#123;&#125;) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">        ...,</span><br><span class="line">        editPost: &#123;</span><br><span class="line">          body: &quot;&quot;,</span><br><span class="line">          title: &quot;&quot;,</span><br><span class="line">          userId: 1</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建表单内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;App&quot;&gt;</span><br><span class="line">    &lt;div className=&quot;post-eidt&quot;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            placeholder=&quot;Enter title&quot;</span><br><span class="line">            value=&#123;this.state.editPost.title&#125;</span><br><span class="line">            onChange=&#123;this.handleTitleChange&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;textarea</span><br><span class="line">            placeholder=&quot;Enter body&quot;</span><br><span class="line">            value=&#123;this.state.editPost.body&#125;</span><br><span class="line">            onChange=&#123;this.handleBodyChange&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.handleSaveClick&#125;&gt;Save&lt;/button&gt;</span><br><span class="line">        &#123;this.state.loading &amp;&amp; (</span><br><span class="line">            &lt;button onClick=&#123;this.handleCancelClick&#125;&gt;Cancel&lt;/button&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>下面是对状态的更新处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private handleTitleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        editPost: &#123;</span><br><span class="line">            ...this.state.editPost,</span><br><span class="line">            title: e.currentTarget.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">private handleBodyChange = (e: React.ChangeEvent&lt;HTMLTextAreaElement&gt;) =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">        editPost: &#123;</span><br><span class="line">            ...this.state.editPost,</span><br><span class="line">            body: e.currentTarget.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>index.css</code>中添加一些CSS样式让它看起来更合理：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-edit</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-edit</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-edit</span> <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-edit</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: inherit;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>然后在点击时，触发<code>POST</code>请求：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private handleSaveClick = () =&gt; &#123;</span><br><span class="line">    axios</span><br><span class="line">      .post&lt;IPost&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, &#123;</span><br><span class="line">        body: this.state.editPost.body,</span><br><span class="line">        title: this.state.editPost.title,</span><br><span class="line">        userId: this.state.editPost.userId</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">            &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ).then(response =&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            posts: this.state.posts.concat(response.data)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>post</code>函数的结构和<code>get</code>非常相似。实际上，可以像<code>get</code>方法一样，添加错误处理、超时、取消等动作。</p><h3><span id="updating-data-with-axios">Updating data with axios</span></h3><p>我们希望用户可以点击<strong>Update</strong>按钮来更新数据。</p><ol><li>首先创建一个<code>Update</code>按钮。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;li key=&#123;post.id&#125;&gt;</span><br><span class="line">  &lt;h3&gt;&#123;post.title&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;p&gt;&#123;post.body&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button onClick=&#123;() =&gt; this.handleUpdateClick(post)&#125;&gt;</span><br><span class="line">    Update</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现<strong>Update</strong>按钮的事件处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleUpdateClick = (post:IPost) =&gt; &#123;</span><br><span class="line">  this.setState(&#123; editPost: post &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>在原来的保存点击句柄，需要实现两个分支：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private handleSaveClick = () =&gt; &#123;</span><br><span class="line">  if (this.state.editPost.id) &#123;</span><br><span class="line">    // TODO - make a PUT request</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    axios</span><br><span class="line">      .post&lt;IPost&gt;( ... )</span><br><span class="line">      .then ( ... );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li>实现<code>PUT</code>请求分支：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">if (this.state.editPost.id) &#123;</span><br><span class="line">  axios</span><br><span class="line">  .put&lt;IPost&gt;(</span><br><span class="line">    `https://jsonplaceholder.typicode.com/posts/$&#123;this.state.editPost.id&#125;`, this.state.editPost, &#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ).then(() =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      editPost: &#123;</span><br><span class="line">        body: &quot;&quot;,</span><br><span class="line">        title: &quot;&quot;,</span><br><span class="line">        userId: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      posts: this.state.posts</span><br><span class="line">        .filter(post =&gt; post.id !== this.state.editPost.id)</span><br><span class="line">        .concat(this.state.editPost)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="delete-data-with-axios">Delete data with axios</span></h3><p>添加<code>Delete</code>按钮以允许用户删除数据：</p><ol><li>首先创建一个<code>Delete</code>按钮：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;li key=&#123;post.id&#125;&gt;</span><br><span class="line">  &lt;h3&gt;&#123;post.title&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;p&gt;&#123;post.body&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button onClick=&#123;() =&gt; this.handleUpdateClick(post)&#125;&gt;</span><br><span class="line">    Update</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;button onClick=&#123;() =&gt; this.handleDeleteClick(post)&#125;&gt;</span><br><span class="line">    Delete</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加删除的事件处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private handleDeleteClick = (post: IPost) =&gt; &#123;</span><br><span class="line">  axios</span><br><span class="line">  .delete(`https://jsonplaceholder.typicode.com/posts/$&#123;post.id&#125;`)</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      posts: this.state.posts.filter(p =&gt; p.id !== post.id)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3><span id="using-axios-with-function-components">Using axios with function components</span></h3><p>本小节将实现函数组件(function component)版本的<code>axios</code>调用。我们将重构上一节的<code>App</code>的代码：</p><ol><li>首先声明<code>defaultPosts</code>常量，它包含了邮箱的初始状态。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const defaultPosts: IPost[] = [];</span><br></pre></td></tr></table></figure><ol start="2"><li>删除<code>IState</code>接口，因为状态被构造为独立的块。</li><li>移除先前的<code>App</code>类组件。</li><li>接下来，在常量<code>defaultPosts</code>下开始我们的<code>App</code>函数组件。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const App: React.FC = () =&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>下面创建独立的状态块，包括post、error、cancel token、loading falg、editpost。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const App: React.FC = () =&gt; &#123;</span><br><span class="line">  const [posts, setPosts]: [IPost[], (posts: IPost[]) =&gt; void] = React.useState(defaultPosts);</span><br><span class="line">  const [error, setError]: [string, (error: string) =&gt; void] = React.useState(&apos;&apos;);</span><br><span class="line">  const cancelToken = axios.CancelToken;</span><br><span class="line"></span><br><span class="line">  const [cancelTokenSource, setCancelTokenSource]: [</span><br><span class="line">    CancelTokenSource,</span><br><span class="line">    (cancelSourceToken: CancelTokenSource) =&gt; void,</span><br><span class="line">  ] = React.useState(cancelToken.source());</span><br><span class="line"></span><br><span class="line">  const [loading, setLoading]: [boolean, (loading: boolean) =&gt; void] = React.useState&lt;boolean&gt;(false);</span><br><span class="line">  const [editPost, setEditPost]: [IPost, (post: IPost) =&gt; void] = React.useState(&#123;</span><br><span class="line">    body: &apos;&apos;,</span><br><span class="line">    title: &apos;&apos;,</span><br><span class="line">    userId: 1,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们使用了<code>useState</code>函数来定义和初始化所有这些状态块。</p><ol start="6"><li>我们希望在组件首次被挂载时调用REST API以获取邮箱信息。我们可以使用<code>useEffect</code>函数，在状态定义下添加：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">  // TODO - get posts</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><ol start="7"><li>在arrow function调用REST API获取邮件数据：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">  axios</span><br><span class="line">  .get&lt;IPost[]&gt;(&quot;https://jsonplaceholder.typicode.com/posts&quot;, &#123;</span><br><span class="line">    cancelToken: cancelTokenSource.token,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &quot;Content-Type&quot;: &quot;application/json&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    timeout: 5000</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><ol start="8"><li>处理返回数据，设置邮箱数据和加载状态：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">  axios</span><br><span class="line">  .get&lt;IPost[]&gt;(...)</span><br><span class="line">.then(response =&gt; &#123;</span><br><span class="line">    setPosts(response.data);</span><br><span class="line">    setLoading(false);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><ol start="9"><li>处理错误状态信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">  axios</span><br><span class="line">    .get&lt;IPost[]&gt;(...)</span><br><span class="line">    .then(...)</span><br><span class="line">    .catch(ex =&gt; &#123;</span><br><span class="line">      const err = axios.isCancel(ex)</span><br><span class="line">        ? &apos;Request cancelled&apos;</span><br><span class="line">        : ex.code === &apos;ECONNABORTED&apos;</span><br><span class="line">        ? &apos;A timeout has occurred&apos;</span><br><span class="line">        : ex.response.status === 404</span><br><span class="line">        ? &apos;Resource not found&apos;</span><br><span class="line">        : &apos;An unexpected error has occurred&apos;;</span><br><span class="line">      setError(err);</span><br><span class="line">      setLoading(false);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><ol start="10"><li>接下来处理事件。事件的处理并没有多大变化，只是使用<code>const</code>来声明，以及用前面声明的状态块来设置状态。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const handleCancelClick = () =&gt; &#123;</span><br><span class="line">  if (cancelTokenSource) &#123;</span><br><span class="line">    cancelTokenSource.cancel(&quot;User cancelled operation&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>输入变更事件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const handleTitleChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">  setEditPost(&#123; ...editPost, title: e.currentTarget.value &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">const handleBodyChange = (e: React.ChangeEvent&lt;HTMLTextAreaElement&gt;) =&gt; &#123;</span><br><span class="line">  setEditPost(&#123; ...editPost, body: e.currentTarget.value &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="12"><li><strong>Save</strong>按钮事件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">const handleSaveClick = () =&gt; &#123;</span><br><span class="line">  if (editPost.id) &#123;</span><br><span class="line">    axios</span><br><span class="line">      .put&lt;IPost&gt;(`https://jsonplaceholder.typicode.com/posts/$&#123;editPost.id&#125;`, editPost, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(() =&gt; &#123;</span><br><span class="line">        setEditPost(&#123;</span><br><span class="line">          body: &apos;&apos;,</span><br><span class="line">          title: &apos;&apos;,</span><br><span class="line">          userId: 1,</span><br><span class="line">        &#125;);</span><br><span class="line">        setPosts(posts.filter(post =&gt; post.id !== editPost.id).concat(editPost));</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    axios</span><br><span class="line">      .post&lt;IPost&gt;(</span><br><span class="line">        &apos;https://jsonplaceholder.typicode.com/posts&apos;,</span><br><span class="line">        &#123;</span><br><span class="line">          body: editPost.body,</span><br><span class="line">          title: editPost.title,</span><br><span class="line">          userId: editPost.userId,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">      .then(response =&gt; &#123;</span><br><span class="line">        setPosts(posts.concat(response.data));</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="13"><li><strong>Update</strong> 按钮：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const handleUpdateClick = (post: IPost) =&gt; &#123;</span><br><span class="line">  setEditPost(post);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="14"><li><strong>Delete</strong>按钮：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const handleDeleteClick = (post: IPost) =&gt; &#123;</span><br><span class="line">  axios.delete(`https://jsonplaceholder.typicode.com/posts/$&#123;post.id&#125;`).then(() =&gt; &#123;</span><br><span class="line">    setPosts(posts.filter(p =&gt; p.id !== post.id));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="15"><li>最后的任务是实现返回语句。和原来的没有太大改变，只是删掉了<code>this</code>引用。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">    &lt;div className=&quot;post-edit&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; placeholder=&quot;Enter title&quot; value=&#123;editPost.title&#125; onChange=&#123;handleTitleChange&#125; /&gt;</span><br><span class="line">      &lt;textarea placeholder=&quot;Enter body&quot; value=&#123;editPost.body&#125; onChange=&#123;handleBodyChange&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleSaveClick&#125;&gt;Save&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &#123;loading &amp;&amp; &lt;button onClick=&#123;handleCancelClick&#125;&gt;Cancel&lt;/button&gt;&#125;</span><br><span class="line">    &lt;ul className=&quot;posts&quot;&gt;</span><br><span class="line">      &#123;posts.map(post =&gt; (</span><br><span class="line">        &lt;li key=&#123;post.id&#125;&gt;</span><br><span class="line">          &lt;h3&gt;&#123;post.title&#125;&lt;/h3&gt;</span><br><span class="line">          &lt;p&gt;&#123;post.body&#125;&lt;/p&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; handleUpdateClick(post)&#125;&gt;Update&lt;/button&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; handleDeleteClick(post)&#125;&gt;Delete&lt;/button&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &#123;error &amp;&amp; &lt;p className=&quot;error&quot;&gt;&#123;error&#125;&lt;/p&gt;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>主要不同的地方是，我们使用了<code>useEffect</code>函数来调用REST API，替换原来的<code>componentDidMount()</code>。</p><h2><span id="summary">Summary</span></h2><p>Callback-based异步代码难于阅读和维护。谁会花几个小时，从根节点开始去追踪Callback-based异步代码的bug呢？又或者花好几个小时来逐步理解每个回调的意思？幸运的是，我们有Promise-based的写法。</p><p>Promise-based函数相比基于回调的写法有很大提升。更易于阅读、错误更易处理。结合关键字<code>async</code>和<code>await</code>后的使用相比原来代码有更大的阅读性。</p><p>现代浏览器有一个很好的<code>fetch</code>函数来处理REST请求。它是一个Promise-based的函数，提供对异步请求很好的处理。</p><p><code>axios</code>是相对<code>fetch</code>的另一种选择。它的API更清晰，TypeScript更友好，错误处理更方便。</p><p>最后我们还对异步请求的实现做了两个不同的版本。一个是class component，另一个是function component(FC)。在类组件，异步的处理要放在<code>componentDidMount</code>生命周期函数中。在函数组件，使用<code>useEffect</code>函数来处理每次的渲染。两种方式，你会选择哪种？</p><p>REST API并不是唯一会交互的API。GraphQL是另一种流行的API服务。将在下个章节学习。</p><h2><span id="questions">Questions</span></h2><p>问题时间。</p><ol><li>下面程序执行后，会在console输出什么？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    setInterval(() =&gt; &#123;</span><br><span class="line">        throw new Error(&quot;Oops&quot;);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125; catch (ex) &#123;</span><br><span class="line">    console.log(&quot;Sorry, there is a problem&quot;, ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>假设没有9999这个邮箱，下面程序会输出什么？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(&quot;https://jsonplaceholder.typicode.com/posts/999&quot;)</span><br><span class="line">.then(response =&gt; &#123;</span><br><span class="line">    console.log(&quot;HTTP status code&quot;, response.status);</span><br><span class="line">    return response.json();</span><br><span class="line">&#125;)</span><br><span class="line">.then(data =&gt; console.log(&quot;Response body&quot;, data))</span><br><span class="line">.catch(error =&gt; console.log(&quot;Error&quot;, error));</span><br></pre></td></tr></table></figure><ol start="3"><li>下面程序执行后，console会输出什么？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios</span><br><span class="line">.get(&quot;https://jsonplaceholder.typicode.com/posts/9999&quot;)</span><br><span class="line">.then(response =&gt; &#123;</span><br><span class="line">    console.log(&quot;HTTP status code&quot;, response.status);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(error =&gt; &#123;</span><br><span class="line">    console.log(&quot;Error&quot;, error.response.status);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>使用<code>fetch</code>和<code>axios</code>有什么好处？</li><li>下面程序如何添加一个bearer token？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&quot;https://jsonplaceholder.typicode.com/posts/1&quot;)</span><br></pre></td></tr></table></figure><ol start="6"><li>我们使用下面程序来更新邮箱的标题？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.put(&quot;https://jsonplaceholder.typicode.com/posts/1&quot;, &#123;</span><br><span class="line">    title: &quot;corrected title&quot;,</span><br><span class="line">    body: &quot;some stuff&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="7"><li>如果要用到<code>PATCH</code>请求，怎么改更高效。</li><li>我们实现了一个FC来显示邮箱，下面代码在执行时会有什么错误？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">    axios</span><br><span class="line">    .get(`https://jsonplaceholder.typicode.com/posts/$&#123;id&#125;`)</span><br><span class="line">    .then(...)</span><br><span class="line">    .catch(...);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Writing asynchronous code&lt;/li&gt;
&lt;li&gt;Using fetch&lt;/li&gt;
&lt;li&gt;Using axios with class components&lt;/li&gt;
&lt;li&gt;Using axios with function compon
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第八章 React Redux</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_8_React_Redux/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_8_React_Redux/</id>
    <published>2019-11-27T07:50:08.000Z</published>
    <updated>2020-04-07T02:46:58.027Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Principles and key concepts</li><li>Installing Redux</li><li>Creating reducers</li><li>Creating actions</li><li>Creating a store</li><li>Connecting our React App to the store</li><li>Managing state with use Reducer</li></ul><h2><span id="principles-and-key-concepts">Principles and key concepts</span></h2><h3><span id="principles">Principles</span></h3><p>Redux的三大原则：</p><ul><li><strong>Single source of truth</strong>：意味着整个项目的状态被存储在一个单一对象。在一个真实应用系统中，这个对象很可能包含了一个复杂的内嵌对象树。</li><li><strong>State is read-only</strong>：意味着状态不能被直接改变。就是说不能通过组件来改变状态。在Redux中，唯一能改变状态的方法是通过action进行传递(dispatch)。</li><li><strong>Changes are made with pure functions</strong>：那些能够改变状态的函数被称为“<code>reducer</code>”。</li></ul><p>接下来的环节，会深入介绍action和reducer以及消息的store内容。</p><h3><span id="key-concepts">Key concepts</span></h3><p>Redux内存活的整个应用的状态被称为一个<code>store</code>。状态被存储在一个JavaScript对象中，形式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  products: [&#123; id: 1, name: "Table", ...&#125;, &#123;...&#125;, ...],</span><br><span class="line">  productsLoading: false,</span><br><span class="line">  currentProduct: &#123; id: 2, xname: "Chair", ... &#125;,</span><br><span class="line">  basket: [&#123; product: &#123; id: 2, xname: "Chair" &#125;, quantity: 1 &#125;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>状态不会包含有任何函数、setter或者getter。它就是一个简单的JavaScript对象。</p><p>要更新一个store中的state，就是派遣一个<strong>action</strong>。其中action又是另外一个简单的JavaScript对象，格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: "PRODUCTS/LOADING"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>type</code>属性决定了哪种action需要被处理。<code>type</code>是必须的，否则reducer不知道如何改变状态。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: "PRODUCTS/GETSINGLE",</span><br><span class="line">  product: &#123; id: 1, name: "Table", ...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个带有一个额外的属性值，因为reducer除了要知道action的类型外，还要获取更新的内容。</p><p>因此，reducer是纯函数。</p><blockquote><p>纯函数就是不依赖于外部自由变量的函数，对于给定的输入，总能得到相同的结果。</p></blockquote><p>下面是reducer的一个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export const productsReducer = (state = initialProductState, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case &quot;PRODUCTS/LOADING&quot;: &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    ...state,</span><br><span class="line">productsLoading: true</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">case &quot;PRODUCTS/GETSINGLE&quot;: &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    ...state,</span><br><span class="line">currentProduct: action.product,</span><br><span class="line">productsLoading: false</span><br><span class="line">  &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">default:</span><br><span class="line">  &#125;</span><br><span class="line">  return state || initialProductState;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于reducer有几点：</p><ul><li>reducer接收两个参数，current state 和要处理的action</li><li>reducer第一次被调用时，state参数默认为一个初始化状态对象</li><li>这里需要使用switch语句处理不同的action类型</li><li>返回语句表示创建一个新的状态覆盖原来已有的状态属性</li><li>reducer返回新的(更新的)状态</li></ul><p>你会注意action和reducer都不是TypeScript类型的。下面开始实战。</p><h2><span id="installing-redux">Installing Redux</span></h2><p>在使用Redux之前，需要安装依赖项。另外还需要安装一个库<code>redux-thunk</code>，以实现异步的ation:</p><ol><li>安装redux,</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux</span><br></pre></td></tr></table></figure><ol start="2"><li>安装具体的redux的关联框架，</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add rect-redux</span><br></pre></td></tr></table></figure><ol start="3"><li>对应TS，</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @types/react-redux</span><br></pre></td></tr></table></figure><ol start="4"><li>安装<code>redux-thunk</code>，</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add redux-thunk</span><br><span class="line">yarn add -D @types/redux-thunk</span><br></pre></td></tr></table></figure><h2><span id="creating-actions">Creating actions</span></h2><p>这里将沿用前面章节使用的代码，将Redux集成到产品页面上。本小节，我们会创建action获取产品内容。以及使用另外一个action更改新的状态。</p><p>在此之前，首先在<code>ProductsData.ts</code>创建一个假的API，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getProducts = <span class="keyword">async</span> (): <span class="built_in">Promise</span>&lt;IProduct[]&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> wait(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> products;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数异步等待返回的产品信息。</p><h3><span id="creating-state-and-action-types">Creating state and action types</span></h3><p>下面使用Redux来增强React shop。首先，创建一些state类型，以及action类型。</p><ol><li>在<code>src</code>文件夹创建一个新的文件<code>ProductsTypes.ts</code>，</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IProduct &#125; <span class="keyword">from</span> <span class="string">"./ProductsData"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加两种不同类型的action枚举，</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> ProductsActionTypes &#123;</span><br><span class="line">  GETALL = <span class="string">"PRODUCTS/GETALL"</span>,</span><br><span class="line">  LOADING = <span class="string">"PRODUCTS/LOADING"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redux并没有要求action类型为字符串形式。这里我们选择用字符串来表述。同时要确保字符串是全局唯一的。我们定义的字符串中包含了两点重要信息：</p><ul><li>存储的action被关联。这里它是<code>PRODUCTS</code>。</li><li>特定的具体操作被指示。这里，<code>GETALL</code>表示获取所有商品，<code>LOADING</code>表示商品正在获取中。</li></ul><p>当然我们也可以写成类似<code>PRODUCTS-GETALL</code>或者<code>Get All Products</code>。我们只需要确保字符串是唯一的。</p><ol start="3"><li>下面为上述两种Action定义接口：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IProductsGetAllAction &#123;</span><br><span class="line">  <span class="keyword">type</span>: ProductsActionTypes.GETALL,</span><br><span class="line">  products: IProduct[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IProductsLoadingAction &#123;</span><br><span class="line">  <span class="keyword">type</span>: ProductsActionTypes.LOADING</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>IProductsGetAllAction</code>用作获取商品时的派遣动作。<code>IProductsLoadingAction</code>用作加载状态。</p><ol start="4"><li>组合为一个新的union type:</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> ProductsActions = </span><br><span class="line">  | IProductsGetAllAction</span><br><span class="line">  | IProductsLoadingAction</span><br></pre></td></tr></table></figure><p>该类型将被传递在reducer的参数上。</p><ol start="5"><li>最后，为这种存储状态创建一个接口：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IProductsState &#123;</span><br><span class="line">  readonly products: IProduct[];</span><br><span class="line">  readonly productsLoading: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的state将包含了一组商品信息，以及商品是否正在加载。</p><p>注意到属性前面引入了<code>readonly</code>关键字。它帮助我们避免对状态的直接修改。</p><p>有了state和action的类型后，接下来创建一些具体的action。</p><h3><span id="creating-actions">Creating actions</span></h3><p>本小节，将创建两个action。获取商品的action，商品处于加载的action。</p><ol><li>创建一个<code>ProductsActions.ts</code>文件，</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActionCreator, AnyAction, Dispatch &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br></pre></td></tr></table></figure><p>这里用到几个action类型需要实现。</p><ol start="2"><li>其中一个action用作异步操作。需要导入<code>redux-thunk</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ThunkAction &#125; <span class="keyword">from</span> <span class="string">"redux-thunk"</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>另外导入之前的模拟API。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getProducts <span class="keyword">as</span> getProductsFromAPI &#125; <span class="keyword">from</span> <span class="string">"./ProductsData"</span>;</span><br></pre></td></tr></table></figure><p>这里需要重命名<code>getProductsFromAPI</code>，避免和<code>getProducts</code>的action冲突。</p><ol start="4"><li>将先前定义的action类型导入。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; IProductsGetAllAction, IProductsLoadingAction, IProductsState, ProductsActionTypes &#125; <span class="keyword">from</span> <span class="string">"./ProductsTypes"</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>接下来，创建一个action creator，顾名思义：它是一个函数，创建并返回一个action！</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loading: ActionCreator&lt;IProductsLoadingAction&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">type</span>: ProductsActionTypes.LOADING</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>我们使用了泛型<code>ActionCreator</code>作为函数签名</li><li>函数仅仅返回要求的action对象</li></ul><p>还可以使用隐式返回语句另函数更为简洁</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loading: ActionCreator&lt;IProductsLoadingAction&gt; = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">type</span>: ProductsActionTypes.LOADING,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们将用到这个简短语法用于action creator的实现。</p><ol start="6"><li>添加另一个action creator的实现，这稍微更复杂一些：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getProducts: ActionCreator&lt;ThunkAction&lt;</span><br><span class="line">  <span class="built_in">Promise</span>&lt;AnyAction&gt;,</span><br><span class="line">  IProductsState,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  IProductsGetAllAction</span><br><span class="line">&gt;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>因为这里的action是异步的，需要进行一层包装。这里使用了<code>ThunkAction</code>泛型类型来包装同步action，它包含4个参数：</p><ul><li>第一个参数是返回类型，理想上应该是<code>Promise&lt;IProductsGetAllAction&gt;</code>。然而，TypeScript编译器无法处理，因此折中放宽为<code>Promise&lt;AnyAction&gt;</code>类型。</li><li>第二个参数为关联的state接口。</li><li>第三个参数是传递给到action creator的函数参数的类型，因为我们的action creator没有定义参数，这里传递null。</li><li>最后一个参数是action的类型。</li></ul><p>我们对这些action creator进行暴露，因为最终会被<code>ProductsPage</code>组件调用。</p><ol start="7"><li>异步action需要返回一个异步函数，最终派遣我们的action：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getProducts: ActionCreator&lt;ThunkAction&lt;</span><br><span class="line">  <span class="built_in">Promise</span>&lt;AnyAction&gt;,</span><br><span class="line">  IProductsState,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  IProductsGetAllAction</span><br><span class="line">&gt;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch: Dispatch) =&gt; &#123;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因此，函数第一件事是返回另一个函数，使用<code>async</code>关键字标记为异步的。内部函数以Dispatcher作为回调参数。</p><ol start="8"><li>下面实现内部函数：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getProducts: ActionCreator&lt;ThunkAction&lt;</span><br><span class="line">  <span class="built_in">Promise</span>&lt;AnyAction&gt;,</span><br><span class="line">  IProductsState,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  IProductsGetAllAction</span><br><span class="line">&gt;&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch: Dispatch) =&gt; &#123;</span><br><span class="line">    dispatch(loading());</span><br><span class="line">    <span class="keyword">const</span> products = <span class="keyword">await</span> getProductsFromAPI();</span><br><span class="line">    <span class="keyword">return</span> dispatch(&#123;</span><br><span class="line">      products,</span><br><span class="line">      <span class="keyword">type</span>: ProductsActionTypes.GETALL,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>首先做的，dispatch 启动action，以得到最终的loading state。</li><li>然后异步的方式，从模拟API获取商品信息</li><li>最后一步dispatch 要求的action。</li></ul><p>目前创建了好几个action了，接下来创建相应的reducer。</p><h3><span id="creating-reducers">Creating reducers</span></h3><p>一个reducer，就是一个传入给定的action，产生新的state的一个函数。因此，这个函数在当前state，接收了一个action，返回新的state。</p><ol><li>在<code>src</code>目录新建文件<code>ProductsReducer.ts</code>：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Reducer &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IProductsState, ProductsActions, ProductsActionTypes &#125; <span class="keyword">from</span> <span class="string">"./ProductsTypes"</span>;</span><br></pre></td></tr></table></figure><p>这里导入了<code>Reducer</code>依赖，以及前面定义的action和state。</p><ol start="2"><li>定义初始state：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialProductState: IProductsState = &#123;</span><br><span class="line">  products: [],</span><br><span class="line">  productsLoading: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始状态下，商品信息为空数组，处于非加载状态。</p><ol start="3"><li>接下来创建reducer函数：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> productsReducer: Reducer&lt;IProductsState, ProductsActions&gt; = (</span><br><span class="line">  state = initialProductState,</span><br><span class="line">  action</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line"><span class="comment">// TODO - change the state</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>该函数返回<code>Reducer</code>，包含有state和action。</li><li>函数接收的参数由Redux提供。</li><li>状态默认为初始化时的状态。</li><li>对于不能识别的switch语句，返回默认的state。</li></ul><ol start="4"><li>实现我们商品的reducer：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> ProductsActionTypes.LOADING: &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...state,</span><br><span class="line">productsLoading: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> ProductsActionTypes.GETALL: &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...state,</span><br><span class="line">products: action.products,</span><br><span class="line">productsLoading: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们为每个action实现了对应的reducer，合并旧的state，并返回一个新的state。</p><p>这样，我们的第一个reducer完成了。接下来创建我们的store。</p><h3><span id="creating-a-store">Creating a store</span></h3><p>本小节，将创建一个store，用于存放我们的state并管理这些action和reducer：</p><ol><li>新建文件<code>Store.tsx</code>文件，导入相应的需要的组件。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; applyMiddleware, combineReducers, createStore, Store &#125; from &quot;redux&quot;;</span><br></pre></td></tr></table></figure><ul><li><code>createStore</code> 创建store的函数</li><li>我们需要<code>applyMiddleware</code>函数，因为我们使用了redux thunk中间件来管理异步action。</li><li><code>combineReducers</code>函数用于合并reducer</li><li><code>Store</code>是一个TypeScript版的store对象</li></ul><ol start="2"><li>导入<code>redux-thunk</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import thunk from &quot;redux-thunk&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后，导入reducer和state，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; productsReducer &#125; from &quot;./ProductsReducer&quot;;</span><br><span class="line">import &#123; IProductsState &#125; from &quot;./ProductsTypes&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>store的关键部分是state。因此，定义一个接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export interface IApplicationState &#123;</span><br><span class="line">  products: IProductsState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口仅仅包含了商品的state。</p><ol start="5"><li>将reducer添加到Redux的<code>combineReducer</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const rootReducer = combineReducers&lt;IApplicationState&gt;(&#123;</span><br><span class="line">  products: productsReducer</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>定义好state和reducer后，我们可以创建我们的store了。实际上我们是创建一个函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default function configureStore(): Store&lt;IApplicationState&gt; &#123;</span><br><span class="line">  const store = createStore(rootReducer, undefined, applyMiddleware(thunk));</span><br><span class="line">  return store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数<code>configureStore</code>返回泛型<code>Store</code></li><li>Redux中的函数<code>createStore</code>，我们传入定义的reducer以及Redux Thunk中间件，传递<code>undefined</code>作为初始化状态。</li></ul><p>接下来，如何连接到我们创建的store？</p><h2><span id="connecting-our-react-app-to-the-store">Connecting our React app to the store</span></h2><p>在本小节，我们将<code>Products</code>页面连接到store。第一件要做的工作室添加React Redux的<code>Provider</code>组件。</p><h3><span id="adding-the-store-provider-component">Adding the store Provider component</span></h3><p><code>Provider</code>组件可以在它任意下层的组件传递store。因此，本小节，需要将<code>Provider</code>添加到组件的最高层级，这样其它组件都可以访问。</p><ol><li>打开原先的<code>index.tsx</code>，导入<code>Provider</code>。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Provider &#125; from &quot;react-redux&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>另外把<code>Store</code>也导入进来。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Store &#125; from &quot;redux&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>其它用到的store和state也导入进来。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import configureStore from &quot;./Store&quot;;</span><br><span class="line">import &#123; IApplicationState &#125; from &quot;./Store&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建一些功能组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  store: Store&lt;IApplicationState&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Root: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  return();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>Root</code>组件将会成为我们新的root element。它将store作为一个prop。</p><ol start="5"><li>这样一来，我们需要导入旧的根元素，<code>Routes</code>，放置在新的root组件中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const Root: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Routes /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另外还要把<code>Provider</code>组件加进来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;Provider store=&#123;props.store&#125;&gt;</span><br><span class="line">    &lt;Routes /&gt;</span><br><span class="line">  &lt;/Provider&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>现在已经将<code>Provider</code>组件的最上层，以及将store传递进去。</p><ol start="7"><li>另外还要更改根部渲染函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const store = configureStore();</span><br><span class="line">ReactDOM.render(&lt;Root store=&#123;store&#125; /&gt;, document.getElementById(&quot;root&quot;) as HTMLElement);</span><br></pre></td></tr></table></figure><p>首先通过<code>configureStore</code>函数创建了全局的store，并将它传递给<code>Root</code>组件。</p><p>这样一来，所有组件都已经连接到了这个store。接下来，需要需要在其它子层组件中对其进行连接。</p><h3><span id="connecting-components-to-the-store">Connecting components to the store</span></h3><h4><span id="connecting-productspage-to-the-store">Connecting ProductsPage to the store</span></h4><p>首先连接的组件是<code>ProductsPage</code>,</p><p>下面开始对其进行重构，</p><ol><li>导入<code>connect</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &quot;react-redux&quot;;</span><br></pre></td></tr></table></figure><p>我们将使用<code>connect</code>将<code>ProductsPage</code>连接到store。</p><ol start="2"><li>导入store的state，以及<code>getProducts</code>action creator。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; IApplicationState &#125; from &quot;./Store&quot;;</span><br><span class="line">import &#123; getProducts &#125; from &quot;./ProductsActions&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>组件<code>ProductPage</code>不再包含任何state，因为将由Redux store装载。因此，需要将组件原有的state接口、静态方法<code>getDerivedStateFromProps</code>、以及构造器进行整改。<code>ProductsPage</code>原来的外形是：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class ProductsPage extends React.Component&lt;RouteComponentProps&gt; &#123;</span><br><span class="line">  public async componentDidMount() &#123; ... &#125;</span><br><span class="line">  public render() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>组件的数据将通过props从store获得。一次，重构props接口：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IProps extends RouteComponentProps &#123;</span><br><span class="line">  getProducts: typeof getProducts;</span><br><span class="line">  loading: boolean;</span><br><span class="line">  products: IProduct[];</span><br><span class="line">&#125;</span><br><span class="line">class ProductsPage extends React.Component&lt;IProps&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure><p>因此，我们会将下面信息经由store传递给该组件：</p><ul><li><p><code>getProducts</code> action creator</p></li><li><p><code>loading</code>标志，表示当前是否在获取商品信息</p></li><li><p>商品列表数组</p></li></ul><ol start="5"><li>接下来调整组件的生命周期方法<code>componentDidMount</code>，通过调用<code>getProducts</code> 这个action creator来获取商品信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">  this.props.getProducts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>现在不再直接从<code>ProductsData.ts</code>中获取<code>products</code>商品列表了。将导入语句移除掉：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; IProduct &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><ol start="7"><li>还有一个未使用的<code>search</code>state也不需要了。如下，我们原来仅仅是将它放置在<code>render</code>方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const searchParams = new URLSearchParams(this.props.location.search);</span><br><span class="line">  const search = searchParams.get(&quot;search&quot;) || &quot;&quot;;</span><br><span class="line">  return ( ... );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>现在需要替换掉原来对<code>state</code>的引用：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">  &#123;this.props.products.map(product =&gt; &#123;</span><br><span class="line">    if (!search || (search &amp;&amp; product.name.toLowerCase().indexOf(search.toLowerCase()) &gt; -1)) &#123; ... &#125;</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><ol start="9"><li>在export语句之前，class语句之后，创建一个函数来映射store和组件props的state：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (store: IApplicationState) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    loading: store.products.productsLoading,</span><br><span class="line">    products: store.products.products</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，我们可以得知商品是否在loading，以及从store存储的商品信息传递到我们的props中。</p><ol start="10"><li>由前面得知，还有一个prop属性需要进行映射，即<code>getProducts</code>。因此创建另外一个函数来关联这种关系：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mapDispatchToProps = (dispath: any) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    getProducts: () =&gt; dispatch(getProducts())</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="11"><li>剩下最后一件事，需要在该文件最后。包装React Redux的<code>connect</code> HOC（钩子）到<code>ProductsPage</code>中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default connect (</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(ProductsPage);</span><br></pre></td></tr></table></figure><p><code>connect</code>钩子将组件和Redux存储连接起来，由最高层的<code>Provider</code>提供。<code>connect</code>钩子会调用映射函数进行两者的state状态传递。</p><ol start="12"><li>最后验证我们的结果：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>我们会发现页面的行为并没有跟原来的有差异。唯一不同的是state现在由Redux store进行管理。</p><p>接下来的小节，我们将商品页面添加加载进度条。</p><h3><span id="connecting-productspage-to-the-loading-store-state">Connecting ProductsPage to the loading store state</span></h3><p>本小节将添加一个加载进度条。在此之前，需要将商品信息进行萃取。然后添加<code>withLoader</code>HOC到组件中：</p><ol><li>首先为抽取的组件创建一个新文件<code>ProductsList.tsx</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import &#123;Link&#125; from &apos;react-router-dom&apos;;</span><br><span class="line">import &#123;IProduct&#125; from &apos;./ProductsData&apos;;</span><br><span class="line">import withLoader from &apos;./withLoader&apos;;</span><br></pre></td></tr></table></figure><ol start="2"><li>该组件props作为商品数组信息和查询字符串的入参：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  products?: IProduct[];</span><br><span class="line">  search: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们将调用<code>ProductList</code>组件作为一个SFC。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const ProductsList: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  const search = props.search;</span><br><span class="line">  return ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>现在将来自组件<code>ProductsPage</code>组件的 <code>ul</code>标签语句迁移到<code>ProductList</code>组件的return语句中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">    &#123;props.products &amp;&amp;</span><br><span class="line">      props.products.map(product =&gt; &#123;</span><br><span class="line">        if (!search || (search &amp;&amp; product.name.toLowerCase().indexOf(search.toLowerCase()) &gt; -1)) &#123;</span><br><span class="line">          return (</span><br><span class="line">            &lt;li key=&#123;product.id&#125; className=&quot;product-list-item&quot;&gt;</span><br><span class="line">              &lt;Link to=&#123;`/products/$&#123;product.id&#125;`&#125;&gt;&#123;product.name&#125;&lt;/Link&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          return null;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>要注意的是，我们移除了原来this`的引用。</p><ol start="5"><li>另外，还需要将组件暴露给钩子<code>withLoader</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default withLoader(ProductsList);</span><br></pre></td></tr></table></figure><ol start="6"><li>修改原来<code>ProductsPage.tsx</code>组件的返回语句，用新提取的组件替代：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">    &lt;p&gt;Welcome to React Shop where you can get all your tools for ReactJS!&lt;/p&gt;</span><br><span class="line">    &lt;ProductsList search=&#123;search&#125; products=&#123;this.props.products&#125; loading=&#123;this.props.loading&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="7"><li>以及在组件中引入引用：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ProductsList from &quot;./ProductsList&quot;;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>最后，移除在<code>ProductsPage.tsx</code>组件中的<code>Link</code>引用。</p><p>运行应用，进入<code>Products</code>页面，可以看到一个加载spinner：</p><p>现在，我们的<code>Products</code>页面已经接入到Redux store。下个小节会将`Product也接入到store中。</p></li></ol><h3><span id="adding-product-stte-and-actions-to-the-store">Adding product stte and actions to the store</span></h3><p>要将<code>ProductPage</code>组件连接到Redux存储中，需要创建额外的state，表示商品是否被添加到购物车。另外，需要额外的action和reducer，来表述获取商品、添加到购物篮的行为。</p><ol><li>首先，在<code>ProductsTypes.ts</code>添加相应的state，表述“当前”商品：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export interface IProductsState &#123;</span><br><span class="line">  readonly currentProduct: IProduct || null;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>为获取商品的行为添加相应action：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> ProductsActionTypes &#123;</span><br><span class="line">  GETALL = <span class="string">"PRODUCTS/GETALL"</span>,</span><br><span class="line">  GETSINGLE = <span class="string">"PRODUCTS/GETSINGLE"</span>,</span><br><span class="line">  LOADING = <span class="string">"PRODUCTS/LOADING"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>为获取商品的行为添加action type：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IProductsGetSingleAction &#123;</span><br><span class="line">  <span class="keyword">type</span>: ProductsActionTypes.GETSINGLE;</span><br><span class="line">  product: IProduct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加到联合类型(union actions type)：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> ProductsActions = IProductsGetAllAction | IProductsGetSingleAction | IProductsLoadingAction;</span><br></pre></td></tr></table></figure><ol start="5"><li>接着创建新的action creator。首先，导入假的api，用于表示获取商品：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getProduct <span class="keyword">as</span> getProductFromAPI, getProducts <span class="keyword">as</span> getProductsFromAPI &#125; <span class="keyword">from</span> <span class="string">"./ProductsData"</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li>接着为action creator导入需要用到的类型：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; IProductsGetAllAction, IPrudctsGetSingleAction, IProductsLoadingAction, IProductsState, ProductsActionType &#125; from &quot;./productsTypes&quot;;</span><br></pre></td></tr></table></figure><ol start="7"><li>实现action creator：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export const getProduct: ActionCreator&lt;ThunkAction&lt;Promise&lt;any&gt;, IProductsState, null, IProductsGetSingleAction&gt;&gt; = (</span><br><span class="line">  id: number,</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  return async (dispatch: Dispatch) =&gt; &#123;</span><br><span class="line">    dispatch(loading());</span><br><span class="line">    const product = await getProductFromAPI(id);</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      product,</span><br><span class="line">      type: ProductsActionTypes.GETSINGLE,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个和<code>getProducts</code>非常相似。不同的是这里的入参是商品id。</p><ol start="8"><li>在<code>ProductsReducer.ts</code>中，首先设置初始状态为null：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const initialProductState: IProductsState = &#123;</span><br><span class="line">  currentProduct: null,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>在<code>productReducer</code>函数中，添加相应新的分支语句：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch (action.type) &#123;</span><br><span class="line">    ...</span><br><span class="line">    case ProductsActionTypes.GETSINGLE: &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        currentProduct: action.product,</span><br><span class="line">        productsLoading: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="adding-basket-state-and-actions-to-the-store">Adding basket state and actions to the store</span></h3><p>这里需要为购物篮添加状态管理。</p><ol><li>首先，创建一个新文件<code>BasketTypes.ts</code>，内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import &#123;IProduct&#125; from &apos;./ProductsData&apos;;</span><br><span class="line"></span><br><span class="line">export enum BasketActionTypes &#123;</span><br><span class="line">  ADD = &apos;BASKET/ADD&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export interface IBasketState &#123;</span><br><span class="line">  readonly products: IProduct[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export interface IBasketAdd &#123;</span><br><span class="line">  type: BasketActionTypes.ADD;</span><br><span class="line">  product: IProduct;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export type BasketActions = IBasketAdd;</span><br></pre></td></tr></table></figure><ul><li>这里仅一个state，代表购物篮中的商品数组信息。</li><li>这里仅一个action，表示向购物篮添加商品。</li></ul><ol start="2"><li>新建一个文件<code>BasketActions.ts</code>，包含下面内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;BasketActionTypes, IBasketAdd&#125; from &apos;./BasketTypes&apos;;</span><br><span class="line">import &#123;IProduct&#125; from &apos;./ProductsData&apos;;</span><br><span class="line"></span><br><span class="line">export const addToBasket = (product: IProduct): IBasketAdd =&gt; (&#123;</span><br><span class="line">  product,</span><br><span class="line">  type: BasketActionTypes.ADD,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是商品添加到购物篮的action creator。该函数接收一个商品入参，返回相应的action。</p><ol start="3"><li>在reducer中，创建文件<code>BasketReducer.ts</code>，内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Reducer&#125; from &apos;redux&apos;;</span><br><span class="line">import &#123;BasketActions, BasketActionTypes, IBasketState&#125; from &apos;./BasketTypes&apos;;</span><br><span class="line"></span><br><span class="line">const initialBasketState: IBasketState = &#123;</span><br><span class="line">  products: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const basketReducer: Reducer&lt;IBasketState, BasketActions&gt; = (state = initialBasketState, action) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case BasketActionTypes.ADD: &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        products: state.products.concat(action.product),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return state || initialBasketState;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里有趣的地方是，如何优雅地向<code>products</code>数组添加<code>product</code>，而不改变原来的数组变量信息。我们使用了JavaScript的<code>concat</code>函数，它会创建一个新的arrary，并将原来的数组以参数形式合并。</p><ol start="6"><li>现在编译<code>Store.ts</code>，导入新的reducer和state：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; basketReducer &#125; <span class="keyword">from</span> <span class="string">"./BasketReducer"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IBasketState &#125; <span class="keyword">from</span> <span class="string">"./BasketTypes"</span>;</span><br></pre></td></tr></table></figure><ol start="7"><li>将购物篮的state添加到store中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export interface IApplicationState &#123;</span><br><span class="line">  basket: IBasketState;</span><br><span class="line">  products: IProductsState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>现在有两个reducer。因此，添加购物篮reducer到<code>combineReducers</code>的函数调用中：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rootReducer = combineReducers&lt;IApplicationState&gt;(&#123;</span><br><span class="line">  basket: basketReducer,</span><br><span class="line">  products: productsReducer</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在可以从Store连接到<code>ProductPage</code>组件了。</p><h3><span id="connecting-productpage-to-the-store">Connecting ProductPage to the store</span></h3><ol><li>首先在<code>ProductPage.tsx</code>导入相应的组件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123;addToBasket&#125; from &apos;./BasketActions&apos;;</span><br><span class="line">import &#123;getProduct&#125; from &apos;./ProductsActions&apos;;</span><br><span class="line">import &#123;IApplicationState&#125; from &apos;./Store&apos;;</span><br></pre></td></tr></table></figure><ol start="2"><li>因为是通过<code>getProduct</code>从获取商品信息，<code>ProductsData.ts</code>不再需要用到。移除该导入：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; IProduct &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>接着，将state挪到props属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IProps extends RouteComponentProps&lt;&#123;id: string&#125;&gt; &#123;</span><br><span class="line">  addToBasket: typeof addToBasket;</span><br><span class="line">  getProduct: typeof getProduct;</span><br><span class="line">  loading: boolean;</span><br><span class="line">  product?: IProduct;</span><br><span class="line">  added: boolean;</span><br><span class="line">&#125;</span><br><span class="line">class ProductPage extends React.Component&lt;IProps&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>我们可以移除掉构造函数，因为它不再需要初始化任何状态。</li><li>以及，需要在<code>componentDidMount</code>生命周期函数中调用相应的action creator获取商品信息：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">  if (this.props.match.params.id) &#123;</span><br><span class="line">    const id: number = parseInt(this.props.match.params.id, 10);</span><br><span class="line">    this.props.getProduct(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意我们也移除了<code>async</code>关键字，因为该方法不再是异步的。</p><ol start="6"><li>移步到<code>render</code>函数，修改为：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const product = this.props.product;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">      &lt;Prompt when=&#123;!this.props.added&#125; message=&#123;this.navAwayMessage&#125; /&gt;</span><br><span class="line">      &#123;product || this.props.loading ? (</span><br><span class="line">        &lt;Product</span><br><span class="line">          loading=&#123;this.props.loading&#125;</span><br><span class="line">          product=&#123;product&#125;</span><br><span class="line">          inBasket=&#123;this.props.added&#125;</span><br><span class="line">          onAddToBasket=&#123;this.handleAddClick&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;p&gt;Product not found!&lt;/p&gt;</span><br><span class="line">      )&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>在点击句柄中，对其重构为通过调用action creator来表示添加商品。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private handleAddClick = () =&gt; &#123;</span><br><span class="line">  if (this.props.product) &#123;</span><br><span class="line">    this.props.addToBasket(this.props.product);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="8"><li>最后一步。需要实现对应的<code>mapDispatchToProps</code>，映射关联store和组件的props。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const mapDispatchToProps = (dispath: any) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    addToBasket: (product: IProduct) =&gt; dispatch(addToBasket(product)),</span><br><span class="line">    getProduct: (id: number) =&gt; dispatch(getProduct(id))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>以及添加state的映射。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (store: IApplicationState) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    basketProducts: store.basket.products,</span><br><span class="line">    loading: store.products.productsLoading,</span><br><span class="line">    product: store.proucts.currentProduct || undefined</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，我们将null的<code>currentProduct</code>映射为<code>undefined</code>。</p><ol start="10"><li>剩余的需要映射的属性是<code>added</code>。我们需要检测当前商品对应的store中，是否为“已添加至购物篮”，这里用到<code>some</code>函数对数组进行处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (store: IApplicationState) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    added: store.basket.products.some(p =&gt; store.products.currentProduct ? p.id === store.products.currentProduct.id : false),</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>剩余步骤是，使用<code>connect</code>钩子连接<code>ProductPage</code>组件到store中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default connect (</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(ProductPage);</span><br></pre></td></tr></table></figure><p>现在回到页面App，尝试点击按钮，添加商品到购物篮看看效果，已添加的商品，再次进入商品的页面时，添加按钮会消失。</p><h3><span id="creating-and-connecting-basketsummary-to-the-store">Creating and connecting BasketSummary to the store</span></h3><p>在该小节，我们将创建新的组件<code>BasketSummary</code>。它会显示购物篮中商品的个数，并显示在右上角。</p><ol><li>首先创建一个新的文件<code>BasketSummary.tsx</code>，内容如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  count: number;</span><br><span class="line">&#125;</span><br><span class="line">const BasketSummary: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  return &lt;div className=&quot;basket-summary&quot;&gt;&#123;props.count&#125;&lt;/div&gt;</span><br><span class="line">&#125;;</span><br><span class="line">export default BasketSummary;</span><br></pre></td></tr></table></figure><p>这是一个简单组件，props入参为商品个数，并显示值。</p><ol start="2"><li>在<code>index.class</code>添加对应的CSS类，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.basket-summary</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: white solid <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们需要将该组件添加到header component中。因此，在<code>Header.tsx</code>添加：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import BasketSummary from &quot;./BasketSummary&quot;;</span><br><span class="line">import &#123; connect &#125; from &quot;react-redux&quot;;</span><br><span class="line">import &#123; IApplicationState &#125; from &quot;./Store&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>在<code>IProps</code>添加一个number属性：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface IProps extends RouteComponentProps &#123;</span><br><span class="line">  basketCount: number;</span><br><span class="line">&#125;</span><br><span class="line">class Header extends React.Component&lt;IProps, IState&gt; &#123;</span><br><span class="line">  public constructor(props: IProps) &#123; ... &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>添加<code>BasketSummary</code>组件到<code>Header</code>组件中：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;header className=&quot;header&quot;&gt;</span><br><span class="line">  &lt;div className=&quot;search-container&quot;&gt;</span><br><span class="line">    &lt;input ... /&gt;</span><br><span class="line">    &lt;BasketSummary count=&#123;this.props.basketCount&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/header&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>最后一步就是添加映射：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (store: IApplicationState) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    basketCount: store.basket.products.length</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="7"><li>以及通过钩子暴露连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default connect(mapStateToProps)(withRouter(Header));</span><br></pre></td></tr></table></figure><p>现在<code>Header</code>组件消费<code>BasketSummary</code>组件信息，并连接到store中。尝试在页面中添加商品信息，可以看到数字增加了。</p><h2><span id="managing-state-with-usereducer">Managing state with useReducer</span></h2><p>Redux对于状态管理带来很大的帮助。但如果仅仅为了管理存在的单一组件的状态，则显得有点笨重。显然，我们，单一的组件直接使用<code>setState(for class compoents)</code>或<code>useState(for function compoents)</code>就可以了。然而，对于复杂的组件状态会怎样？有一大堆的state信息，并且这些state的交互可能涉及很多操作，某些甚至可能是异步的。</p><p>在本小节，我们将探索使用<code>useReduder</code>函数来管理这些状态的方法。我们的例子将尽量人性化和简单，以理解这种管理方法。</p><p>我们希望添加一个_<code>Like</code>_ 按钮到*<code>Product</code>* 页面。用户可以多次点击这个like按钮。<code>Product</code>组件会跟踪点击这个按钮的次数、最后一次like的时间，并显示。</p><ol><li>首先打开<code>Product.tsx</code>，创建一个接口，它包含了“like”的次数、最后“like”的时间：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface ILikeState &#123;</span><br><span class="line">  likes: number;</span><br><span class="line">  lastLike: Date | null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个变量表述初始状态：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const initialLikeState: ILikeState = &#123;</span><br><span class="line">  likes: 0,</span><br><span class="line">  lastLike: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建action类型：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum LikeActionTypes &#123;</span><br><span class="line">  LIKE = &quot;LIKE&quot;</span><br><span class="line">&#125;</span><br><span class="line">interface ILikeAction &#123;</span><br><span class="line">  type: LikeActionTypes.LIKE;</span><br><span class="line">  now: Date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建一个联合类型包含所有这些action。在我们的例子中，虽然仅只有一个action type，先理解这种方式带来的扩展性的好处：</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LikeAction = ILikeAction;</span><br></pre></td></tr></table></figure><ol start="5"><li>在组件<code>Product</code>内部，让我们调用<code>useReducer</code>函数获取state和<code>dispatch</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [state, dispatch]: [ILikeState, (action: ILikeAction) =&gt; void] = React.useReducer(reducer, initialLikeState);</span><br></pre></td></tr></table></figure><p>让我们分解下：</p><ul><li>我们向<code>useReducer</code>传入一个函数<code>reducer</code>函数参数。</li><li>另外也传入了<code>useReducer</code>初始状态。</li><li><code>useReducer</code>返回一个数组包含两个元素。第一个元素为当前state，另一个是<code>dispatch</code>用于调用一个action。</li></ul><ol start="6"><li>让我们重构该行，对state进行解构，这样我们就可以直接引用一系列state：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const [&#123; likes, lastLike &#125;, dispatch]: [</span><br><span class="line">  ILikeState,</span><br><span class="line">  (action: ILikeAction) =&gt; void</span><br><span class="line">] = React.useReducer(reducer, initialLikeState);</span><br></pre></td></tr></table></figure><ol start="7"><li>在<code>Product</code>组件的底部，添加相应的“like”信息和按钮：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;!props.inBasket &amp;&amp; &lt;button onClick=&#123;handleAddClick&#125;&gt;Add to basket&lt;/button&gt;&#125;</span><br><span class="line">&lt;div className=&quot;like-container&quot;&gt;</span><br><span class="line">  &#123;likes &gt; 0 &amp;&amp; &lt;div&gt;&#123;`I like this x $&#123;likes&#125;, last at $&#123;lastLike&#125;`&#125;&lt;/div&gt;&#125;</span><br><span class="line">  &lt;button onClick=&#123;handleLikeClick&#125;&gt;&#123;likes &gt; 0 ? &apos;Like again&apos; : &apos;Like&apos;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="8"><li>添加CSS样式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.like-container &#123;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.like-container button &#123;</span><br><span class="line">  margin-top: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>为<code>Like</code>按钮实现点击事件处理：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const handleLikeClick = () =&gt; &#123;</span><br><span class="line">  dispatch(&#123; type: LikeActionTypes.LIKE, now: new Date() &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>最后一步，在<code>Product</code>组件外部实现reducer函数，即在<code>LikeActions</code>类型下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const reducer = (state: ILikeState = initialLikeState, action: LikeAction) =&gt; &#123;</span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case LikeAtionTypes.LIKE:</span><br><span class="line">      return &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        likes: state.likes + 1,</span><br><span class="line">        lastLike: action.now </span><br><span class="line">      &#125;;</span><br><span class="line">      return state;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现方式和实现action、reducer相似，不同的是所有操作都在一个组件内实现。</p><h2><span id="summary">Summary</span></h2><p>下面是几个关键点：</p><ul><li>枚举类型的action type，在引用时能给我们更好的提示。</li><li>使用接口来定义action带来更好的类型安全等级，这样允许我们创建联合类型(union type)，提供给reducer使用。</li><li>使用readonly定义的state属性，帮助我们避免对state的直接更改。</li><li>synchronous action creator返回action 对象。</li><li>Asynchronous action creator返回一个function，该function最终返回action对象。</li><li>reducer包含一系列的action type逻辑。</li><li>Redux提供的<code>createStore</code>创建实际的store。</li></ul><p>要将组件衔接到store中，下面是几个关键点：</p><ul><li><code>Provider</code>组件需要放置在所有消费组件的顶部。它拥有一个prop定义了store。</li><li><code>connect</code>钩子可以将独立的组件衔接到store中。它接收两个参数，用于将state和action creator映射到组件的props中。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Principles and key concepts&lt;/li&gt;
&lt;li&gt;Installing Redux&lt;/li&gt;
&lt;li&gt;Creating reducers&lt;/li&gt;
&lt;li&gt;Creating actions&lt;/li&gt;
&lt;li&gt;Creating a stor
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第七章 表单</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_7_Working_with_Forms/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_7_Working_with_Forms/</id>
    <published>2019-11-27T07:50:07.000Z</published>
    <updated>2019-11-05T03:57:08.008Z</updated>
    
    <content type="html"><![CDATA[<ul><li>creating a form with controlled components</li><li>Reducing boilerplate code with generic components</li><li>Validating forms</li><li>Form submission</li></ul><h2><span id="creating-a-form-with-controlled-components">Creating a form with controlled components</span></h2><p>表单是大部分应用的常见内容。在React中，创建表单的标准方式是使用被称为 <em>controlled component</em> 的组件。</p><h3><span id="adding-a-contact-us-page">Adding a Contact Us page</span></h3><p>在src目录添加一个新的文件<code>ContactUsPage.tsx</code>，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class ContactUsPage extends React.Component &#123;</span><br><span class="line">public render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">&lt;h1&gt;Contact Us&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">If you enter your details we&apos;ll get back to you as soon as we can.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ContactUsPage;</span><br></pre></td></tr></table></figure><p>该组件需要包含状态，目前首先创建了header相关信息。接下来，导入该组件到页面中，打开<code>Routes.tsx</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ContactUsPage from &quot;./ContactUsPage&quot;;</span><br></pre></td></tr></table></figure><p>在<code>Routes</code>组件的<code>render</code>方法中，添加新的路由，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">&lt;Redirect exact=&#123;true&#125; from=&quot;/&quot; to=&quot;/products&quot; /&gt;</span><br><span class="line">&lt;Route path=&quot;/products/:id&quot; component=&quot;&#123;ProductPage&#125; /&gt;</span><br><span class="line">&lt;Route exact=&#123;true&#125; path=&quot;/products&quot; compoent=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;contactus&quot; component=&#123;ContactUsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">&lt;Route path=&quot;/login&quot; compoent=&#123;LoginPage&#125; /&gt;</span><br><span class="line">&lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><p>打开<code>Header.tsx</code>，添加新的导航信息，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">&lt;NavLink to=&quot;/products&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;</span><br><span class="line">  Products</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink to=&quot;/contactus&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;</span><br><span class="line">  Contact Us</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink to=&quot;/admin&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;</span><br><span class="line">  Admin</span><br><span class="line">&lt;/NavLink&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><p>现在，页面已经创建了，下面创建表单输入框。</p><h2><span id="creating-controlled-inputs">Creating controlled inputs</span></h2><p>在src目录下创建一个新文件<code>ContactUs.tsx</code>，包含下面内容，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const ContactUs: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ContactUs;</span><br></pre></td></tr></table></figure><p>这是一个功能组件，渲染一个表单包含label和用户名的输入框。</p><p>现在需要添加对应的css样式，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> auto <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-start;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: lightgray solid <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在在我们页面<code>ContactUsPage.tsx</code>添加并渲染表单，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ContactUs from &quot;./ContactUs&quot;;</span><br></pre></td></tr></table></figure><p>在<code>render</code>方法中添加，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Contact Us&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;If you enter your details we&apos;ll get back to you as soon as we can.&lt;/p&gt;</span><br><span class="line">  &lt;ContactUs /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>表单已经创建好了，但需要创建一个状态类型到<code>ContactUsPage</code>页面中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  email: string;</span><br><span class="line">  reason: string;</span><br><span class="line">  notes: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ContactUsPage extends React.Component&lt;&#123;&#125;, IState&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>在构造器中初始化状态，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public constructor(props: &#123;&#125;) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    email: &quot;&quot;,</span><br><span class="line">name: &quot;&quot;,</span><br><span class="line">notes: &quot;&quot;,</span><br><span class="line">reason: &quot;&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要将<code>ContactUsPage</code>中的状态传递到<code>ContactUs</code>组件中。在<code>ContactUs</code>组件中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  email: string;</span><br><span class="line">  reason: string;</span><br><span class="line">  notes: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>将表单名name绑定到<code>name</code>属性中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; id=&quot;name&quot; value=&#123;props.name&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>将表单状态传递给<code>ContactUsPage</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContactUs</span><br><span class="line">  name=&#123;this.state.name&#125;</span><br><span class="line">  emial=&#123;this.state.email&#125;</span><br><span class="line">  reason=&#123;this.state.reason&#125;</span><br><span class="line">  notes=&#123;this.state.notes&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>添加事件监听，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; id=&quot;name&quot; value=&#123;props.name&#125; onChange=&#123;handleNameChange&#125; /&gt;</span><br></pre></td></tr></table></figure><p>创建对应的handler，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  const handleNameChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">    props.onNameChange(e.currentTarget.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  return ( ... );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是使用到了<code>React.ChangeEvent</code>。我们需要添加<code>onNameChange</code>函数到IProps中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  onNameChange: (name: string) =&gt; void;</span><br><span class="line">  email: string;</span><br><span class="line">  onEmailChange: (email: string) =&gt;void;</span><br><span class="line">  reason: string;</span><br><span class="line">  onReasonChange: (reason: string) =&gt; void;</span><br><span class="line">  notes: string;</span><br><span class="line">  onNotesChange: (notes: string) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在需要将来自<code>ContactUsPage</code>的Props传递到<code>ContactUs</code>中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContactUs</span><br><span class="line">  name=&#123;this.state.name&#125;</span><br><span class="line">  onNameChange=&#123;this.handleNameChange&#125;</span><br><span class="line">  email=&#123;this.state.email&#125;</span><br><span class="line">  onEmailChange=&#123;this.handleEmailChange&#125;</span><br><span class="line">  reason=&#123;this.state.reason&#125;</span><br><span class="line">  onReasonChange=&#123;this.handleReasonChange&#125;</span><br><span class="line">  notes=&#123;this.state.notes&#125;</span><br><span class="line">  onNotesChange=&#123;this.handleNotesChange&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来创建对应的handlers方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private handleNameChange = (name: string =&gt; &#123;</span><br><span class="line">  this.setState(&#123; name &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">private handleEmailChange = (email: string) =&gt; &#123;</span><br><span class="line">  this.setState(&#123; email &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">private handleReasonChange = (reason: string) =&gt; &#123;</span><br><span class="line">  this.setState(&#123; reason &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">private handleNotesChange = (notes: string) =&gt; &#123;</span><br><span class="line">  this.setState(&#123; notes &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来在<code>ContactUs</code>中补充其它表单内容，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;name&quot;&gt;Your name&lt;/label&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      type=&quot;text&quot;</span><br><span class="line">      id=&quot;name&quot;</span><br><span class="line">      value=&#123;props.name&#125;</span><br><span class="line">      onChange=&#123;handleNameChange&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;email&quot;&gt;Your email address&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;email&quot; value=&#123;props.email&#125; onChange=&#123;handleEmailChange&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;reason&quot;&gt;Reason you need to contact us&lt;/label&gt;</span><br><span class="line">    &lt;select id=&quot;reason&quot; value=&#123;props.reason&#125; onChange=&#123;handleReasonChange&#125;&gt;</span><br><span class="line">      &lt;option value=&quot;Marketing&quot;&gt;Marketing&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Support&quot; selected=&#123;true&#125;&gt;Support&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Feedback&quot;&gt;Feedback&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Jobs&quot;&gt;Jobs&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;Other&quot;&gt;Other&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">    &lt;label htmlFor=&quot;notes&quot;&gt;Additional notes&lt;/label&gt;</span><br><span class="line">    &lt;textarea id=&quot;notes&quot; value=&#123;props.notes&#125; onChange=&#123;handleNotesChange&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>现在创建这些handler的函数属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const handleEmailChange = (e: React.ChangeEvent&lt;HTMLInputElement&gt;)</span><br><span class="line">=&gt; &#123;</span><br><span class="line">props.onEmailChange(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br><span class="line">const handleReasonChange = (e:</span><br><span class="line">React.ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; &#123;</span><br><span class="line">props.onReasonChange(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br><span class="line">const handleNotesChange = (e:</span><br><span class="line">React.ChangeEvent&lt;HTMLTextAreaElement&gt;) =&gt; &#123;</span><br><span class="line">props.onNotesChange(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2><span id="reducing-boilerplate-code-with-generic-components">Reducing boilerplate code with generic components</span></h2><p>通用表单组件将有利于减少表单代码的重复实现。我们重构上面的<code>ContactUs</code>组件来实现generic form components。</p><p>假设我们希望，理想情况下消费组件<code>ContactUs</code>内容的generic component组件的形式如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form</span><br><span class="line">defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;Form.Field name=&quot;name&quot; label=&quot;Your name&quot; /&gt;</span><br><span class="line">&lt;Form.Field name=&quot;email&quot; label=&quot;Your email address&quot; type=&quot;Email&quot; /&gt;</span><br><span class="line">&lt;Form.Field name=&quot;reason&quot; label=&quot;Reason you need to contact us&quot;</span><br><span class="line">type=&quot;Select&quot; options=&#123;[&quot;Marketing&quot;, &quot;Support&quot;, &quot;Feedback&quot;, &quot;Jobs&quot;,</span><br><span class="line">&quot;Other&quot;]&#125; /&gt;</span><br><span class="line">&lt;Form.Field name=&quot;notes&quot; label=&quot;Additional notes&quot; type=&quot;TextArea&quot; /&gt;</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>在这个示例中，有两个通用合成组件：<code>Form</code>和<code>Field</code>。它们有某些特点，</p><ul><li><code>Form</code>组件是用于合成、管理状态和交互的。</li><li><code>Fomr</code>组件使用<code>defaultValues</code>属性来传递默认值。</li><li><code>Field</code>组件渲染label和每个字段的一个编辑器。</li><li>每个字段包含一个<code>name</code>属性，并被存储在对应的state属性名内。</li><li>每个字段有一个<code>label</code>属性用于展示每个字段的标签。</li><li>特殊字段用<code>type</code>属性标识。默认的属性为文本类型<code>input</code>。</li><li>如果编辑器类型是<code>Select</code>，我们可以通过<code>options</code>属性指定。</li></ul><p>新版本的<code>ContactUs</code>组件相比原来的更简短、更易用。状态的管理和事件的处理被隐藏和封装在<code>Form</code>组件内。</p><h3><span id="creating-a-basic-form-component">Creating a basic form component</span></h3><p>下面开始构建我们的通用<code>Form</code>组件；</p><ol><li>在<code>src</code>文件夹下创建一个新的文件<code>Form.tsx</code>，包含下面内容：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;&#125;</span><br><span class="line"></span><br><span class="line">interface IState &#123;&#125;</span><br><span class="line"></span><br><span class="line">export class Form extends React.Component&lt;IFormProps, IState&gt; &#123;</span><br><span class="line">  constructor(props: IFormProps) &#123;&#125;</span><br><span class="line">  public render() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Form</code>是一个基类组件，因为它需要管理状态。我们将属性接口命名为<code>IFormProps</code>，因为之后我们将需要一个字段属性的接口。</p><ol start="2"><li>添加一个<code>defaultValues</code>属性到<code>IFormProps</code>接口中，它为每个字段提供默认值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export interface IValues &#123;</span><br><span class="line">  [key: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;</span><br><span class="line">  defaultValues: IValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用一个额外的接口<code>IValues</code>，它是一个索引的key/value类型<code>[key: string]: any</code>，key是字段名，value是字段值。</p><p>因此，<code>defaultValues</code>属性可以是，</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: "", email: "", reason: "Support", notes: "" &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于表单的state，需要存储这个接口类型，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>接下来需要在构造方法中初始化组件的状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: IFormProps) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.state =  &#123;</span><br><span class="line">    values: props.defaultValues</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>最后一步，实现<code>render</code>方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  return (</span><br><span class="line">  &lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">  &#123;this.props.children&#125;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>form</code>标签中渲染子组件，使用了<code>children</code>属性。</p><p>接下来，我们需要实现我们的<code>Field</code>组件。</p><h3><span id="adding-a-basic-field-component">Adding a basic Field component</span></h3><p><code>Field</code>组件需要渲染一个标签(label)和一个编辑框(editor)。</p><ol><li>首先在<code>Form.tsx</code>中创建一个接口属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IFieldProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  label: string;</span><br><span class="line">  type?: &quot;Text&quot; | &quot;Email&quot; | &quot;Select&quot; | &quot;TextArea&quot;;</span><br><span class="line">  options?: string[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>表示字段名</li><li><code>label</code>是展示标签</li><li><code>type</code>输入类型，可选</li><li><code>options</code>，仅作用于当<code>type</code>是<code>Select</code>时，可选</li></ul><ol start="2"><li>现在添加<code>Field</code>属性字段的骨架，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static Field: React.SFC&lt;IFieldProps&gt; = props =&gt; &#123;</span><br><span class="line">  return ();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>另外，首先添加<code>type</code>字段的默认属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Form.Field.defaultProps = &#123;</span><br><span class="line">  type: &quot;Text&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样，默认的<code>type</code>是一个文本类型，</p><ol start="4"><li>现在，渲染它的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static Field: React.SFC&lt;IFieldProps&gt; = props =&gt; &#123;</span><br><span class="line">  const &#123; name, label, type, options &#125; = props;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&#123;name&#125;&gt;&#123;label&#125;&lt;/label&gt;</span><br><span class="line">  &lt;input type=&#123;type.toLowerCase()&#125; id=&#123;name&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  ）；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这虽然是好的开头，但是，仅使用<code>Text</code>和<code>Email</code>类型。</p><ol start="5"><li>因此，需要添加合适的条件进行渲染，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;type === &quot;TextArea&quot; ... &#125;</span><br><span class="line"></span><br><span class="line">&#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">  &lt;select&gt;</span><br><span class="line">    &#123;options &amp;&amp;</span><br><span class="line">      options.map(option =&gt; (</span><br><span class="line">        &lt;option key=&#123;option&#125; value=&#123;option&#125;&gt;</span><br><span class="line">          &#123;option&#125;</span><br><span class="line">        &lt;/option&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">   &lt;/select&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><h3><span id="sharing-state-with-react-context">Sharing state with React context</span></h3><p><code>Form</code>组件内的字段值状态，需要在<code>Field</code>组件内共享，即可以通过<code>Field</code>组件访问和修改。</p><ol><li>首先在<code>Form.tsx</code>创建一个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>IFormContext</code>下使用<code>React.createContext</code>创建一个上下文创建(context component)，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const FormContext = React.createContext&lt;IFormContext&gt;(&#123;</span><br><span class="line">  values: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>Form</code>的<code>render</code>方法中，创建包含上下文的值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const context: IFormContext = &#123;</span><br><span class="line">    values: this.state.values</span><br><span class="line">  &#125;;</span><br><span class="line">  return ( ... )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>包装表单标签，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormContext.Provider value=&#123;context&#125;&gt;</span><br><span class="line">  &lt;form ... &gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/FormContext.Provider&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>Field</code>上下文进行消费，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormContext.Consumer&gt;</span><br><span class="line">  &#123;context =&gt; (</span><br><span class="line">    &lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/FormContext.Consumer&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>现在可以访问这些上下文了，下面补充剩余的输入框，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&#123;name&#125;&gt;&#123;label&#125;&lt;/label&gt;</span><br><span class="line">  &#123;(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</span><br><span class="line">     &lt;input type=&#123;type.toLowerCase() id=&#123;name&#125; value=&#123;context.values[name]&#125; /&gt;</span><br><span class="line">   )&#125;</span><br><span class="line">   </span><br><span class="line">   &#123;type === &quot;TextArea&quot; &amp;&amp; (</span><br><span class="line">     &lt;textarea id=&#123;name&#125; value=&#123;context.values[name]&#125; /&gt;</span><br><span class="line">   )&#125;</span><br><span class="line">   </span><br><span class="line">   &#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">     &lt;select value=&#123;context.values[name]&#125;&gt;</span><br><span class="line"> ...</span><br><span class="line"> &lt;/select&gt;</span><br><span class="line">   )&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>目前还没有添加事件用于更新上下文的状态，需要实现相应的事件处理机制。</p><ol start="7"><li>在<code>Form</code>类中创建一个<code>setValue</code>方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private setValue = (fieldName: string, value: any) =&gt; &#123;</span><br><span class="line">  const newValues = &#123; ...this.state.values, [fieldName]: value &#125;;</span><br><span class="line">  this.setState(&#123; values: newValues &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该方法包含有：</p><ul><li>该方法接收fieldName和value作为参数。</li><li>状态被更新为<code>newValues</code>，旧的值被更新，没有则添加。</li><li>新值被更新了。</li></ul><ol start="8"><li>接下来在<code>Field</code>组件中创建该方法的一个上下文属性，以实现访问，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  setValue?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>对应地，在<code>Form</code>组件也创建一个上下文属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const context: IFormContext = &#123;</span><br><span class="line">  setValue: this.setValue,</span><br><span class="line">  values: this.state.values</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="10"><li>现在可以在<code>Field</code>组件中访问该方法了。在<code>Field</code>中，即在解构(destucture)对象props后面，创建对应的事件Hnadler，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const &#123; name, label, type, options &#125; = props;</span><br><span class="line"></span><br><span class="line">const handleChange = (</span><br><span class="line">  e:</span><br><span class="line">    | React.ChangeEvent&lt;HTMLInputElement&gt;</span><br><span class="line">    | React.ChangeEvent&lt;HTMLTextAreaElement&gt;</span><br><span class="line">    | React.ChangeEvent&lt;HTMLSelectElement&gt;,</span><br><span class="line">  context: IFormContext</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  if (context.setValue) &#123;</span><br><span class="line">    context.setValue(props.name, e.currentTarget.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该方法有几个关键的地方：</p><ul><li>TypeScript的事件改变类型是<code>ChangeEvent&lt;T&gt;</code>，其中<code>T</code>是被处理的元素。</li><li>该方法的第一个参数<code>e</code>，对应事件类型，组合(union)了所有不同的输入框事件，方便对事件进行统一处理。</li><li>该方法的第二个参数是表单上线文。</li><li>方法体内加入了条件语句，以确保编译顺利。</li><li>调用<code>setValue</code>方法更新或添加新值。</li></ul><ol start="11"><li>现在可以为<code>input</code>输入框添加这个事件处理，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input </span><br><span class="line">  type=&#123;type.toLowerCase() &#125;</span><br><span class="line">  id=&#123;name&#125;</span><br><span class="line">  value=&#123;context.values[name] &#125;</span><br><span class="line">  onChange=&#123;e =&gt; handleChange(e, context) &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ol start="12"><li>对于<code>textarea</code>标签，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea</span><br><span class="line">  id=&#123;name&#125;</span><br><span class="line">  value=&#123;context.values[name]&#125;</span><br><span class="line">  onChange=&#123;e =&gt; handleChange(e, context) &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ol start="13"><li>对于<code>select</code>标签，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select</span><br><span class="line">  value=&#123;context.values[name] &#125;</span><br><span class="line">  onChange=&#123;e =&gt; handleChange(e, context) &#125;</span><br><span class="line">&gt;</span><br><span class="line"> ...</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>现在，我们的<code>Form</code>和<code>Field</code>组件可以组合在一起工作了。</p><h3><span id="implementing-our-new-contactus-component">Implementing our new ContactUs component</span></h3><p>接下来，我们使用<code>Form</code>和<code>Field</code>重新实现我们的<code>ContactUs</code>组件。</p><ol><li><p>首先删除<code>ContactUs.tsx</code>中的props，</p></li><li><p>重新定义<code>ContactUs</code>的SFC，</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const ContactUs: React.SFC = () =&gt; &#123;</span><br><span class="line">  return ();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>在<code>ContactUs.tsx</code>中导入<code>Form</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Form &#125; from &quot;./Form&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>现在引用<code>Form</code>组件，带上默认值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> return (</span><br><span class="line">   &lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">&lt;/Form&gt;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><ol start="5"><li>添加<code>name</code>输入框，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">  &lt;Form.Field name=&quot;name&quot; label=&quot;Your name&quot; /&gt;</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>注意这个没有写<code>type</code>属性，则默认使用<code>text</code>填充，</p><ol start="6"><li>下面补充<code>email</code>，<code>reason</code>和<code>notes</code>字段，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">  &lt;Form.Field name=&quot;name&quot; label=&quot;Your name&quot; /&gt;</span><br><span class="line">  &lt;Form.Field name=&quot;email&quot; label=&quot;Your email address&quot; type=&quot;Email&quot; /&gt;</span><br><span class="line">  &lt;Form.Field</span><br><span class="line">    name=&quot;reason&quot;</span><br><span class="line">label=&quot;Reason you need to contact us&quot;</span><br><span class="line">type=&quot;Select&quot;</span><br><span class="line">options=&#123;[&quot;Marketing&quot;, &quot;Support&quot;, &quot;Feedback&quot;, &quot;Jobs&quot;, &quot;Other&quot;]&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Form.Field name=&quot;notes&quot; label=&quot;Additional notes&quot; type=&quot;TextArea&quot; /&gt;</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>接下来的<code>ContactUsPage</code>就变得简单了。它不需要包含任何状态(state)，因为状态的维护已经交由<code>Form</code>组件管理。我们也不需要传递任何属性(props)到<code>ContactUs</code>组件中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class ContactUsPage extends React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    return (</span><br><span class="line">  &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Contact Us&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  If you enter your details we&apos;ll get back to you as soon as we can.</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;ContactUs /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前为止这个通用组件变得易用并减少我们的重复代码，但还需添加表单验证的实现。</p><h2><span id="validating-forms">Validating forms</span></h2><p>为了提升用户体验，需要在表单中实现校验功能。</p><p>在<code>ContactUs</code>组件中我们需要实现的校验规则是：</p><ul><li>name和email应该被填充</li><li>name字段不少于2个字符</li></ul><h3><span id="adding-a-validatio-rules-prop-to-form">Adding a validatio rules prop to form</span></h3><p>首先思考如何在表单中指定校验规则。我们需要为一个字段指定一个或多个规则。某些规则可能会有参数，例如最小长度。以如下形式，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form</span><br><span class="line">  ...</span><br><span class="line">  validationRules=&#123;&#123;</span><br><span class="line">    email: &#123; validator: required &#125;,</span><br><span class="line">name: [&#123; validator: required &#125;, &#123; validator: minLength, arg: 3 &#125;]</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><p>首先在<code>Form</code>组件实现一个<code>validationRules</code>属性，</p><ol><li>在<code>Form.tsx</code>中定义一个<code>Validator</code>函数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export type Validator= (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  values: IValues,</span><br><span class="line">  args?: any</span><br><span class="line">) =&gt; string;</span><br></pre></td></tr></table></figure><p>一个<code>Validator</code>函数包含字段名、值、以及一个可选参数，并返回string的字符串消息。如果输入内容合法，则返回空字符串。</p><ol start="2"><li>下面使用该类型创建一个<code>required</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const required: Validator = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  values: IValues,</span><br><span class="line">  args?: any</span><br><span class="line">): string =&gt;</span><br><span class="line">  values[fieldName] === undefined ||</span><br><span class="line">  values[fieldName] === null ||</span><br><span class="line">  values[fieldName] === &quot;&quot;</span><br><span class="line">    ? &quot;This must be populated&quot;</span><br><span class="line">: &quot;&quot;;</span><br></pre></td></tr></table></figure><p>这里需要将这个函数对外暴露使用。该函数会检测字段值是<code>undefined</code>、<code>null</code>还是空字符串，如果是则返回<code>This must be populated</code>的错误信息。</p><ol start="3"><li>类似地，创建一个长度判断的函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const minLength: Validator = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  values: IValues,</span><br><span class="line">  length: number</span><br><span class="line">): string =&gt;</span><br><span class="line">  values[fieldName] &amp;&amp; values[fieldName].length &lt; length ? `This must be at least $&#123;length&#125; characters`</span><br><span class="line">  : &quot;&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>接下来需要创建传递这些规则的props，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface IValidation &#123;</span><br><span class="line">  validator: Validator;</span><br><span class="line">  arg?: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IValidationProp &#123;</span><br><span class="line">  [key: string]: IValidation | IValidation[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;</span><br><span class="line">  defaultValues: IValues;</span><br><span class="line">  validationRules: IValidationProp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>validationRules</code>是一个索引key/value类型，其中key是字段名，value是一个或多个验证规则。</li><li>一个校验规则包含函数类型和一个参数。</li></ul><ol start="5"><li>有了<code>validationRules</code>后，在<code>ContactUs</code>中添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Form, minLenght, requied &#125; from &quot;./Forma&quot;;</span><br></pre></td></tr></table></figure><ol start="6"><li>现在，添加校验规则到<code>ContactUs</code>组件中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form defaultValues=&#123;&#123; name: &quot;&quot;, email: &quot;&quot;, reason: &quot;Support&quot;, notes: &quot;&quot; &#125;&#125;</span><br><span class="line">  valiationRules=&#123;&#123;</span><br><span class="line">    email: &#123; validator: required &#125;,</span><br><span class="line">name: [&#123; validator: required &#125;, &#123; validator: minLength, arg: 2 &#125;]</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Form&gt;</span><br></pre></td></tr></table></figure><h3><span id="tracking-validation-error-messages">Tracking validation error messages</span></h3><p>有必要跟踪用户的不合法输入信息，提供友好的用户体验。</p><p><code>Form</code>组件的职责用于管理表单状态，因此将错误信息添加到state中，</p><ol><li>定义错误信息类型，添加到<code>IState</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IErrors &#123;</span><br><span class="line">  [key: string]: string[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IState &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>errors</code>是一个key/value键值对，key为字段名，value为一组错误消息。</p><ol start="2"><li>在构造器中初始化<code>errors</code>的状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: IFormProps) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  const errors: IErrors = &#123;&#125;;</span><br><span class="line">  Object.keys(props.defaultValues).forEach(fieldName =&gt; &#123;</span><br><span class="line">    errors[fieldName] = [];</span><br><span class="line">  &#125;);</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    errors,</span><br><span class="line">    values: props.defaultValues</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的<code>defaultValues</code>包含了所有字段名。当<code>Form</code>组件初始化，所有字段的错误信息为空。</p><ol start="3"><li><code>Field</code>组件最终被用于渲染校验的错误信息，因此需要将这些信息添加到表单上下文。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">  values: IValues;</span><br><span class="line">  setValue?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加一个空白的<code>error</code>字面量作为默认值。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const FormContext = React.createContext&lt;IFormContext&gt;(&#123;</span><br><span class="line">  errors: &#123;&#125;,</span><br><span class="line">  values: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>现在加入到context中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const context: IFormContext = &#123;</span><br><span class="line">    errors: this.state.errors,</span><br><span class="line">setValue: this.setValue,</span><br><span class="line">values: this.state.values</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，校验错误信息被设置在state中，并且可以被<code>Field</code>组件访问。接下来要创建一个方法来调用这些校验规则。</p><h3><span id="invoking-validation-rules">Invoking validation rules</span></h3><p>前面定义了校验规则，并且将校验信息关联到state中。但这些规则还没被调用。接下来我们要实现：</p><ol><li>我们需要在<code>Form</code>组件内创建一个方法，使用这些规则来校验字段。我们创建一个<code>validate</code>方法，它接收字段名和它的值。该方法会返回一个error message的数组信息，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private validate = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  value: any</span><br><span class="line">): string[] =&gt; &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>方法内，需要获取校验规则，并初始化返回信息<code>errors</code>。我们会收集校验的错误信息并存储在<code>errors</code>中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private validate = (</span><br><span class="line">  fieldName: string,</span><br><span class="line">  value: any</span><br><span class="line">): string[] =&gt; &#123;</span><br><span class="line">  const rules = this.props.validationRules[fieldName];</span><br><span class="line">  const errors: string[] = [];</span><br><span class="line">  </span><br><span class="line">  // TODO - execute all the validators</span><br><span class="line">  return errors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>上下文获取的规则可能是一个<code>IValidation</code>数组，也可能是一个<code>IValidation</code>对象。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const errors: string[] = [];</span><br><span class="line">if (Array.isArray(rules)) &#123;</span><br><span class="line">  // TODO - execute all the validators in the array of rules</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  if (rules) &#123;</span><br><span class="line">    const error = rules.validator(fieldName, this.state.values, rules.arg);</span><br><span class="line">if (error) &#123;</span><br><span class="line">  errors.push(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">return errors;</span><br></pre></td></tr></table></figure><ol start="4"><li>有多个校验规则时，我们可以使用<code>forEach</code>函数迭代执行，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">if (Array.isArray(rules)) &#123;</span><br><span class="line">  rules.forEach(rule =&gt; &#123;</span><br><span class="line">    const error = rule.validator(</span><br><span class="line">  fieldNmae,</span><br><span class="line">  this.state.values,</span><br><span class="line">  rule.arg</span><br><span class="line">    );</span><br><span class="line">if (error) &#123;</span><br><span class="line">  errors.push(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">return errors;</span><br></pre></td></tr></table></figure><ol start="5"><li>剩下的代码部分是，将校验的结果存储到表单状态<code>errors</code>中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (Array.isArray(rules)) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">const newErrors = &#123; ...this.state.errors, [fieldName]: errors &#125;;</span><br><span class="line">this.setState(&#123; errors: newErrors &#125;);</span><br><span class="line">return errors;</span><br></pre></td></tr></table></figure><ol start="6"><li>表单<code>Field</code>组件需要调用到这个<code>validate</code>方法。首先添加到<code>IFormContext</code>接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IFormContext &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">  setValue?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">  validate?: (fieldName: string, value: any) =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>现在将它添加到<code>Form</code>渲染内容中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">  const context: IFormContext = &#123;</span><br><span class="line">    errors: this.state.errors,</span><br><span class="line">setValue: this.setValue,</span><br><span class="line">validate: this.validate,</span><br><span class="line">values: this.state.values</span><br><span class="line">  &#125;;</span><br><span class="line">  return (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单的校验和方法的调用已经完成了。但没有事件触发这个动作，</p><h3><span id="triggering-validation-rule-execution-from-field">TRiggering validation rule execution from field</span></h3><p>当用户输入表单内容后，我们希望校验规则在blur时触发，</p><ol><li>首先创建一个函数处理这些输入框触发的<code>blur</code>事件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const handleChange = (</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleBlur = (</span><br><span class="line">  e:</span><br><span class="line">    | React.FocusEvent&lt;HTMLInputElement&gt;</span><br><span class="line">| React.FocusEvent&lt;HTMLTextAreaElement&gt;</span><br><span class="line">| React.FocusEvent&lt;HTMLSelectElement&gt;,</span><br><span class="line">  context: IFormContext</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  if (context.validate) &#123;</span><br><span class="line">    context.validate(props.name, e.currentTarget.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">return ( ... )</span><br></pre></td></tr></table></figure><ul><li>TypeScript的blur事件是<code>FocusEvent&lt;T&gt;</code>，其中<code>T</code>是被处理的元素。</li><li>参数<code>e</code>作为事件对象。</li><li>第二个参数是表单上下文。</li><li>需要使用条件语句判断<code>validate</code>方法是否定义。</li><li>方法体内调用<code>valdiate</code>方法。</li></ul><ol start="2"><li>将事件引入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</span><br><span class="line">&lt;input</span><br><span class="line">type=&#123;type.toLowerCase()&#125;</span><br><span class="line">id=&#123;name&#125;</span><br><span class="line">value=&#123;context.values[name]&#125;</span><br><span class="line">onChange=&#123;e =&gt; handleChange(e, context)&#125;</span><br><span class="line">onBlur=&#123;e =&gt; handleBlur(e, context)&#125;</span><br><span class="line">/&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>类似地，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;type === &quot;TextArea&quot; &amp;&amp; (</span><br><span class="line">&lt;textarea</span><br><span class="line">id=&#123;name&#125;</span><br><span class="line">value=&#123;context.values[name]&#125;</span><br><span class="line">onChange=&#123;e =&gt; handleChange(e, context)&#125;</span><br><span class="line">onBlur=&#123;e =&gt; handleBlur(e, context)&#125;</span><br><span class="line">/&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">&lt;select</span><br><span class="line">value=&#123;context.values[name]&#125;</span><br><span class="line">onChange=&#123;e =&gt; handleChange(e, context)&#125;</span><br><span class="line">onBlur=&#123;e =&gt; handleBlur(e, context)&#125;</span><br><span class="line">&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>输入框字段会在失去焦点时触发校验动作。</p><h3><span id="rendering-validation-error-messages">Rendering validation error messages</span></h3><p>在此之前，需要将错误信息展示或者隐藏。</p><ol><li>添加<code>form-error</code>样式控制，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label htmlFor=&#123;name&#125;&gt;&#123;label&#125;&lt;/label&gt;</span><br><span class="line">  &#123;(type === &quot;Text&quot; || type === &quot;Email&quot;) &amp;&amp; (</span><br><span class="line">    ...</span><br><span class="line">  )&#125;</span><br><span class="line">  &#123;type === &quot;TextArea&quot; &amp;&amp; (</span><br><span class="line">    ...</span><br><span class="line">  )&#125;</span><br><span class="line">  &#123;type === &quot;Select&quot; &amp;&amp; (</span><br><span class="line">    ...</span><br><span class="line">  )&#125;</span><br><span class="line">&#123;context.errors[name] &amp;&amp;</span><br><span class="line">  context.errors[name].length &gt; 0 &amp;&amp;</span><br><span class="line">  context.errors[name].map(error =&gt; (</span><br><span class="line">    &lt;span key=&#123;error&#125; className=&quot;form-error&quot;&gt;</span><br><span class="line">       &#123;error&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  ))&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>首先检测有错误的字段，再将错误信息渲染出来。</p><ol start="2"><li>下面是css样式，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.form-error &#123;</span><br><span class="line">font-size: 13px;</span><br><span class="line">color: red;</span><br><span class="line">margin: 3px auto 0px 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="form-submission">Form submission</span></h2><p>表单触发提交动作时，同样也需要进行校验。</p><ol><li>首先添加提交按钮，在<code>Form</code>组件中添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormContext.Provider value=&#123;context&#125;&gt;</span><br><span class="line">  &lt;form className=&quot;form&quot; noValidate=&#123;true&#125;&gt;</span><br><span class="line">    &#123;this.props.children&#125;</span><br><span class="line">&lt;div className=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/FormContext.Provider&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>给按钮添加样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border</span>: black solid <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form-group</span> <span class="selector-tag">button</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: gray solid <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="adding-a-onsubmit-form-prop">Adding a onSubmit form prop</span></h3><p>在我们的<code>Form</code>组件中，需要一个新的属性来消费表单的提交动作。</p><ol><li>在<code>Form</code>组件中创建一个prop函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export interface ISubmitResult &#123;</span><br><span class="line">  success: boolean;</span><br><span class="line">  errors?: IErrors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IFormProps &#123;</span><br><span class="line">  defaultValues: IValues;</span><br><span class="line">  validationRules: IValidationProp;</span><br><span class="line">  onSubmit: (values: IValues) =&gt; Promise&lt;ISubmitResult&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onSubmit</code>函数会接收filed的值，并异步返回提交的信息。</p><ol start="2"><li>另外需要添加状态记录表单的提交动作，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  values: IValues;</span><br><span class="line">  errors: IErrors;</span><br><span class="line">  submitting: boolean;</span><br><span class="line">  submitted: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>另外需要在构造器初始化，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: IFormProps) &#123;</span><br><span class="line">  ...</span><br><span class="line">  this.state = &#123;</span><br><span class="line">    errors,</span><br><span class="line">submitted: false,</span><br><span class="line">submitting: false,</span><br><span class="line">values: props.defaultValues</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>表单提交后按钮不可用，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=&quot;submit&quot;</span><br><span class="line">  disabled=&#123;this.state.submitting || this.state.submitted&#125;</span><br><span class="line">&gt;</span><br><span class="line">  Submit</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>在表单中添加事件控制，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form className=&quot;form&quot; noValidate=&#123;true&#125; onSubmit=&#123;this.handleSubmit&#125;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>下面模拟这个提交动作，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里使用了<code>preventDefault</code>避免浏览器自动提交。</p><ol start="7"><li>接下来就是重点，表单验证！</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private validateForm(): boolean &#123;</span><br><span class="line">  const errors: IErrors = &#123;&#125;;</span><br><span class="line">  let haveError: boolean = false;</span><br><span class="line">  Object.keys(this.props.defaultValues).map(fieldName =&gt; &#123;</span><br><span class="line">    errors[fieldName] = this.validate(</span><br><span class="line">      fieldName,</span><br><span class="line">      this.state.values[fieldName]</span><br><span class="line">    );</span><br><span class="line">    if (errors[fieldName].length &gt; 0) &#123;</span><br><span class="line">      haveError = true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  this.setState(&#123; errors &#125;);</span><br><span class="line">  return !haveError;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  if (this.validateForm()) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>表单的状态会更新到最新的校验错误信息，</p><ol start="8"><li>实现剩余的代码，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private handleSubmit = async (e: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; &#123; </span><br><span class="line">  e.preventDefault();</span><br><span class="line">  if (this.validateForm()) &#123;</span><br><span class="line">    this.setState(&#123; submitting: true &#125;);</span><br><span class="line">    const result = await this.props.onSubmit(this.state.values);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      errors: result.errors || &#123;&#125;,</span><br><span class="line">      submitted: result.success,</span><br><span class="line">      submitting: false</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3><span id="consuming-the-onsubmit-form-prop">Consuming the onSubmit form prop</span></h3><p>在本小节，将实现如何消费表单的提交内容。</p><ol><li>首先在<code>ContactUs</code>组件中导入<code>ISubmitResult</code>和<code>IValues</code>，用于处理提交的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Form, ISubmitResult, IValues, minLength, required &#125; from &quot;./Form&quot;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  onSubmit: (values: IValues) =&gt; Promise&lt;ISubmitResult&gt;;</span><br><span class="line">&#125;</span><br><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个<code>handleSubmit</code>函数，它将会调用<code>onSubmit</code>属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const ContactUs: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">  const handleSubmit = async (values: IValues): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">    const result = await props.onSubmit(values);</span><br><span class="line">return result;</span><br><span class="line">  &#125;;</span><br><span class="line">  return ( ... );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>onSubmit</code>属性是异步的，因此需要函数前缀带<code>async</code>以及<code>onSubmit</code>前面带<code>await</code>。</p><ol start="3"><li>绑定这个属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">return (</span><br><span class="line">  &lt;Form ... onSubmit=&#123;handleSubmit&#125;&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/Form&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="4"><li>现在移步到<code>ContactUsPage</code>组件，创建提交处理，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private handleSubmit = async (values: IValues): Promise&lt;ISubmitResult&gt; =&gt; &#123;</span><br><span class="line">  await wait(1000); // simulate asynchronous web API call</span><br><span class="line">  return &#123;</span><br><span class="line">    errors: &#123;</span><br><span class="line">  email: [&quot;Some is wrong with this&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">success: false</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>接着创建<code>wait</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const wait = (ms: number): Promise&lt;void&gt; =&gt; &#123;</span><br><span class="line">  return new Promise(resolve =&gt; setTimeout(resolve, ms));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>在<code>ContactUs</code>组件中加上，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ContactUs onSubmit=&#123;this.handleSubmit&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>导入暴露的属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ISubmitResult, IValues &#125; from &quot;./Form&quot;;</span><br></pre></td></tr></table></figure><h2><span id="summary">Summary</span></h2><p>本章讨论了控制组件，通过实现自定义表单组件描述。我们构建了一个通用型的<code>Form</code>和<code>Field</code>组件，并实现了状态控制、事件处理、表单提交等操作。</p><h2><span id="questions">Questions</span></h2><p>问题练习：</p><ol><li>扩展<code>Field</code>组件内容，包含<code>number</code>属性。</li><li>实现一个的输入框，该输入框响应紧急的程度，用数字表示。</li><li>实现一个新的校验函数，检测输入的数字是否在区间范围内。</li><li>合并实现2和3的功能。</li><li>为这个输入框添加事件。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;creating a form with controlled components&lt;/li&gt;
&lt;li&gt;Reducing boilerplate code with generic components&lt;/li&gt;
&lt;li&gt;Validating forms&lt;/li
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第六章 Component Patterns</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_6_Component_Patterns/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_6_Component_Patterns/</id>
    <published>2019-11-27T07:50:06.000Z</published>
    <updated>2019-11-05T03:57:07.987Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Container and presentational components</li><li>Compound compoents</li><li>Render props pattern</li><li>Higher-order components</li></ul><h2><span id="container-and-presentational-components">container and presentational components</span></h2><p>容器和表述组件。就是将复杂组件的属性内容进行抽取成为一个新的组件。</p><p>(略)</p><h2><span id="compound-components">Compound components</span></h2><p>合成组件，就是将一系列组件一起工作。</p><p>(略)</p><h2><span id="higher-order-components">Higher-order components</span></h2><p><strong>A higher-order component(HOC)</strong> 是一个函数组件，接收一个组件参数，返回该组件的增强版本。这样看起来没什么意义，下面通过一个例子<code>withLoader</code>组件来阐述。最终效果类似延迟加载动态圈。</p><h3><span id="adding-asynchronous-data-fetching">Adding asynchronous data fetching</span></h3><p>下面构造一份延迟数据来模拟真实的网络环境，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const wait = (ms: number): Promise&lt;void&gt; =&gt; &#123;</span><br><span class="line">    return new Promise(resolve =&gt; setTimeout(resolve, ms));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export const getProduct = async (id: number): Promise&lt;IProduct | null&gt; =&gt; &#123;</span><br><span class="line">    await wait(1000);</span><br><span class="line">    const foundProducts = products.filter(customer =&gt; customer.id === id);</span><br><span class="line">    return foundProducts.length === 0 ? null : foundProducts[0];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着在原来的<code>ProductPage</code>页面导入<code>getProduct</code>函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; getProduct, IProduct &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><p>在<code>ProductPage</code>状态中加入一个新的属性<code>loading</code>，表示数据是否已经加载，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">product?: IProduct;</span><br><span class="line">added: boolean;</span><br><span class="line">loading: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在构造函数中初始化状态属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public constructor(props: Props) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">added: false,</span><br><span class="line">loading: true</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件加载时使用<code>getProduct</code>函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public async componentDidMount() &#123;</span><br><span class="line">  if (this.props.match.params.id) &#123;</span><br><span class="line">    const id: number = parseInt(this.props.match.params.id, 10);</span><br><span class="line">    const product = await getProduct(id);</span><br><span class="line">    if (product !== null) &#123;</span><br><span class="line">      this.setState(&#123; product, loading: false &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了<code>await</code>关键字异步调用<code>getProduct</code>。另外还要修改生命周期方法<code>componentDidMount</code>带上<code>async</code>关键字。</p><h3><span id="implementing-the-withloader-hoc">Implementing the withLoader HOC</span></h3><p>我们将会创建<code>withLoader</code>加载组件，被用于指示组件处于繁忙状态。</p><ol><li>创建一个新文件，<code>withLoader.tsx</code>，内容如下，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  loading: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const withLoader = &lt;P extends object&gt;(</span><br><span class="line">  Component: React.ComponentType&lt;P&gt;</span><br><span class="line">): React.SFC&lt;P &amp; IProps&gt; =&gt; (props: P &amp; IProps) =&gt;</span><br><span class="line">  props.loading ? (</span><br><span class="line">    &lt;div className=&quot;loader-overlay&quot;&gt;</span><br><span class="line">      &lt;div className=&quot;loader-circle-wrap&quot;&gt;</span><br><span class="line">        &lt;div className=&quot;loader-circle&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  ) : (</span><br><span class="line">    &lt;Component &#123;...props&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">export default withLoader;</span><br></pre></td></tr></table></figure><p>其中，</p><ul><li><code>withLoader</code>是一个函数，接收一个类型是<code>P</code>的组件</li><li><code>withLoader</code>调用一个函数组件</li><li>函数组件的属性定义是<code>P &amp; IProps</code>，它是一个交集类型</li><li>组件的所有属性会通过SFC传入，并带上一个新的属性<code>loading</code></li><li>props被解构为一个<code>loading</code>变量，剩余的其它属性作为rest参数</li></ul><ol start="2"><li>添加加载转轮的CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loader-overlay</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10004</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loader-circle-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loader-circle</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">4px</span> solid <span class="number">#899091</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: loader-circle-spin <span class="number">0.7s</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="consuming-the-withloader-hoc">Consuming the withLoader HOC</span></h3><p>要消费这个高阶组件，只需要简单包装原来的组件即可。</p><p>原来的<code>Product.tsx</code>文件修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import withLoader from &quot;./withLoader&quot;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">export default withLoader(Product);</span><br></pre></td></tr></table></figure><p>在引用的页面部分修改为，即<code>ProductPage</code>页面，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;product || this.state.loading ? (</span><br><span class="line">  &lt;Product</span><br><span class="line">loading=&#123;this.state.loading&#125;</span><br><span class="line">product=&#123;product&#125;</span><br><span class="line">inBasket=&#123;this.state.added&#125;</span><br><span class="line">onAddToBasket=&#123;this.handleAddClick&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">) : (</span><br><span class="line">  &lt;p&gt;Product not found!&lt;/p&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure><p>修改原来Props的属性选项为可选的，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  product?: IProduct;</span><br><span class="line">  added: boolean;</span><br><span class="line">  loading: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外需要处理空值的情况，修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const handleAddClick = () =&gt; &#123;</span><br><span class="line">props.onAddToBasket();</span><br><span class="line">&#125;;</span><br><span class="line">if (!product) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">return (</span><br><span class="line">&lt;React.Fragment&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/React.Fragment&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>HOC非常适用于对原来组件的增强处理。比较常见的是React Router中使用了非常多这种HOC模式。React Router自身也实现了<code>withRouter</code>组件函数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Container and presentational components&lt;/li&gt;
&lt;li&gt;Compound compoents&lt;/li&gt;
&lt;li&gt;Render props pattern&lt;/li&gt;
&lt;li&gt;Higher-order components&lt;
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第五章 高级类型</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_5_Advanced_Types/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_5_Advanced_Types/</id>
    <published>2019-11-27T07:50:05.000Z</published>
    <updated>2019-11-05T03:57:07.982Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Union Types</li><li>Type guards</li><li>Generics</li><li>Overload signatures</li><li>Lookup and mapped types</li></ul><h2><span id="union-types">Union types</span></h2><p>顾名思义，联合类型就是将类型组合的一种形式。</p><h3><span id="string-literal-types">String literal types</span></h3><p>字符串字面量类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Control = &quot;Textbox&quot;</span><br></pre></td></tr></table></figure><p>这个类型的值仅能是<code>&quot;Textbox&quot;</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let notes: Control;</span><br><span class="line">notes = &quot;Textbox&quot;;</span><br></pre></td></tr></table></figure><p>用其它值表示则会报错，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notes = &quot;DropDown&quot;;// &quot;DropDown&quot; is not assignable to type &quot;Textbox&quot;</span><br></pre></td></tr></table></figure><p>和其它TypeScript类型一样，<code>null</code>和<code>undefined</code>是有效的值，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notes = null;</span><br><span class="line">notes = undefined;</span><br></pre></td></tr></table></figure><p>字符串字面量类型自身没有多大用处，它的用处在于结合到联合类型中。</p><h3><span id="string-literal-union-types">String literal union types</span></h3><p>字符串字面量联合类型就是将多个字符串字面类型组合在一起。例如，将原先的<code>Control</code>类型增强为联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Control = &quot;Textbox&quot; | &quot;DropDown&quot;</span><br></pre></td></tr></table></figure><p>设置值为二选一，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let notes: Control;</span><br><span class="line">notes = &quot;Textbox&quot;;</span><br><span class="line">notes = &quot;DropDown&quot;;</span><br></pre></td></tr></table></figure><p>扩展更多的字面量，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Control = &quot;Textbox&quot; | &quot;DropDown&quot; | &quot;DatePicker&quot; | &quot;NumberSlider&quot;;</span><br></pre></td></tr></table></figure><h3><span id="discriminated-union-pattern">Discriminated union pattern</span></h3><p>区分联合模式(discriminated union pattern)允许我们从不同联合类型中处理逻辑，以一个例子说明，</p><ol><li>首先创建三个不同的接口分别表示textbox、date picker、number slider，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface ITextbox &#123;</span><br><span class="line">control: &quot;TextBox&quot;;</span><br><span class="line">value: string;</span><br><span class="line">multiline: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IDatePicker &#123;</span><br><span class="line">control: &quot;DatePicker&quot;;</span><br><span class="line">value: Date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface INumberSlider &#123;</span><br><span class="line">control: &quot;NumberSlider&quot;;</span><br><span class="line">value: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们都有一个属性<code>control</code>，会成为模式的判别准则，</p><ol start="2"><li>我们将这些接口组合成为一个联合类型叫做<code>Field</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Field = ITextbox | IDatePicker | INumberSlider;</span><br></pre></td></tr></table></figure><ol start="3"><li>接着创建一个函数来初始化<code>Field</code>类型的值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function intializeValue(field: Field) &#123;</span><br><span class="line">switch (field.control) &#123;</span><br><span class="line">case &quot;Textbox&quot;:</span><br><span class="line">field.value = &quot;&quot;;</span><br><span class="line">break;</span><br><span class="line">case &quot;DatePicker&quot;:</span><br><span class="line">field.value = new Date();</span><br><span class="line">break;</span><br><span class="line">case &quot;NumberSlier&quot;:</span><br><span class="line">filed.value = 0;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">const shouldNotReach: never = field;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化值的设置取决于这个区分属性<code>control</code>。因此我们需要使用<code>switch</code>语句进行分岔处理。</p><p>其中<code>default</code>分支在<code>switch</code>语句中应该从不达到，对于不可达语句，使用<code>never</code>类型表述。</p><ol start="4"><li>随着时间的推移，新增了一个checkbox字段需求，接着实现这个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface ICheckbox &#123;</span><br><span class="line">control: &quot;Checkbox&quot;;</span><br><span class="line">value: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>将这个field添加到联合<code>Field</code>类型中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Field = ITextbox | IDatePicker | INumberSlider | ICheckbox;</span><br></pre></td></tr></table></figure><p>我们将会立即看到<code>initializeValue</code>函数在<code>never</code>声明中抛出编译错误，</p><ol start="6"><li>增加一个分支即可，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function intializeValue(field: Field) &#123;</span><br><span class="line">switch (field.control) &#123;</span><br><span class="line">case &quot;Textbox&quot;:</span><br><span class="line">field.value = &quot;&quot;;</span><br><span class="line">break;</span><br><span class="line">case &quot;DatePicker&quot;:</span><br><span class="line">field.value = new Date();</span><br><span class="line">break;</span><br><span class="line">case &quot;NumberSlider&quot;:</span><br><span class="line">field.value = 0;</span><br><span class="line">break;</span><br><span class="line">case &quot;Checkbox&quot;:</span><br><span class="line">field.value = false;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">const shouldNotReach: never = field;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，联合类型允许我们组合任何类型成为另外一种类型。</p><h2><span id="type-guards">Type guards</span></h2><p>类型守卫，允许我们在一个代码条件分支上缩小一个对象的具体类型。对于联合类型来说可以在代码分支对不同具体类型进行处理。</p><p>例如上面的<code>intializeValue</code>函数，通过<code>switch</code>语句控制分支<code>control</code>来对不同设值类型进行处理。</p><p>下面介绍另外一种不同的方式。</p><h3><span id="using-the-typeof-keyword">Using the typeof keyword</span></h3><p><code>typeof</code>关键字是JavaScript的关键字，它会返回改类型的一个字符串。因此可以使用它缩小类型。</p><p>例如，有一个包含字符串和一个字符串数组的类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type StringOrStringArray = string | string[];</span><br></pre></td></tr></table></figure><p>我们需要实现一个<code>first</code>的函数，它接收类型为<code>StringOrStringArray</code>的参数并返回一个字符串，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function first(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求函数，如果是一个字符串，则返回第一个字符，如果是一个字符串数组则返回数组第一个元素，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function first(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">if (typeof stringOrArray === &quot;string&quot;) &#123;</span><br><span class="line">return stringOrArray.substr(0, 1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return stringOrArray[0];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检测是否生效，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(first(&quot;The&quot;));</span><br><span class="line">console.log(first([&quot;The&quot;, &quot;cat&quot;]));</span><br></pre></td></tr></table></figure><p>因为<code>typeof</code>关键字仅能被用于JavaScript类型。为了说明这一点，对原来的函数做了增强。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function firstEnhanced(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">if (typeof stringOrArray === &quot;string&quot;) &#123;</span><br><span class="line">return stringOrArray.substr(0, 1);</span><br><span class="line">&#125; else if (typeof stringOrArray === &quot;string[]&quot;) &#123;</span><br><span class="line">return stringOrArray[0];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">const shouldNotReach: never = stringOrArray;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时TypeScript编译器在第二个分支报错，<code>typeof</code>关键字仅作用于JavaScript类型，即<code>string</code>、<code>number</code>、<code>boolean</code>、<code>symbol</code>、<code>undefined</code>、<code>object</code>以及<code>function</code>；错误信息告诉我们<code>string[]</code>类型和JavaScript的类型<code>object</code>重合了，因此第二个分支实际上返回的是<code>object</code>。</p><p>修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function firstEnhanced(stringOrArray: StringOrStringArray): string &#123;</span><br><span class="line">if (typeof stringOrArray === &quot;string&quot;) &#123;</span><br><span class="line">return stringOrArray.substr(0, 1);</span><br><span class="line">&#125; else if (typeof stringOrArray === &quot;object&quot;) &#123;</span><br><span class="line">return stringOrArray[0];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">const shouldNotReach: never = stringOrArray;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，<code>typeof</code>对于JavaScript类型是良好的，但对于TypeScript的具体类型却无从入手。</p><h3><span id="using-the-instanceof-keyword">Using the instanceof keyword</span></h3><p><code>instanceof</code>关键字还是JavaScript的，典型地被用于决定一个对象是否是某个类的实例。</p><p>例如，有两个类<code>Person</code>和<code>Company</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">id: number;</span><br><span class="line">firstName: string;</span><br><span class="line">surname: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class company &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及定义一个联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type PersonOrCompany = Person | Company;</span><br></pre></td></tr></table></figure><p>现在编写一个函数，接收一个<code>Person</code>或<code>Company</code>，并输出名字到控制台，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function logName(personOrCompany: PersonOrCompany) &#123;</span><br><span class="line">if (personOrCompany instanceof Person) &#123;</span><br><span class="line">console.log(`$&#123;personOrCompany.firstName&#125; $&#123;personOrCompany.surname&#125;`);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(personOrCompany.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>instanceof</code>虽然缩小了类的类型，但它仍然是JavaScript类型，有许多TypeScript类型不能处理。</p><h3><span id="using-the-in-keyword">Using the in keyword</span></h3><p><code>in</code>关键字是另外一个JavaScript关键字，被用于检测一个属性是否是一个对象。</p><p>例如，取代原来类的定义，使用接口对<code>Person</code>和<code>Company</code>进行声明，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">firstName: string;</span><br><span class="line">surname: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ICompany &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及创建一个联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type PersonOrCompany = IPerson | ICompany;</span><br></pre></td></tr></table></figure><p>重写原来的方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function logName(personOrCompany: PersonOrCompany) &#123;</span><br><span class="line">if (&quot;firstName&quot; in personOrCompany) &#123;</span><br><span class="line">console.log(`$&#123;personOrCompany.firstName&#125; $&#123;personOrCompany.surname&#125;`);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">console.log(personOrCompany.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>in</code>关键字比较灵活，可以被用于任何对象类型。</p><h3><span id="using-a-user-defined-type-guard">Using a user-defined type guard</span></h3><p>自定义类型守卫，这部分属于TypeScript3特性，改写原来的代码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">firstName: string;</span><br><span class="line">surname: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface ICompany &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type PersonOrCompany = IPerson | ICompany;</span><br></pre></td></tr></table></figure><p>然后实现类型守卫函数，返回boolean，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function isPerson(personOrCompany: PersonOrCompany): personOrCompany is IPerson &#123;</span><br><span class="line">return &quot;firstName&quot; in personOrCompany;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="generics">Generics</span></h2><p>泛型可以作用于一个函数或类中。</p><h3><span id="generic-functions">Generic functions</span></h3><p>下面通过一个例子描述泛型函数。我们将创建一个包装函数围绕<code>fetch</code>函数获取web servcie的数据，</p><ol><li>首先创建函数的方法签名，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function getData&lt;T&gt;(url: string): Promise&lt;T&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想要转变为arrow function的形式，我们可以…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const getData = &lt;T&gt;(url: string): Promise&lt;T&gt; =&gt; &#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>现在让我们实现我们的函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getData&lt;T&gt;(url: string): Promise&lt;T&gt; &#123;</span><br><span class="line">return fetch(url).then(response =&gt; &#123;</span><br><span class="line">if (!response.ok) &#123;</span><br><span class="line">throw new Error(response.statusText);</span><br><span class="line">&#125;</span><br><span class="line">return response.json();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后，消费这个函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData&lt;IPerson&gt;(&quot;/people/1&quot;).then(person =&gt; console.log(person));</span><br></pre></td></tr></table></figure><h3><span id="generic-classes">Generic classes</span></h3><p>泛型类，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class List&lt;T&gt; &#123;</span><br><span class="line">private data: T[] = [];</span><br><span class="line"></span><br><span class="line">public getList(): T[] &#123;</span><br><span class="line">return this.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public add(item: T) &#123;</span><br><span class="line">this.data.push(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public remove(item: T) &#123;</span><br><span class="line">this.data = this.data.filter(dataItem: T) =&gt; &#123;</span><br><span class="line">return !this.equals(item, dataItem);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">private equals(obj1: T, obj2: T) &#123;</span><br><span class="line">return Object.keys(obj1).every(key =&gt; &#123;</span><br><span class="line">return obj1[key] === obj2[key];</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建对应的消费接口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br><span class="line">const billy: IPerson = &#123; id: 1, name: &quot;Billy&quot; &#125;;</span><br></pre></td></tr></table></figure><p>然后创建一个泛型类实例，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const people = new List&lt;IPerson&gt;();</span><br></pre></td></tr></table></figure><p>调用泛型方法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">people.add(billy);</span><br><span class="line">people.remove(billy);</span><br></pre></td></tr></table></figure><p>获取条目信息，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const items = people.getList();</span><br></pre></td></tr></table></figure><p>其中<code>React.Component</code>包含有两个泛型参数，分别是props和state。</p><h2><span id="overload-signatures">Overload signatures</span></h2><p>方法签名重载。</p><p>首先有两个函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function condenseString(string: string): string &#123;</span><br><span class="line">return string.split(&quot; &quot;).join(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function condenseArray(array: string[]): string[] &#123;</span><br><span class="line">return array.map(item -&gt; item.split(&quot; &quot;).join(&quot;&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在将这两个函数组合为一个函数。我们可以使用联合类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function condense(stringOrArray: string | string[]): string| string[] &#123;</span><br><span class="line">return typeof stringOrArray === &quot;string&quot; ? stringOrArray.split(&quot; &quot;).join(&quot;&quot;) : stringOrArray.map(item =&gt; item.split(&quot; &quot;).join(&quot;&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const condensedText = condense(&quot;the cat sat on the mat&quot;);</span><br></pre></td></tr></table></figure><p>如果我们将鼠标放在<code>condensedText</code>上，我们会发现它是个联合类型，</p><p>现在添加两个重载的方法签名，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function condense(string: string): string;</span><br><span class="line">function condense(array: string[]): string[];</span><br><span class="line">function condense(stringOrArray: string | string[]): string | string[] &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>再次消费重载的函数，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const moreCondensedText = condense(&quot;The cat sat on the mat&quot;);</span><br></pre></td></tr></table></figure><p>将鼠标悬浮在<code>moreCondensedText</code>上，可以得到一个更好的确定类型是<code>string</code>。可以看到重载方法签名可以得到更好的类型推断。</p><h2><span id="lookup-and-mapped-types">Lookup and mapped types</span></h2><p>TypeScript中提供了一个关键字<code>keyof</code>用于为一个对象中的所有属性创建联合类型。这种被创建的类型被称为查询类型(lookup type)。它允许我们基于已有的类型的属性，动态地创建类型。</p><p>以一个例子为例，我们有下面这些接口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用关键字<code>keyof</code>创建该接口的查询类型(lookup type)，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type PersonProps = keyof IPerson;</span><br></pre></td></tr></table></figure><p>如果将光标悬浮在<code>PersonProps</code>类型上，我们可以看到它是个联合类型，包含<code>&quot;id&quot;</code>和<code>&quot;name&quot;</code>属性，</p><p>在原来的<code>IPerson</code>上添加一个新的属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">age: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>PersonProps</code>类型包含了一个新的扩展属性<code>&quot;age&quot;</code>，</p><p>因此<code>PersonProps</code>类型是个lookup type，顾名思义它总是会查询它需要的字面量。</p><p>接下来我们看看这种查询类型的某些有用的地方，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Field &#123;</span><br><span class="line">name: string;</span><br><span class="line">label: string;</span><br><span class="line">defaultValue: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这仅是开始，我们可以让<code>name</code>属性更强，并使原来的类是个泛型类，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Field&lt;T, K extends keyof T&gt; &#123;</span><br><span class="line">name: K,</span><br><span class="line">label: string;</span><br><span class="line">defaultValue: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在该类创建了两个泛型参数。第一个泛型参数是对象类型，第二个是对象类型的属性类型。</p><p>然后我们创建这个类的实例，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const idField: Field&lt;IPerson, &quot;id&quot;&gt; = new Field();</span><br></pre></td></tr></table></figure><p>尝试引用不存在于<code>IPerson</code>的属性会发生报错，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const addressField: Field&lt;IPerson, &quot;address&quot;&gt; = new Field();</span><br></pre></td></tr></table></figure><p>另外，<code>defaultValue</code>不是类型安全的，譬如可以设置值为字符串，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idField.defaultValue = &quot;2&quot;;</span><br></pre></td></tr></table></figure><p>可以改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Field&lt;T, K extends keyof T&gt; &#123;</span><br><span class="line">name: K;</span><br><span class="line">label: string;</span><br><span class="line">defaultValue: T[K];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询<code>T[K]</code>的类型，对于<code>idField</code>。它会处理到<code>IPerson</code>的属性<code>id</code>，即<code>number</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idFiled.defaultValue = 2;</span><br></pre></td></tr></table></figure><p>接下来创建一个映射类型。映射类型就是映射已存在类型的属性。</p><p>首先创建一个类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IPerson &#123;</span><br><span class="line">id: number;</span><br><span class="line">name: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个只读版本的新类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type ReadonlyPerson = &#123; readonly [P in keyof IPerson]: IPerson[P] &#125;;</span><br></pre></td></tr></table></figure><p>其中重要的是创建这个映射<code>[P in keyof IPerson]</code>。这里将<code>IPerson</code>的所有属性迭代指派给<code>P</code>。因此，这个类型实际上是，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type ReadonlyPerson = &#123;</span><br><span class="line">readonly id: number</span><br><span class="line">readonly name: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在visual studio code中，它的实际定义会被解析为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type Readonly&lt;T&gt; = &#123;</span><br><span class="line">readonly [P in keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以尝试创建我们自己呃泛型映射类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Stringify&lt;T&gt; = &#123; [P in keyof T]: string &#125;;</span><br></pre></td></tr></table></figure><p>然后消费我们的映射类型，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let tim: Stringify&lt;IPerson&gt; = &#123;</span><br><span class="line">id: &quot;1&quot;,</span><br><span class="line">name: &quot;Time&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>映射类型适用于需要从已有的类型创建一个新的类型的场景。在TypeScript中，除了<code>Radonly&lt;T&gt;</code>类型外，还有<code>Partial&lt;T&gt;</code>，它会创建一个所有属性都是optional的映射类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Union Types&lt;/li&gt;
&lt;li&gt;Type guards&lt;/li&gt;
&lt;li&gt;Generics&lt;/li&gt;
&lt;li&gt;Overload signatures&lt;/li&gt;
&lt;li&gt;Lookup and mapped types&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;sp
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第四章 React Router</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_4_Routing_with_React_Router/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_4_Routing_with_React_Router/</id>
    <published>2019-11-27T07:50:04.000Z</published>
    <updated>2020-05-19T09:36:36.059Z</updated>
    
    <content type="html"><![CDATA[<ul><li>安装React Router</li><li>声明路由</li><li>创建向导</li><li>路由参数</li><li>处理not found路由</li><li>实现页面重定向</li><li>查询参数</li><li>路由提示符</li><li>内嵌路由</li><li>动画转换</li><li>lazy loading 路由</li></ul><h2><span id="安装路由">安装路由</span></h2><p>将React Router添加进项目中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>以及将TypeScript版本的React Router添加到devDependency的开发依赖中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @types/react-router-dom</span><br></pre></td></tr></table></figure><h2><span id="声明路由">声明路由</span></h2><p>在页面我们需要使用<code>BrowserRouter</code>和<code>Route</code>组件。<code>BrowserRouter</code>是top-level组件，会寻找下层的<code>Route</code>组件以决定不同的页面路径。</p><p>在引入<code>BrowserRouter</code>和<code>Route</code>之前，首先创建两个页面，</p><ol><li>创建一个<code>ProductsData.ts</code>文件，内容如下，</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> IProduct &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    description: <span class="built_in">string</span>;</span><br><span class="line">    price: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> products: IProduct[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="string">"A collection of navigational components that compose declaratively with your app"</span>,</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        name: <span class="string">"React Router"</span>,</span><br><span class="line">        price: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="string">"A library that helps manage state across your app"</span>,</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        name: <span class="string">"React Redux"</span>,</span><br><span class="line">        price: <span class="number">12</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        description: <span class="string">"A library that helps you interact with a GraphQL backend"</span>,</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        name: <span class="string">"React Apollo"</span>,</span><br><span class="line">        price: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="2"><li>创建另外一个<code>ProductsPage.tsx</code>文件导入这些数据，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; IProduct, products &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>因为需要在组件引用数据，创建一个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">products: IProduct[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建类组件，初始化状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class ProductsPage extends React.Component&lt;&#123;&#125;, IState&gt; &#123;</span><br><span class="line">    public constructor(props: &#123;&#125;) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            products: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ProductsPage;</span><br></pre></td></tr></table></figure><ol start="5"><li>实现<code>componentDidMount</code>生命周期方法，更新组件的State，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">this.setState(&#123; products &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>实现对应的<code>render</code>方法进行渲染，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">&lt;p&gt;Welcome to React Shop where you can get all your tools for ReactJS!&lt;/p&gt;</span><br><span class="line">&lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">&#123;this.state.products.map(product =&gt; (</span><br><span class="line">&lt;li key=&#123;product.id&#125; className=&quot;product-list-item&quot;&gt;</span><br><span class="line">&#123;product.name&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">))&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>对应CSS样式为，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-container</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.product-list</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.product-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>实现第二个页面，文件名为<code>AdminPage.tsx</code>，它是个无状态组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const AdminPage: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">            &lt;h1&gt;Admin Panel&lt;/h1&gt;</span><br><span class="line">            &lt;p&gt;You should only be here if you have logged in&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default AdminPage;</span><br></pre></td></tr></table></figure><ol start="9"><li>现在我们有两个页面了，需要为其定义两个路由。首先创建一个<code>Routes.tsx</code>的文件，包含下面的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; BrowserRouter as Router, Route &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import AdminPage from &quot;./AdminPage&quot;;</span><br><span class="line">import ProductsPage from &quot;./ProductsPage&quot;;</span><br></pre></td></tr></table></figure><ol start="10"><li>渲染路由页面，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const Routes: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Route path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">                &lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Routes;</span><br></pre></td></tr></table></figure><ol start="11"><li>最后一步，把<code>Routes</code>添加到根组件<code>index.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &apos;./index.css&apos;;</span><br><span class="line">import Routes from &quot;./Routes&quot;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Routes /&gt;, </span><br><span class="line">    document.getElementById(&apos;root&apos;) as HTMLElement);</span><br></pre></td></tr></table></figure><ol start="12"><li>目前页面上是什么也没有看到的，需要我们在浏览器直接输入地址，&quot;<code>/products</code>&quot;，或者访问另一个页面&quot;<code>/admin</code>&quot;,</li></ol><h2><span id="创建路由向导">创建路由向导</span></h2><p>非常幸运的是，React Router有一些组件提供了向导的功能。</p><h3><span id="using-the-link-component">Using the Link component</span></h3><p>使用<code>Link</code>组件实现向导功能，</p><ol><li>创建一个<code>Header.tsx</code>文件，包含以下内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import logo from &quot;./logo.svg&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>接着创建两个<code>Link</code>链接，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const Header: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;header className=&quot;header&quot;&gt;</span><br><span class="line">            &lt;img src=&#123;logo&#125; className=&quot;header-logo&quot; alt=&quot;logo&quot; /&gt;</span><br><span class="line">            &lt;h1 className=&quot;header-title&quot;&gt;React Shop&lt;/h1&gt;</span><br><span class="line">            &lt;nav&gt;</span><br><span class="line">                &lt;Link to=&quot;/products&quot; className=&quot;header-link&quot;&gt;Products&lt;/Link&gt;</span><br><span class="line">                &lt;Link to=&quot;/admin&quot; className=&quot;header-link&quot;&gt;Admin&lt;/Link&gt;</span><br><span class="line">            &lt;/nav&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Header;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加对应的CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#222</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-logo</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: header-logo-spin infinite <span class="number">20s</span> linear;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> header-logo-spin &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header-link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>把<code>Header</code>添加到我们的<code>Routes.tsx</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Header from &quot;./Header&quot;;</span><br></pre></td></tr></table></figure><ol start="5"><li>加入导航，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;Route path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure><h2><span id="使用navlink组件">使用NavLink组件</span></h2><p>React Router还提供了另外一个组件用于页面链接，称为<code>NavLink</code>。下面我们用<code>NavLink</code>重构一下原来的<code>Header</code>组件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; NavLink &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">import logo from &quot;./logo.svg&quot;;</span><br><span class="line"></span><br><span class="line">const Header: React.SFC = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;header className=&quot;header&quot;&gt;</span><br><span class="line">            &lt;img src=&#123;logo&#125; className=&quot;header-logo&quot; alt=&quot;logo&quot; /&gt;</span><br><span class="line">            &lt;h1 className=&quot;header-title&quot;&gt;React Shop&lt;/h1&gt;</span><br><span class="line">            &lt;nav&gt;</span><br><span class="line">                &lt;NavLink to=&quot;/products&quot; className=&quot;header-link&quot;&gt;Products&lt;/NavLink&gt;</span><br><span class="line">                &lt;NavLink to=&quot;/admin&quot; className=&quot;header-link&quot;&gt;Admin&lt;/NavLink&gt;</span><br><span class="line">            &lt;/nav&gt;</span><br><span class="line">        &lt;/header&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Header;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>NavLink</code>暴露了一个<code>activeClassName</code>属性</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;NavLink to=&quot;/products&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;Products&lt;/NavLink&gt;</span><br><span class="line">&lt;NavLink to=&quot;/admin&quot; className=&quot;header-link&quot; activeClassName=&quot;header-link-active&quot;&gt;Admin&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加对应CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.header-link-active</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">#ebebeb</span> solid <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，<code>NavLink</code>主要让我们导航带上样式功能。</p><h3><span id="路由参数">路由参数</span></h3><p>路由参数是路径变量的部分，用于决定目标组件的渲染逻辑。</p><p>我们需要添加另外一个页面，来展示商品的描述内容和价格，我们想要让页面导向使用&quot;<code>/products/{id}</code>&quot;路径，其中<code>id</code>对应商品ID。</p><ol><li>首先在原来的<code>Routes.tsx</code>添加路由路径和参数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对应的<code>ProductPage</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line">import &#123; RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; IProduct, products &#125; from &quot;./ProductsData&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>这里的关键点是，我们需要用到<code>RouteComponentProps</code>来访问路径上的参数<code>id</code>。另外需要定义类型别名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Props = RouteComponentProps&lt;&#123;id: string&#125;&gt;;</span><br></pre></td></tr></table></figure><ol start="4"><li>另外还需要有个状态记录商品被添加到购物篮中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">    product?: IProduct;</span><br><span class="line">    added: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>初始化该状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class ProductPage extends React.Component&lt;Props, IState&gt; &#123;</span><br><span class="line">    public constructor(props: Props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.setState(&#123; added: false &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default ProductPage;</span><br></pre></td></tr></table></figure><ol start="6"><li>当组件被加载进DOM，会通过路径参数上的id查找商品。<code>RouteComponentProps</code>给我们提供了一个<code>match</code>对象，以访问路径上的参数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public componentDidMount() &#123;</span><br><span class="line">        if (this.props.match.params.id) &#123;</span><br><span class="line">          const id: number = parseInt(this.props.match.params.id, 10);</span><br><span class="line">          const product = products.filter(p =&gt; p.id === id)[0];</span><br><span class="line">          this.setState(&#123; product &#125;);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记住，路径参数id是个字符串，需要使用<code>parseInt</code>进行转换，</p><ol start="7"><li>初始化好商品和组件状态后，我们进入到<code>render</code>函数，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">const product = this.state.product;</span><br><span class="line">return (</span><br><span class="line">  &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">&#123;product ? (</span><br><span class="line">  &lt;React.Fragment&gt;</span><br><span class="line">&lt;h1&gt;&#123;product.name&#125;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&#123;product.description&#125;&lt;/p&gt;</span><br><span class="line">&lt;p className=&quot;product-price&quot;&gt;</span><br><span class="line">&#123;new Intl.NumberFormat(&quot;en-US&quot;, &#123;</span><br><span class="line">currency: &quot;USD&quot;,</span><br><span class="line">style: &quot;currency&quot;</span><br><span class="line">&#125;).format(product.price)&#125;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&#123;!this.state.added &amp;&amp; (</span><br><span class="line">&lt;button onClick=&#123;this.handleAddClick&#125;&gt;Add to basket&lt;/button&gt;</span><br><span class="line">)&#125;</span><br><span class="line">  &lt;/React.Fragment&gt;</span><br><span class="line">) : (</span><br><span class="line">  &lt;p&gt;Product not found!&lt;/p&gt;</span><br><span class="line">)&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一些新东西，</p><ul><li>第一行创建了常量<code>product</code>；</li><li>三元运算符</li><li>使用了<code>React.Fragment</code>，类似实现单独一个parent的功能</li><li>使用了<code>Intl.NumberFormat</code>装换货币符号</li></ul><ol start="8"><li>另外还需要添加<code>handleAddClick</code>方法处理按钮事件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleAddClick = () =&gt; &#123;</span><br><span class="line">this.setState(&#123; added: true &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="9"><li>现在，将我们实现好的<code>ProductPage</code>组件，导入到<code>Routes.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ProductPage from &quot;./ProductPage&quot;;</span><br></pre></td></tr></table></figure><ol start="10"><li><p>直接浏览器键入&quot;<code>/products/2</code>“查看新路由页面，但有个问题是”<code>/products</code>“和”<code>/products/:id</code>&quot;都被渲染了</p></li><li><p>为了解决这个问题，修改为，</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="12"><li>进一步，我们需要为每个条目添加链接，回到原来的<code>ProductsPage.tsx</code>组件，修改相应部分内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Link &#125; from &quot;react-router-dom&quot;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">public render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          Welcome to React Shop where you can get all your tools for ReactJS!</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">          &#123;this.state.products.map(product =&gt; (</span><br><span class="line">            &lt;li key=&#123;product.id&#125; className=&quot;product-list-item&quot;&gt;</span><br><span class="line">              &lt;Link to=&#123;`/products/$&#123;product.id&#125;`&#125;&gt;&#123;product.name&#125;&lt;/Link&gt;</span><br><span class="line">              &#123;product.name&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          ))&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="13"><li>补充CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.product-list-item</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="handling-not-found-routes">Handling not found routes</span></h3><p>如果用户输入的路径不存在怎么处理？例如，我们尝试键入&quot;/tools&quot;，但路由中没有找到任何匹配的路由，我们希望提示该路径不存在。</p><ol><li>首先创建一个新的文件<code>NotFoundPage.tsx</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const NotFoundPage: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">      &lt;h1&gt;Sorry, this page cannot be found&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default NotFoundPage;</span><br></pre></td></tr></table></figure><ol start="2"><li>在路由组件中，导入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import NotFoundPage from &quot;./NotFoundPage&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加到路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">&lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">&lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Router&gt;</span><br></pre></td></tr></table></figure><p>但其他页面也一同渲染了，我们希望如果没有找到对应路由页面，仅渲染<code>NotFoundPage</code>，这是需要用到<code>Switch</code>组件。</p><ol start="4"><li>首先导入<code>Swith</code>组件到<code>Routes.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserRouter as Router, Route, Switch &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>Route</code>包一层<code>Switch</code>组件即可，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><p><code>Switch</code>组件仅渲染第一个匹配到的<code>Route</code>组件。在我们案例中，当找不到页面是，第一个匹配到的就是<code>NotFoundPage</code>，这样就解决了我们的问题。</p><h2><span id="实现页面重定向">实现页面重定向</span></h2><p>页面重定向使用了<code>Redirect</code>组件实现</p><h3><span id="simple-redirect">Simple redirect</span></h3><p>如果我们访问<code>/</code>路径，我们注意到它是个not found页面。我们希望当路径是<code>/</code>时，重定向到<code>/products</code>。</p><ol><li>首先，需要在<code>Routes.tsx</code>导入<code>Redirect</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; BrowserRouter as Router, Redirect, Route, Switch &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后使用<code>Redirect</code>组件进行重定向，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Redirect exact=&#123;true&#125; from=&quot;/&quot; to=&quot;/products&quot; /&gt;</span><br><span class="line">  &lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin&quot; component=&#123;AdminPage&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><h3><span id="conditional-redirect">Conditional redirect</span></h3><p>另外我们可以用<code>Redirect</code>组件对为授权用户进行保护访问。例如，我们的shop例子中，我们仅确保登录用户可以访问我们的<code>Admin</code>页面。</p><ol><li>创建一个<code>LoginPage</code>路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/login&quot; component=&#123;LoginPage&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加一个登录页<code>LoginPage.tsx</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const LoginPage: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">      &lt;h1&gt;Login&lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;You need to login... &lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default LoginPage;</span><br></pre></td></tr></table></figure><ol start="3"><li>回到原来的<code>Routes.tsx</code>导入<code>LoginPage</code>:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import LoginPage from &quot;./LoginPage&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>在重定向到&quot;<code>admin</code>&quot;之前，我们需要在<code>Routes.tsx</code>中添加一些状态值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Routes: React.SFC = () =&gt; &#123;</span><br><span class="line">const [loggedIn, setLoggedIn] = React.useState(false);</span><br><span class="line">return (</span><br><span class="line">&lt;Router&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/Router&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="5"><li>最后一步是添加条件判断，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">&#123;loggedIn ? &lt;AdminPage /&gt; : &lt;Redirect to=&quot;/login&quot; /&gt;&#125;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>如果我们将<code>loggedIn</code>状态修改为true，我们就可以再次访问我们的Admin页面了，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [loggedIn, setLoggedIn] = React.useState(true);</span><br></pre></td></tr></table></figure><h2><span id="query-parameters">Query parameters</span></h2><p>查询参数是URL地址的一部分，例如&quot;<code>/products?search=redux</code>&quot;。让我们实现一个商品查询功能。</p><ol><li>在原来的<code>ProductsPage.tsx</code>中，添加一个状态变量<code>search</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">  products: IProduct[];</span><br><span class="line">  search: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>我们需要用到<code>RouteComponentProps</code>作为属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class ProductsPage extends React.Component&lt;RouteComponentProps, IState&gt; &#123;</span><br><span class="line">  public constructor(props: RouteComponentProps) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      products: [],</span><br><span class="line">      search: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="4"><li>我们需要在<code>componentDidMount</code>确定好<code>search</code>的值，因此，实现<code>getDerivedStateFromProps</code>方法获取URL参数，并更新state，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static getDerivedStateFromProps(</span><br><span class="line">    props: RouteComponentProps,</span><br><span class="line">    state: IState</span><br><span class="line">  ) &#123;</span><br><span class="line">    const searchParams = new URLSearchParams(props.location.search);</span><br><span class="line">    const search = searchParams.get(&quot;search&quot;) || &quot;&quot;;</span><br><span class="line">    return &#123;</span><br><span class="line">      products: state.products,</span><br><span class="line">      search</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>不幸的是，<code>URLsearchParams</code>没有在所有浏览器中实现，所以我们需要用到<code>url-search-params-polyfill</code>，</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D url-search-params-polyfill</span><br></pre></td></tr></table></figure><ol start="6"><li>导入到<code>ProductPages.tsx</code>中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;url-search-params-polyfill&quot;;</span><br></pre></td></tr></table></figure><ol start="7"><li>在渲染部分使用<code>search</code>状态，并包装一个<code>if</code>语句，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul className=&quot;product-list&quot;&gt;</span><br><span class="line">  &#123;this.state.products.map(product =&gt; &#123;</span><br><span class="line">  if(</span><br><span class="line">  !this.state.search || </span><br><span class="line">  (this.state.search &amp;&amp;</span><br><span class="line">product.name.toLowerCase().indexOf(this.state.search.toLowerCase()) &gt; -1)</span><br><span class="line">  ) &#123;</span><br><span class="line">  return (</span><br><span class="line">&lt;li key=&#123;product.id&#125; className=&quot;product-list-item&quot;&gt;</span><br><span class="line">  &lt;Link to=&#123;`/products/$&#123;product.id&#125;`&#125;&gt;&#123;product.name&#125;&lt;/Link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">  );</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">  return null;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>替换为搜索框搜索的方式… 我们需要，</p><ol start="8"><li>在<code>Header.tsx</code>文件中创建state，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const [search, setSearch] = React.useState(&quot;&quot;);</span><br></pre></td></tr></table></figure><ol start="9"><li>另外需要获取搜索参数，需要导入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NavLink, RouteComponentProps, withRouter&#125; from &quot;reactrouter-</span><br><span class="line">dom&quot;;</span><br><span class="line">import &quot;url-search-params-polyfill&quot;;</span><br></pre></td></tr></table></figure><ol start="10"><li>添加<code>props</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const Header: React.SFC&lt;RouteComponentProps&gt; = props =&gt; &#123; ... &#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>组件首次渲染时，从路径参数获取值并设置<code>search</code>的状态，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const [search, setSearch] = React.useState(&quot;&quot;);</span><br><span class="line">React.useEffect(() =&gt; &#123;</span><br><span class="line">const searchParams = new</span><br><span class="line">URLSearchParams(props.location.search);</span><br><span class="line">setSearch(searchParams.get(&quot;search&quot;) || &quot;&quot;);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><ol start="12"><li>将<code>search</code>添加到<code>redner</code>方法中，让用户进行输入，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">... </span><br><span class="line">&lt;header className=&quot;header&quot;&gt;</span><br><span class="line">&lt;div className=&quot;search-container&quot;&gt;</span><br><span class="line">&lt;input </span><br><span class="line">type=&quot;search&quot;</span><br><span class="line">placeholder=&quot;search&quot;</span><br><span class="line">value=&#123;search&#125;</span><br><span class="line">onChange=&#123;handleSearchChange&#125;</span><br><span class="line">onKeyDown=&#123;handleSearchKeydown&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="13"><li>添加<code>search-container</code>CSS样式，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search-container</span> &#123;</span><br><span class="line"><span class="attribute">text-align</span>: right;</span><br><span class="line"><span class="attribute">margin-bottom</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="14"><li>回到原来的<code>Header.tsx</code>，添加对应的事件处理方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const handleSearchChange = (e:</span><br><span class="line">React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">setSearch(e.currentTarget.value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const handleSearchKeydown = (e:</span><br><span class="line">React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">if (e.key === &quot;Enter&quot;) &#123;</span><br><span class="line">props.history.push(`/products?search=$&#123;search&#125;`);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="15"><li>另外我们需要用<code>withRouter</code>包装<code>Header</code>暴露接口，以使<code>this.props.history</code>可以生效，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default withRouter(Hader);</span><br></pre></td></tr></table></figure><h3><span id="route-prompts">Route prompts</span></h3><p><code>react-router-dom</code>组件中还有一个<code>Prompt</code>组件，顾名思义就是弹出框…</p><ol><li>我们希望用户离开商品页面时，如果没有购物，则弹出提示，首先，在<code>ProductPage.tsx</code>中导入<code>Prompt</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Prompt, RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>添加对应触发条件即可，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;Prompt when=&#123;!this.state.added&#125; message=&#123;this.navAwayMessage&#125; /&gt;</span><br><span class="line">  ...</span><br><span class="line">    private navAwayMessage = () =&gt; &quot;Are you sure you leave without buying this product?&quot;;</span><br></pre></td></tr></table></figure><h2><span id="nested-routes">Nested routes</span></h2><p>内嵌路由就是在某一个一级URL下渲染多个组件。</p><p>譬如我们想要创建一个3层渲染，</p><ul><li>第一层包含<code>Users</code>和<code>Products</code>的链接</li><li><code>Users</code>层又包含所有用户</li><li>点击每个用户可以看到具体信息</li></ul><ol><li>首先修改<code>AdminPage.tsx</code>，导入向导组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NavLink, Route, RouteComponentProps &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ul><li>我们将会使用<code>NavLink</code>组件渲染菜单</li><li><code>Route</code>用于内嵌路由</li><li><code>RouteComponentProps</code>类型将会获取URL的参数id</li></ul><ol start="2"><li>将<code>p</code>标签内容替换为下面…</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Admin Panel&lt;/h1&gt;</span><br><span class="line">  &lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">&lt;li key=&quot;users&quot; &gt;</span><br><span class="line">&lt;NavLink to=&#123;`/admin/user`&#125; activeClassName=&quot;admin-link-active&quot;&gt;Users&lt;/NavLink&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li key=&quot;products&quot;&gt;</span><br><span class="line">&lt;NavLink to=&#123;`/admin/products`&#125; activeClassName=&quot;admin-link-active&quot;&gt;Products&lt;/NavLink&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加对应样式…</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.admin-sections &#123;</span><br><span class="line">  list-style: none;</span><br><span class="line">  margin: 0px 0px 20px 0px;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.admin-sections li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.admin-sections li a &#123;</span><br><span class="line">  color: #222;</span><br><span class="line">  text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.admin-link-active &#123;</span><br><span class="line">  border-bottom: #6f6e6e solid 2px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>回到原来的<code>AdminPage.tsx</code>，添加两个路由组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&quot;page-container&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Admin Panel&lt;/h1&gt;</span><br><span class="line">  &lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin/users/:id&quot; component=&#123;AdminUsers&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin/products&quot; component=&#123;AdminProducts&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建这两个路由组件，在<code>AdminPage.tsx</code>内添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const AdminProducts: React.SFC = () =&gt; &#123;</span><br><span class="line">  return &lt;div&gt;Some options to administer products&lt;/div&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>接下来的<code>AdminUsers</code>组件可能会复杂一些。首先定义一种数据结构，在<code>AdminPage.tsx</code>的组件<code>AdminProducts</code>下，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface IUser &#123;</span><br><span class="line">  id: number;</span><br><span class="line">  name: string;</span><br><span class="line">  isAdmin: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const adminUsersData: IUser[] = [</span><br><span class="line">  &#123; id: 1, name: &quot;Fred&quot;, isAdmin: true &#125;,</span><br><span class="line">  &#123; id: 2, name: &quot;Bob&quot;, isAdmin: false &#125;,</span><br><span class="line">  &#123; id: 3, name: &quot;Jane&quot;, isAdmin: true &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这样一来就有3个用户了。</p><ol start="7"><li>接下来实现<code>AdminUsers</code>组件的内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const AdminUsers: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">        &#123;adminUsersData.map(user =&gt; (</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;NavLink</span><br><span class="line">              to=&#123;`/admin/users/$&#123;user.id&#125;`&#125;</span><br><span class="line">              activeClassName=&quot;admin-link-active&quot;</span><br><span class="line">            &gt;</span><br><span class="line">              &#123;user.name&#125;</span><br><span class="line">            &lt;/NavLink&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该组件会渲染每个用户名的链接。它是一个内嵌路径，</p><ol start="8"><li>另外，还需要定义另外一个路由展示用户详细信息。添加一个路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;ul className=&quot;admin-sections&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;Route path=&quot;/admin/users/:id&quot; component=&#123;AdminUser&#125; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="9"><li>这个<code>AdminUser</code>也还没有实现，因此，在<code>AdminUsers</code>组件下面添加上，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const AdminUser: React.SFC&lt;RouteComponentProps&lt;&#123; id: string &#125;&gt;&gt; = props =&gt; &#123;</span><br><span class="line">  return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们用到了<code>RouteComponentProps</code>通过<code>id</code>来获取可用的属性。</p><ol start="10"><li>然后通过<code>id</code>获取定义的<code>adminUsersData</code>中的记录，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const AdminUser: React.SFC&lt;RouteComponentProps&lt;&#123; id: string &#125;&gt;&gt; = props =&gt; &#123;</span><br><span class="line">  let user: IUser;</span><br><span class="line">  if (props.match.params.id) &#123;</span><br><span class="line">    const id: number = parseInt(props.match.params.id, 10);</span><br><span class="line">    user = adminUsersData.filter(u =&gt; u.id === id)[0];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="11"><li>有了<code>user</code>对象后，渲染其内容，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const AdminUser: React.SFC&lt;RouteComponentProps&lt;&#123; id: string &#125;&gt;&gt; = props =&gt; &#123;</span><br><span class="line">  let user: IUser;</span><br><span class="line">  if (props.match.params.id) &#123;</span><br><span class="line">    const id: number = parseInt(props.match.params.id, 10);</span><br><span class="line">    user = adminUsersData.filter(u =&gt; u.id === id)[0];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;b&gt;Id: &lt;/b&gt;</span><br><span class="line">        &lt;span&gt;&#123;user.id.toString()&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;b&gt;Is Admin: &lt;/b&gt;</span><br><span class="line">        &lt;span&gt;&#123;user.isAdmin.toString()&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="12"><li>再次运行，进入到<code>Admin</code>页面，点击<code>Products</code>… 点击<code>Users</code>…</li></ol><p>因此，如果需要实现内嵌路由，需要用到<code>NavLink</code>或<code>Link</code>组件，以及使用<code>Route</code>组件渲染这些内容。</p><h2><span id="animated-transitions">Animated transitions</span></h2><p>本小节将给不同的导航添加动画。我们会使用<code>react-transition-group</code>中的<code>TransitionGroup</code>和<code>CSSTransition</code>组件，步骤如下，</p><ol><li>首先安装对应这些包，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install react-transition-group</span><br><span class="line">npm install @types/react-transition-group --save-dev</span><br></pre></td></tr></table></figure><p><code>TransitionGroup</code> 会持续跟踪它内部本地state的子组，并计算子组进入和退出。<code>CSSTransition</code>则在<code>TransitionGroup</code>子组离开或退出时，提供CSS类来表示一种状态。</p><p>因此，<code>TransitionGroup</code>和<code>CSSTransition</code>可以包装我们的路由，并调用CSS类，</p><ol start="2"><li>首先我们需要在我们的<code>Routes.tsx</code>中导入这些组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; CSSTransition, TransitionGroup &#125; from &quot;react-transition-group&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们还需要路由属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Redirect, Route, RouteComponentProps, Switch &#125; from &quot;react-router-dom&quot;;</span><br></pre></td></tr></table></figure><ol start="4"><li>作用我们的<code>Route</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const Routes: React.SFC&lt;RouteComponentProps&gt; = props =&gt; &#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="5"><li>用<code>CSSTransition</code>和<code>TransitionGroup</code>来包装我们的路由，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;TransitionGroup&gt;</span><br><span class="line">  &lt;CSSTransition</span><br><span class="line">key=&#123;props.location.key&#125;</span><br><span class="line">timeout=&#123;500&#125;</span><br><span class="line">classNames=&quot;animate&quot;</span><br><span class="line">  &gt;</span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Redirect exact=&#123;true&#125; from=&quot;/&quot; to=&quot;/products&quot; /&gt;</span><br><span class="line">  &lt;Route exact=&#123;true&#125; path=&quot;/products&quot; component=&#123;ProductsPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/products/:id&quot; component=&#123;ProductPage&#125; /&gt;</span><br><span class="line">  &lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">&#123;loggedIn ? &lt;AdminPage /&gt; : &lt;Redirect to=&quot;/login&quot; /&gt;&#125;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">  &lt;Route path=&quot;/login&quot; component=&#123;LoginPage&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br><span class="line">  &lt;/CSSTransition&gt;</span><br><span class="line">&lt;/TransitionGroup&gt;</span><br></pre></td></tr></table></figure><p><code>TransitionGroup</code>要求子组要有一个唯一的<code>key</code>决定退出和进入的动作。因此我们在<code>CSSTransition</code>上指定<code>key</code>属性为<code>RouteComponentProps</code>上的<code>location.key</code>。我们设置了transtion的timeout属性为半秒，以及它的样式类。</p><ol start="6"><li>接下来，我们需要添加这些CSS类到<code>index.css</code>中，</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.animate-enter</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animate-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">450ms</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animate-exit</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当它的<code>key</code>改变时，<code>CSSTransition</code>会调用这些CSS样式。</p><ol start="7"><li>因为我们不能在<code>Router</code>组件外部使用高阶组件<code>withRouter</code>。要解决这个问题，可以添加一个新的组件<code>RoutesWrap</code>进行包装，在原来的<code>Routes.tsx</code>中添加，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const RoutesWrap: React.SFC = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Route component=&#123;Routes&#125; /&gt;</span><br><span class="line">    &lt;/Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Routes extends React.Component&lt;RouteComponentProps,</span><br><span class="line">IState&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">export default RoutesWrap;</span><br></pre></td></tr></table></figure><ol start="8"><li>在<code>Routes</code>组件中移除<code>Router</code>，让<code>div</code>标签作为它的根。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Header /&gt;</span><br><span class="line">&lt;TransitionGroup&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/TransitionGroup&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次执行程序，可以看到进入不同页面是有一种渐退效果。</p><h2><span id="lazy-loading-routes">Lazy loading routes</span></h2><p>截至目前为止，所有JavaScript会在app第一次加载时全部加载。包括<code>Admin</code>这些我们不需要的页面。这一点会造成一些资源浪费。所以需要用到一种称为“lazy loading”的组件。</p><ol><li>首先我们需要导入<code>Suspense</code>这个组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Suspense &#125; from &quot;react&quot;;</span><br></pre></td></tr></table></figure><ol start="2"><li>接着以另一种方式导入这个<code>AdminPage</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ADminPage = React.lazy(() =&gt; import(&quot;./AdminPage&quot;));</span><br></pre></td></tr></table></figure><p>我们使用了React的一个函数<code>lazy</code>，它接收一个函数并返回一个动态导入，换句话说就是指派了一个<code>AdminPage</code>组件变量。</p><ol start="3"><li>上面步骤会获得一个lint错误，<strong>A dynamic import call in ES5/ES3 requires the ‘Promise’ constructor. Make sure you have a declaration for the ‘Promise’ constructor or include ‘ES2015’ in your <code>--lib</code> option.</strong> 需要在<code>tsconfig.json</code>中添加<code>lib</code>选项。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">  <span class="string">"lib"</span>: [<span class="string">"es6"</span>, <span class="string">"dom"</span>],</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>接下来的内容是，使用<code>Suspense</code>组件包装这个<code>AdminPage</code>组件，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&quot;/admin&quot;&gt;</span><br><span class="line">&#123;loggedIn ? (</span><br><span class="line">&lt;Suspense fallback=&#123;&lt;div className=&quot;pagecontainer&quot;&gt;</span><br><span class="line">Loading...&lt;/div&gt;&#125;&gt;</span><br><span class="line">&lt;AdminPage /&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">) : (</span><br><span class="line">&lt;Redirect to=&quot;/login&quot; /&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure><p><code>Suspense</code>组件会在<code>AdminPage</code>被加载时，展示这个<code>div</code>部分内容。有点说明的是，组件加载非常快，可能实际浏览器看了没效果，需要进入<strong>Network</strong>选择<strong>Slow 3G</strong>网络环境模式。刷新页面便可看到出现Loading…</p><h2><span id="总结">总结</span></h2><p>React Router给我们一套全面的组件管理导航页。最先学习的是底层组件<code>Router</code>，它会查找下游的<code>Route</code>组件并根据路径进行渲染。</p><p><code>Link</code>组件让我们在应用中链接到不同的页面。我们学习了<code>NavLinke</code>和<code>Link</code>相似，但提供了对不同激活路径的样式功能。因此<code>NavLink</code>最大好处用在侧边栏或标头横幅，<code>Link</code>用在内嵌页面跳转。</p><p><code>RouteComponentProps</code>是一种泛型类型，它提供了访问路径参数的能力。我们还发现了React Router并不能解析路径参数，但可以使用本地的JavaScript的<code>URLSearchParams</code>实现。</p><p><code>Redirect</code>组件提供了路径重定向的功能。这非常适用于对权限页面的控制。</p><p><code>Prompt</code>组件提供了弹窗的能力。</p><p>我们还学习了通过使用<code>TransitionGroup</code>和<code>CSSTransition</code>组件，通过包装我们的<code>Route</code>组件实现一种渐退的效果。</p><p>另外我们还学习了使用<code>Suspense</code>组件配合React的<code>lazy</code>函数，对不同的页面实现延迟加载，帮助我们提升应用的性能效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;安装React Router&lt;/li&gt;
&lt;li&gt;声明路由&lt;/li&gt;
&lt;li&gt;创建向导&lt;/li&gt;
&lt;li&gt;路由参数&lt;/li&gt;
&lt;li&gt;处理not found路由&lt;/li&gt;
&lt;li&gt;实现页面重定向&lt;/li&gt;
&lt;li&gt;查询参数&lt;/li&gt;
&lt;li&gt;路由提示符&lt;/li&gt;

      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第三章 开始在React中使用TS</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_3_Getting_Started_with_React_and_TypeScript/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_3_Getting_Started_with_React_and_TypeScript/</id>
    <published>2019-11-27T07:50:03.000Z</published>
    <updated>2020-05-19T09:33:42.144Z</updated>
    
    <content type="html"><![CDATA[<ul><li>创建一个React和TypeScript项目</li><li>创建一个类组件</li><li>处理类组件的事件</li><li>类组件的状态</li><li>类组件声明周期方法</li><li>创建一个函数组件</li></ul><h2><span id="创建一个react和typescript项目">创建一个React和TypeScript项目</span></h2><h3><span id="使用create-react-app">使用<code>create-react-app</code></span></h3><p><code>create-eract-app</code>是一个npm包的命令行工具，用于快速创建React和TypeScript应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-react-ts-app --typescript</span><br></pre></td></tr></table></figure><p>项目创建后，添加TSLint，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-react-ts-app</span><br><span class="line">npm install tslint tslint-react tslint-config-prettier --save-dev</span><br></pre></td></tr></table></figure><p>添加文件<code>tslint.json</code>，包含一些规则，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"extends"</span>: [<span class="string">"tslint:recommended"</span>, <span class="string">"tslint-react"</span>, <span class="string">"tslintconfig-prettier"</span>],</span><br><span class="line"><span class="attr">"rules"</span>: &#123;</span><br><span class="line"><span class="attr">"ordered-imports"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"object-literal-sort-keys"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"no-debugger"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"no-console"</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line"><span class="attr">"exclude"</span>: [</span><br><span class="line"><span class="string">"config/**/*.js"</span>,</span><br><span class="line"><span class="string">"node_modules/**/*.ts"</span>,</span><br><span class="line"><span class="string">"coverage/lcov-report/*.js"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h3><span id="创建一个简单的react-component">创建一个简单的React component</span></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &lt;h1&gt; My React App!&lt;<span class="regexp">/h1&gt;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>React.SFC</code>是一个TypeScript的React类型，它不包含任何内部状态。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">const</span> App: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &lt;h1&gt;My React App!&lt;<span class="regexp">/h1&gt;;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>) <span class="keyword">as</span> HTMLElement);</span><br></pre></td></tr></table></figure><h3><span id="添加webpack">添加webpack</span></h3><p>(略)</p><h3><span id="项目目录结构">项目目录结构</span></h3><p>(略)</p><h3><span id="创建一个基本的类组件">创建一个基本的类组件</span></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Confirm <span class="keyword">extends</span> React.Component &#123;</span><br><span class="line"><span class="keyword">public</span> render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Confirm;</span><br></pre></td></tr></table></figure><p><code>render</code>方法决定了该组件需要展示的内容。我们用JSX来定义需要展示的内容。简单来说，JSX就是HTML和JavaScript的混合。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=<span class="string">"confirm-wrapper confirm-visible"</span>&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-container"</span>&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;This is where our title should go&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-content-container"</span>&gt;</span><br><span class="line">&lt;p&gt;This is where our content should go&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div className=<span class="string">"confirm-buttons-container"</span>&gt;</span><br><span class="line">&lt;button className=<span class="string">"confirm-cancel"</span>&gt;Cancel&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button className="confirm-ok"&gt;Okay&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>怎么使用<code>Confirm</code>组件？在<code>App.tsx</code>中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Confirm from &apos;./Confirm&apos;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&lt;div className=&quot;App&quot;&gt;</span><br><span class="line">&lt;header className=&quot;App-header&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/header&gt;</span><br><span class="line">&lt;Confirm /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2><span id="jsx">JSX</span></h2><p>JSX看起来很像HTML，它不是有效的JavaScript，我们需要一个处理步骤将其转换为JavaScript。</p><p>打开浏览器，进入<a href="https://babeljs.io/repl" target="_blank" rel="noopener">https://babeljs.io/repl</a>，输入下面内容，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is where our title should go<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右侧会获得编译之后的JS文件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line"><span class="string">"This is where our title should go"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>React.createElement</code>有三个参数，</p><ul><li>元素类型，可以是一个HTML标签，一个React组件类型，或一个React 代码段</li><li>属性对象</li><li>子类或内容</li></ul><p>例如，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;This is where our title should go&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>最终会被编译为，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line"><span class="string">"div"</span>,</span><br><span class="line">&#123; <span class="attr">className</span>: <span class="string">"confirm-title-container"</span> &#125;,</span><br><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line"><span class="string">"This is where our title should go"</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>现在看是有意义的，但目前仅由HTML构筑。加点JavaScript代码看看，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123;</span><br><span class="line">title: <span class="string">"React and TypeScript"</span></span><br><span class="line">&#125;;</span><br><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;&#123;props.title&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>它会被编译为，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> props = &#123;</span><br><span class="line">title: <span class="string">"React and TypeScript"</span></span><br><span class="line">&#125;;</span><br><span class="line">React.createElement(</span><br><span class="line"><span class="string">"div"</span>,</span><br><span class="line">&#123; <span class="attr">className</span>: <span class="string">"confirm-title-container"</span> &#125;,</span><br><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line">props.title</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>更进一步，让字面量<code>props</code>为空，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">&lt;div className=<span class="string">"confirm-title-container"</span>&gt;</span><br><span class="line">&lt;span&gt;&#123;props.title ? props.title : <span class="string">"React and TypeScript"</span>&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>内嵌调用原封不变，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line"><span class="string">"span"</span>,</span><br><span class="line"><span class="literal">null</span>,</span><br><span class="line">props.title ? props.title : <span class="string">"React and TypeScript"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>因此，为什么我们使用<code>className</code>属性而不是<code>class</code>？现在知道JSX会编译为JavaScript，由于<code>class</code>是JavaScript的关键字，在JSX包含<code>class</code>属性会发生冲突。因此React使用<code>className</code>代替CSS引用。</p></blockquote><h2><span id="component-props">Component props</span></h2><p>目前，组件<code>Confirm</code>的标题和内容是硬编码的。需要将这些引用属性以组件形式接收</p><ol><li>首先，我们需要为我们的props定义个TypeScript类型。我们将会用到一个接口，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">title: string;</span><br><span class="line">content: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将该<code>IProps</code>类型以尖括号引入定义中，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Confirm extends React.Component&lt;IProps&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>React.Component</code>被称为泛型类。泛型类允许类型允许在内部传递使用。在我们的例子中，我们传递了<code>IProps</code>接口。</p></blockquote><ol start="3"><li>然后我们的类内使用<code>this.props.propName</code>。在我们的JSX文件中，可以直接引用这些属性，取代硬编码的方式：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;div className=&quot;confirm-title-container&quot;&gt;</span><br><span class="line">&lt;span&gt;&#123;this.props.title&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div className=&quot;confirm-content-container&quot;&gt;</span><br><span class="line">&lt;p&gt;&#123;this.props.content&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>目前编译不过，因为<code>Confirm</code>组件现在要求传入<code>title</code>和<code>content</code>属性，</p><p>修改为，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">title=&quot;React and TypeScript&quot;</span><br><span class="line">content=&quot;Are you sure you want to learn React and TypeScript?&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3><span id="optional-props">Optional props</span></h3><p>接口Props的内容可以定义为可选属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">title: string;</span><br><span class="line">content: string;</span><br><span class="line">cancelCaption?: string;</span><br><span class="line">okCaption?: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="default-prop-values">Default prop values</span></h3><blockquote><p>当组件被初始化，可以被组件添加默认props属性值。它通过一个称为<code>defaultProps</code>的静态对象字面量实现。</p></blockquote><ol><li>创建默认的<code>cancelCaption</code>和<code>okCaption</code>，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Confirm extends React.Component&lt;IProps&gt; &#123;</span><br><span class="line">public static defaultProps = &#123;</span><br><span class="line">cancelCaption: &quot;Cancel&quot;,</span><br><span class="line">okCaption: &quot;Okay&quot;</span><br><span class="line">&#125;;</span><br><span class="line">public render() &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要覆盖默认属性，补充具体属性值即可，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">title=&quot;React and TypeScript&quot;</span><br><span class="line">content=&quot;Are you sure you want to learn React and TypeScript?&quot;</span><br><span class="line">cancelCaption=&quot;No way&quot;</span><br><span class="line">okCaption=&quot;Yes please!&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>带有默认值的可选属性便于组件使用，这样大部分通用的配置可以自动装配起来，不用逐个指定。</p></blockquote><h2><span id="处理类组件事件">处理类组件事件</span></h2><p>事件存在于多数编程语言中。以允许我们执行特定逻辑。</p><h3><span id="基础事件句柄">基础事件句柄</span></h3><blockquote><p>所有的本地JavaScript事件都可以在JSX中处理。JSX允许我们通过属性来调用这些事件函数。本地事件名会被带上前缀<code>on</code>以峰驼方式传递。因此，例如在JS中的属性事件是<code>click</code>，在JSX则对应<code>onClick</code>。</p></blockquote><p><strong>要查看所有可用事件列表，可以前往<code>node_modules/@types/react</code>文件夹的<code>index.d.ts</code>文件</strong></p><ol><li>首先是我们需要处理按钮上的<code>click</code>事件，对应上为，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button className=&quot;confirm-ok&quot; onClick=&#123;this.handleOkClick&#125;&gt;...&lt;/button&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建这个<code>handleOkClick</code>方法，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkClick() &#123;</span><br><span class="line">console.log(&quot;Ok clicked&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="the-this-problem">The this problem</span></h3><p>在事件的处理上承受来自JavaScript的经典<code>this</code>问题。我们在事件处理上获取不到引用，譬如，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkClick() &#123;</span><br><span class="line">console.log(&quot;Ok clicked&quot;, this.props):</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击按钮，会出现undefined！！原因是<code>this</code>代表的是当前这个事件，而不是我们的类！</p><p>一种解决方法是，将<code>handleOkClick</code>方法改为箭头函数(arrow function)。</p><blockquote><p>arrow function相当于一个表达式。它不会创建自身的<code>this</code>——这样解决了<code>this</code>的问题。</p></blockquote><p>我们把原来的方法改一改，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkClick = () =&gt; &#123;</span><br><span class="line">console.log(&quot;Ok clicked&quot;, this.props);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在再次点击按钮，程序正常了。</p><h3><span id="function-props">Function props</span></h3><p>有时候需要在组件消费者(component)中传递事件处理逻辑。</p><ol><li>修改对应的IProps接口，对应函数类型属性，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface IProps &#123;</span><br><span class="line">title: string;</span><br><span class="line">content: string;</span><br><span class="line">cancelCaption?: string;</span><br><span class="line">okCaption?: string;</span><br><span class="line">onOkClick: () =&gt; void;</span><br><span class="line">onCancelClick: () =&gt; void;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在消费方引用函数属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">...</span><br><span class="line">onCancelClick=&#123;this.handleCancelConfirmClick&#125;</span><br><span class="line">onOkClick=&#123;this.handleOkConfirmClick&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3><span id="类组件状态">类组件状态</span></h3><p>状态是一个对象，它决定了组件的行为和渲染。我们需要在我们的app中引入状态，以管理我们Confirm窗口打开或关闭。</p><p>State的定义和Props类型，首先我们需要创建一个接口，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface IState &#123;</span><br><span class="line">confirmOpen: boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着传递<code>React.Component</code>的第二个泛型参数中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component&lt;&#123;&#125;, IState&gt;</span><br></pre></td></tr></table></figure><h3><span id="initializing-the-state">Initializing the state</span></h3><p>定义的状态需要被初始化，初始化动作在构造函数中实现，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constructor(props: &#123;&#125;) &#123;</span><br><span class="line">super(props);</span><br><span class="line">this.state = &#123;</span><br><span class="line">confirmOpen: true,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>state被存放在组件类内的一个私有属性中。以及可以在组件内被使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Confirm</span><br><span class="line">open=&#123;this.state.confirmOPen&#125;</span><br><span class="line">...</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3><span id="changing-state">Changing state</span></h3><p>状态的改变不能直接访问控制，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkConfirmClick = () =&gt; &#123;</span><br><span class="line">this.state.confirmOpen = false;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>它会出现错误消息说状态是read-only!的。我们需要使用<code>setState</code>方法来改变状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private handleOkConfirmClick = () =&gt; &#123;</span><br><span class="line">this.setState(&#123; confirmOpen: false &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们仅能在构造函数中初始化State，其它类组件任何地方都不能初始化状态。以及，状态的更改，仅能在该组件内调用<code>setState</code>实现。</p><h2><span id="class-component-life-cycle-methods">Class component life cycle methods</span></h2><p>生命周期允许我们在特定点做某些处理。</p><h3><span id="componentdidmount">componentDidMount</span></h3><p>当一个组件被插入到DOM中时，<code>componentDidMount</code>被调用。下面是一些该方法常见的用例：</p><ul><li>调用web service以获取某些数据</li><li>添加事件监听</li><li>初始化计时</li><li>初始化第三方库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private timer: number = 0;</span><br><span class="line"></span><br><span class="line">public componentDidMount() &#123;</span><br><span class="line">this.timer = window.setInterval(() =&gt; this.handleTimerTick(), 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="componentwillunmount">componentWillUnmount</span></h3><p>当组件从DOM内被移除时触发<code>componentWillUnmount</code>，下面是常见的用例，</p><ul><li>移除事件监听器</li><li>取消激活的网络请求</li><li>移除计时器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public componentWillUnmount() &#123;</span><br><span class="line">clearInterval(this.timer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="getderivedstatefromprops">getDerivedStateFromProps</span></h3><p>每次组件被渲染时，触发<code>getDerivedStateFromProps</code>。它是一个组件的静态方法，返回改变的状态或返回null。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static getDerivedStateFromProps(props: &#123;&#125;, state: IState) &#123;</span><br><span class="line">console.log(&quot;getDerivedStateFromProps&quot;, props, state);</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="getsnapshotbeforeupdate-and-componentdidupdate">getSnapshotBeforeUpdate and componentDidUpdate</span></h3><h3><span id="shouldcomponentupdate">shouldComponentUpdate</span></h3><h2><span id="creating-a-function-component">Creating a function component</span></h2><p>函数组件是从JavaScript函数实现的。</p><h3><span id="creating-a-basic-function-component">Creating a basic function component</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const Confirm: React.SFC&lt;IProps&gt; = (props) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整示例如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">const ComponentName: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">const handler = () =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line">&lt;div&gt; Our JSX&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ComponentName.defaultProps = &#123;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ComponentName;</span><br></pre></td></tr></table></figure><h3><span id="stateful-function-components">Stateful function components</span></h3><p>富状态函数组件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Confirm: React.SFC&lt;IProps&gt; = props =&gt; &#123;</span><br><span class="line">const [cancelClickCount, setCancelClickCount] = React.useState(0);</span><br><span class="line"></span><br><span class="line">const handleOkClick = () =&gt; &#123;</span><br><span class="line">props.onOkClick();</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;创建一个React和TypeScript项目&lt;/li&gt;
&lt;li&gt;创建一个类组件&lt;/li&gt;
&lt;li&gt;处理类组件的事件&lt;/li&gt;
&lt;li&gt;类组件的状态&lt;/li&gt;
&lt;li&gt;类组件声明周期方法&lt;/li&gt;
&lt;li&gt;创建一个函数组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>第二章 TypeScript3的新特性</title>
    <link href="http://galudisu.info/2019/11/27/react-ts/chapter_2_TypeScript_3/"/>
    <id>http://galudisu.info/2019/11/27/react-ts/chapter_2_TypeScript_3/</id>
    <published>2019-11-27T07:50:01.000Z</published>
    <updated>2019-11-05T03:57:07.995Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Tuples</li><li>The unknown type</li><li>Project references</li><li>Default JSX properties</li></ul><h2><span id="tuples">Tuples</span></h2><p>元组类型用中括号表示，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> product: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line">product = [<span class="string">"Table"</span>, <span class="number">500</span>];</span><br></pre></td></tr></table></figure><h2><span id="javascript-的rest扩展语法">JavaScript 的rest扩展语法</span></h2><p>在JavaScript中，一个<code>rest</code>参数就是汇集多个参数以一个参数表示。因此它称为<code>rest</code>(剩余的、)。不要跟RESTful混淆。</p><p>TS中用三个点表示这种<code>rest</code>参数，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">...scores</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="open-ended-tuples">Open-ended tuples</span></h3><p>结合rest的扩展，tuple可以写成，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">string</span>, ...number[]];</span><br><span class="line"><span class="keyword">const</span> billyScores: Scores = [<span class="string">"Billy"</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">75</span>];</span><br></pre></td></tr></table></figure><h3><span id="tuple-function-parameters">Tuple function parameters</span></h3><p>除了rest扩展写法，TS3支持带上参数类型，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">...scores: [...<span class="built_in">number</span>[]]</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">string</span>, ...number[]];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logNameAndScores</span>(<span class="params">...scores: Scores</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores);</span><br><span class="line">&#125;</span><br><span class="line">logNameAndScores(<span class="string">"Sally"</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">75</span>, <span class="number">70</span>);</span><br></pre></td></tr></table></figure><h3><span id="spread-expressions">Spread expressions</span></h3><p>TS3中允许使用扩展语法，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScore</span>(<span class="params">score1: <span class="built_in">number</span>, score2: <span class="built_in">number</span>, score3: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(score1, score2, score3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scores: [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">75</span>, <span class="number">65</span>, <span class="number">80</span>];</span><br><span class="line"></span><br><span class="line">logScore(...scores);</span><br></pre></td></tr></table></figure><p>但不支持open-ended tuples，因此下面代码编译出错，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scoresUnlimited: [...number[]] = [<span class="number">75</span>, <span class="number">65</span>, <span class="number">80</span>];</span><br><span class="line">logScore(...scoresUnlimited);</span><br></pre></td></tr></table></figure><h3><span id="empty-tuples">Empty tuples</span></h3><p>TS3中可以定义空tuple，</p><p>对于类型别名，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Empty = [];</span><br></pre></td></tr></table></figure><p>声明该类型的一个变量，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> empty: Empty = [];</span><br></pre></td></tr></table></figure><p>如果尝试给该类型指派一个非空值，会出现编译错误，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notEmpty: Empty = [<span class="string">"Billy"</span>];</span><br></pre></td></tr></table></figure><p>空tuple可能没什么用，它的主要用处在于作为联合类型(union type)的一部分。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [] | [<span class="built_in">number</span>] | [<span class="built_in">number</span>, <span class="built_in">number</span>] | [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> benScores: Scores = [];</span><br><span class="line"><span class="keyword">const</span> samScores: Scores = [<span class="number">55</span>];</span><br><span class="line"><span class="keyword">const</span> bobScores: Scores = [<span class="number">95</span>, <span class="number">75</span>];</span><br><span class="line"><span class="keyword">const</span> jayneScores: Scores = [<span class="number">65</span>, <span class="number">50</span>, <span class="number">70</span>];</span><br><span class="line"><span class="keyword">const</span> sarahScores: Scores = [<span class="number">95</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">75</span>];<span class="comment">// illegal</span></span><br></pre></td></tr></table></figure><h3><span id="可选tuple元素">可选tuple元素</span></h3><p>TS中用<code>?</code>表示一个可选元素，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">number</span>, <span class="built_in">number</span>?, <span class="built_in">number</span>?];</span><br></pre></td></tr></table></figure><p>这样就可以创建带一个到三个元素的变量，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> samScores: Scores = [<span class="number">55</span>];</span><br><span class="line"><span class="keyword">const</span> bobScores: Scores = [<span class="number">95</span>, <span class="number">75</span>];</span><br><span class="line"><span class="keyword">const</span> jayneScores: Scores = [<span class="number">65</span>, <span class="number">50</span>, <span class="number">70</span>];</span><br></pre></td></tr></table></figure><p>严格来说，TypeScript是把类型看做是“真实的”，因此对应Type Safe的层次也是看做是类型安全的，不匹配的类型将发生编译错误，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sarahScores: Scores = [<span class="number">95</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">75</span>];<span class="comment">// illegal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> benScores: Scores = [];<span class="comment">// illegal</span></span><br></pre></td></tr></table></figure><h3><span id="unknown-type">Unknown type</span></h3><p>TS中对未知类型使用<code>unknow</code>表示，<code>unknown</code>类型通常和<code>any</code>类型交替地使用，编译器不会对这种类型进行检查，因此，下面写法是正确的，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">scores: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores.firstName);</span><br><span class="line"><span class="built_in">console</span>.log(scores.scores);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call this function</span></span><br><span class="line">logScores(&#123;</span><br><span class="line">name: <span class="string">"Billy"</span>,</span><br><span class="line">scores: [<span class="number">60</span>, <span class="number">70</span>, <span class="number">75</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但如果改为，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScoresBetter</span>(<span class="params">socres: unknown</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(scores.firstName);</span><br><span class="line"><span class="built_in">console</span>.log(scores.scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>立即获得一个编译器警告，带程序依然有效。</p><h3><span id="type-checking-with-a-type-redicate">Type checking with a type redicate</span></h3><p>顾名思义，就是用“谓语”对类型作检查，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scoresCheck = (</span><br><span class="line">scores: <span class="built_in">any</span></span><br><span class="line">): scores is &#123; name: <span class="built_in">string</span>; scores: <span class="built_in">number</span>[] &#125; =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"name"</span> <span class="keyword">in</span> socres &amp;&amp; <span class="string">"scores"</span> <span class="keyword">in</span> scores;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的<code>scores</code>参数带有类型谓语，<code>scores is { name: string; scores: number[] }</code>，以确保它包含类型属性<code>name</code>和<code>scores</code>。</p><p>可以结合类型别名，提高可读性，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = &#123; name: <span class="built_in">string</span>; scores: <span class="built_in">number</span>[] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> scoresCheck = (</span><br><span class="line">scores: <span class="built_in">any</span></span><br><span class="line">): scores is Scores =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"name"</span> <span class="keyword">in</span> scores &amp;&amp; <span class="string">"scores"</span> <span class="keyword">in</span> scores;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类型谓语属于type guard的一种方式，还有其它几种实现type guard的方式。</p><h3><span id="type-narrowing-with-a-type-assertion">Type narrowing with a type assertion</span></h3><p>类型收缩(type narrowing)类似于Java的强制转换，通过类型断言的方式，使用<code>as</code>关键实现，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = &#123;</span><br><span class="line">name: <span class="built_in">string</span>;</span><br><span class="line">scores: <span class="built_in">number</span>[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">scores: unknown</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log((scores <span class="keyword">as</span> scores).name);</span><br><span class="line"><span class="built_in">console</span>.log((scores <span class="keyword">as</span> Scores).scores);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="project-reference">Project reference</span></h3><p>(略) 参考网上tsconfig.json内容，</p><h3><span id="default-jsx-properties">Default JSX properties</span></h3><p>在TS3之前，我们必须设置默认的Props属性，并检查是否为null，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">text: <span class="built_in">string</span>;</span><br><span class="line">delimiter?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SplitText <span class="keyword">extends</span> Component&lt;IProps&gt; &#123;</span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">delimiter: <span class="string">","</span></span><br><span class="line">&#125;;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> bits = <span class="keyword">this</span>.props.text.split(<span class="keyword">this</span>.props.delimiter!);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;bits.map(<span class="function">(<span class="params">bit: <span class="built_in">string</span></span>) =&gt;</span> (</span><br><span class="line">&lt;li key=&#123;bit&#125;&gt;&#123;bit&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">))&#125;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;SplitText text=<span class="string">"Fred,Jane,Bob"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>TS3之后，可以不必要将<code>delimiter</code>属性设置为optional的，</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">text: <span class="built_in">string</span>;</span><br><span class="line">delimiter: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> SplitText <span class="keyword">extends</span> Component&lt;IProps&gt; &#123;</span><br><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">delimiter: <span class="string">","</span></span><br><span class="line">&#125;;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> bits = <span class="keyword">this</span>.props.text.split(<span class="keyword">this</span>.props.delimiter);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;bits.map(<span class="function">(<span class="params">bit: <span class="built_in">string</span></span>) =&gt;</span> (</span><br><span class="line">&lt;li key=&#123;bit&#125;&gt;&#123;bit&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">))&#125;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="问题">问题</span></h3><ol><li>怎么调用<code>drawPoint</code>这个函数，</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawPoint</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> point: [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>];</span><br><span class="line">drawPoint(...point);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建另外一个版本的<code>drawPoint</code>，参数用<code>[number, number, number]</code>实现，</p></li><li><p>在问题2中，让<code>z</code>是可选的。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Tuples&lt;/li&gt;
&lt;li&gt;The unknown type&lt;/li&gt;
&lt;li&gt;Project references&lt;/li&gt;
&lt;li&gt;Default JSX properties&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span id=&quot;tuples&quot;&gt;Tuple
      
    
    </summary>
    
      <category term="react" scheme="http://galudisu.info/categories/react/"/>
    
    
      <category term="react" scheme="http://galudisu.info/tags/react/"/>
    
      <category term="typescript" scheme="http://galudisu.info/tags/typescript/"/>
    
  </entry>
  
</feed>
